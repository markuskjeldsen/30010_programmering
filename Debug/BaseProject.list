
BaseProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000205c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080021ec  080021ec  000121ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002268  08002268  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08002268  08002268  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002268  08002268  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002268  08002268  00012268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800226c  0800226c  0001226c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08002270  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  20000088  080022f8  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  080022f8  000202fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000486c  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000f2c  00000000  00000000  00024967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000570  00000000  00000000  00025898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003f3  00000000  00000000  00025e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000034df  00000000  00000000  000261fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005371  00000000  00000000  000296da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005a528  00000000  00000000  0002ea4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001e18  00000000  00000000  00088f74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0008ad8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080021d4 	.word	0x080021d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	080021d4 	.word	0x080021d4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000270:	b480      	push	{r7}
 8000272:	b08b      	sub	sp, #44	; 0x2c
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8000278:	2300      	movs	r3, #0
 800027a:	623b      	str	r3, [r7, #32]
 800027c:	2300      	movs	r3, #0
 800027e:	61fb      	str	r3, [r7, #28]
 8000280:	2300      	movs	r3, #0
 8000282:	61bb      	str	r3, [r7, #24]
 8000284:	2300      	movs	r3, #0
 8000286:	617b      	str	r3, [r7, #20]
 8000288:	2300      	movs	r3, #0
 800028a:	613b      	str	r3, [r7, #16]
 800028c:	2300      	movs	r3, #0
 800028e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 8000290:	2300      	movs	r3, #0
 8000292:	60fb      	str	r3, [r7, #12]
 8000294:	2300      	movs	r3, #0
 8000296:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000298:	4b8b      	ldr	r3, [pc, #556]	; (80004c8 <RCC_GetClocksFreq+0x258>)
 800029a:	685b      	ldr	r3, [r3, #4]
 800029c:	f003 030c 	and.w	r3, r3, #12
 80002a0:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 80002a2:	6a3b      	ldr	r3, [r7, #32]
 80002a4:	2b08      	cmp	r3, #8
 80002a6:	d011      	beq.n	80002cc <RCC_GetClocksFreq+0x5c>
 80002a8:	6a3b      	ldr	r3, [r7, #32]
 80002aa:	2b08      	cmp	r3, #8
 80002ac:	d837      	bhi.n	800031e <RCC_GetClocksFreq+0xae>
 80002ae:	6a3b      	ldr	r3, [r7, #32]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d003      	beq.n	80002bc <RCC_GetClocksFreq+0x4c>
 80002b4:	6a3b      	ldr	r3, [r7, #32]
 80002b6:	2b04      	cmp	r3, #4
 80002b8:	d004      	beq.n	80002c4 <RCC_GetClocksFreq+0x54>
 80002ba:	e030      	b.n	800031e <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	4a83      	ldr	r2, [pc, #524]	; (80004cc <RCC_GetClocksFreq+0x25c>)
 80002c0:	601a      	str	r2, [r3, #0]
      break;
 80002c2:	e030      	b.n	8000326 <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	4a81      	ldr	r2, [pc, #516]	; (80004cc <RCC_GetClocksFreq+0x25c>)
 80002c8:	601a      	str	r2, [r3, #0]
      break;
 80002ca:	e02c      	b.n	8000326 <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80002cc:	4b7e      	ldr	r3, [pc, #504]	; (80004c8 <RCC_GetClocksFreq+0x258>)
 80002ce:	685b      	ldr	r3, [r3, #4]
 80002d0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80002d4:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80002d6:	4b7c      	ldr	r3, [pc, #496]	; (80004c8 <RCC_GetClocksFreq+0x258>)
 80002d8:	685b      	ldr	r3, [r3, #4]
 80002da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002de:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 80002e0:	69fb      	ldr	r3, [r7, #28]
 80002e2:	0c9b      	lsrs	r3, r3, #18
 80002e4:	3302      	adds	r3, #2
 80002e6:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 80002e8:	69bb      	ldr	r3, [r7, #24]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d105      	bne.n	80002fa <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 80002ee:	69fb      	ldr	r3, [r7, #28]
 80002f0:	4a77      	ldr	r2, [pc, #476]	; (80004d0 <RCC_GetClocksFreq+0x260>)
 80002f2:	fb02 f303 	mul.w	r3, r2, r3
 80002f6:	627b      	str	r3, [r7, #36]	; 0x24
 80002f8:	e00d      	b.n	8000316 <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 80002fa:	4b73      	ldr	r3, [pc, #460]	; (80004c8 <RCC_GetClocksFreq+0x258>)
 80002fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002fe:	f003 030f 	and.w	r3, r3, #15
 8000302:	3301      	adds	r3, #1
 8000304:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8000306:	4a71      	ldr	r2, [pc, #452]	; (80004cc <RCC_GetClocksFreq+0x25c>)
 8000308:	697b      	ldr	r3, [r7, #20]
 800030a:	fbb2 f2f3 	udiv	r2, r2, r3
 800030e:	69fb      	ldr	r3, [r7, #28]
 8000310:	fb02 f303 	mul.w	r3, r2, r3
 8000314:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800031a:	601a      	str	r2, [r3, #0]
      break;
 800031c:	e003      	b.n	8000326 <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4a6a      	ldr	r2, [pc, #424]	; (80004cc <RCC_GetClocksFreq+0x25c>)
 8000322:	601a      	str	r2, [r3, #0]
      break;
 8000324:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000326:	4b68      	ldr	r3, [pc, #416]	; (80004c8 <RCC_GetClocksFreq+0x258>)
 8000328:	685b      	ldr	r3, [r3, #4]
 800032a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800032e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000330:	6a3b      	ldr	r3, [r7, #32]
 8000332:	091b      	lsrs	r3, r3, #4
 8000334:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 8000336:	4a67      	ldr	r2, [pc, #412]	; (80004d4 <RCC_GetClocksFreq+0x264>)
 8000338:	6a3b      	ldr	r3, [r7, #32]
 800033a:	4413      	add	r3, r2
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	b2db      	uxtb	r3, r3
 8000340:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	681a      	ldr	r2, [r3, #0]
 8000346:	68bb      	ldr	r3, [r7, #8]
 8000348:	40da      	lsrs	r2, r3
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800034e:	4b5e      	ldr	r3, [pc, #376]	; (80004c8 <RCC_GetClocksFreq+0x258>)
 8000350:	685b      	ldr	r3, [r3, #4]
 8000352:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000356:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8000358:	6a3b      	ldr	r3, [r7, #32]
 800035a:	0a1b      	lsrs	r3, r3, #8
 800035c:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 800035e:	4a5d      	ldr	r2, [pc, #372]	; (80004d4 <RCC_GetClocksFreq+0x264>)
 8000360:	6a3b      	ldr	r3, [r7, #32]
 8000362:	4413      	add	r3, r2
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	b2db      	uxtb	r3, r3
 8000368:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	685a      	ldr	r2, [r3, #4]
 800036e:	693b      	ldr	r3, [r7, #16]
 8000370:	40da      	lsrs	r2, r3
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000376:	4b54      	ldr	r3, [pc, #336]	; (80004c8 <RCC_GetClocksFreq+0x258>)
 8000378:	685b      	ldr	r3, [r3, #4]
 800037a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800037e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8000380:	6a3b      	ldr	r3, [r7, #32]
 8000382:	0adb      	lsrs	r3, r3, #11
 8000384:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 8000386:	4a53      	ldr	r2, [pc, #332]	; (80004d4 <RCC_GetClocksFreq+0x264>)
 8000388:	6a3b      	ldr	r3, [r7, #32]
 800038a:	4413      	add	r3, r2
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	b2db      	uxtb	r3, r3
 8000390:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	685a      	ldr	r2, [r3, #4]
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	40da      	lsrs	r2, r3
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 800039e:	4b4a      	ldr	r3, [pc, #296]	; (80004c8 <RCC_GetClocksFreq+0x258>)
 80003a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003a2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80003a6:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80003a8:	6a3b      	ldr	r3, [r7, #32]
 80003aa:	091b      	lsrs	r3, r3, #4
 80003ac:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80003ae:	4a4a      	ldr	r2, [pc, #296]	; (80004d8 <RCC_GetClocksFreq+0x268>)
 80003b0:	6a3b      	ldr	r3, [r7, #32]
 80003b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003b6:	b29b      	uxth	r3, r3
 80003b8:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 80003ba:	693b      	ldr	r3, [r7, #16]
 80003bc:	f003 0310 	and.w	r3, r3, #16
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d006      	beq.n	80003d2 <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 80003c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80003c6:	693b      	ldr	r3, [r7, #16]
 80003c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	611a      	str	r2, [r3, #16]
 80003d0:	e003      	b.n	80003da <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681a      	ldr	r2, [r3, #0]
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 80003da:	4b3b      	ldr	r3, [pc, #236]	; (80004c8 <RCC_GetClocksFreq+0x258>)
 80003dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003de:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 80003e2:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 80003e4:	6a3b      	ldr	r3, [r7, #32]
 80003e6:	0a5b      	lsrs	r3, r3, #9
 80003e8:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80003ea:	4a3b      	ldr	r2, [pc, #236]	; (80004d8 <RCC_GetClocksFreq+0x268>)
 80003ec:	6a3b      	ldr	r3, [r7, #32]
 80003ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003f2:	b29b      	uxth	r3, r3
 80003f4:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 80003f6:	693b      	ldr	r3, [r7, #16]
 80003f8:	f003 0310 	and.w	r3, r3, #16
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d006      	beq.n	800040e <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8000400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000402:	693b      	ldr	r3, [r7, #16]
 8000404:	fbb2 f2f3 	udiv	r2, r2, r3
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	615a      	str	r2, [r3, #20]
 800040c:	e003      	b.n	8000416 <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681a      	ldr	r2, [r3, #0]
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000416:	4b2c      	ldr	r3, [pc, #176]	; (80004c8 <RCC_GetClocksFreq+0x258>)
 8000418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041a:	f003 0310 	and.w	r3, r3, #16
 800041e:	2b10      	cmp	r3, #16
 8000420:	d003      	beq.n	800042a <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	4a29      	ldr	r2, [pc, #164]	; (80004cc <RCC_GetClocksFreq+0x25c>)
 8000426:	619a      	str	r2, [r3, #24]
 8000428:	e003      	b.n	8000432 <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681a      	ldr	r2, [r3, #0]
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 8000432:	4b25      	ldr	r3, [pc, #148]	; (80004c8 <RCC_GetClocksFreq+0x258>)
 8000434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000436:	f003 0320 	and.w	r3, r3, #32
 800043a:	2b20      	cmp	r3, #32
 800043c:	d003      	beq.n	8000446 <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4a22      	ldr	r2, [pc, #136]	; (80004cc <RCC_GetClocksFreq+0x25c>)
 8000442:	61da      	str	r2, [r3, #28]
 8000444:	e003      	b.n	800044e <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	681a      	ldr	r2, [r3, #0]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 800044e:	4b1e      	ldr	r3, [pc, #120]	; (80004c8 <RCC_GetClocksFreq+0x258>)
 8000450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800045a:	d10d      	bne.n	8000478 <RCC_GetClocksFreq+0x208>
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000462:	429a      	cmp	r2, r3
 8000464:	d108      	bne.n	8000478 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 8000466:	68fa      	ldr	r2, [r7, #12]
 8000468:	68bb      	ldr	r3, [r7, #8]
 800046a:	429a      	cmp	r2, r3
 800046c:	d104      	bne.n	8000478 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 800046e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000470:	005a      	lsls	r2, r3, #1
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	621a      	str	r2, [r3, #32]
 8000476:	e003      	b.n	8000480 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	68da      	ldr	r2, [r3, #12]
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000480:	4b11      	ldr	r3, [pc, #68]	; (80004c8 <RCC_GetClocksFreq+0x258>)
 8000482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000484:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800048c:	d10d      	bne.n	80004aa <RCC_GetClocksFreq+0x23a>
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000494:	429a      	cmp	r2, r3
 8000496:	d108      	bne.n	80004aa <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 8000498:	68fa      	ldr	r2, [r7, #12]
 800049a:	68bb      	ldr	r3, [r7, #8]
 800049c:	429a      	cmp	r2, r3
 800049e:	d104      	bne.n	80004aa <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 80004a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004a2:	005a      	lsls	r2, r3, #1
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	625a      	str	r2, [r3, #36]	; 0x24
 80004a8:	e003      	b.n	80004b2 <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	68da      	ldr	r2, [r3, #12]
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 80004b2:	4b05      	ldr	r3, [pc, #20]	; (80004c8 <RCC_GetClocksFreq+0x258>)
 80004b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b6:	f003 0303 	and.w	r3, r3, #3
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d10e      	bne.n	80004dc <RCC_GetClocksFreq+0x26c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	68da      	ldr	r2, [r3, #12]
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	629a      	str	r2, [r3, #40]	; 0x28
 80004c6:	e028      	b.n	800051a <RCC_GetClocksFreq+0x2aa>
 80004c8:	40021000 	.word	0x40021000
 80004cc:	007a1200 	.word	0x007a1200
 80004d0:	003d0900 	.word	0x003d0900
 80004d4:	20000000 	.word	0x20000000
 80004d8:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 80004dc:	4b6c      	ldr	r3, [pc, #432]	; (8000690 <RCC_GetClocksFreq+0x420>)
 80004de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e0:	f003 0303 	and.w	r3, r3, #3
 80004e4:	2b01      	cmp	r3, #1
 80004e6:	d104      	bne.n	80004f2 <RCC_GetClocksFreq+0x282>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681a      	ldr	r2, [r3, #0]
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	629a      	str	r2, [r3, #40]	; 0x28
 80004f0:	e013      	b.n	800051a <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 80004f2:	4b67      	ldr	r3, [pc, #412]	; (8000690 <RCC_GetClocksFreq+0x420>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	f003 0303 	and.w	r3, r3, #3
 80004fa:	2b02      	cmp	r3, #2
 80004fc:	d104      	bne.n	8000508 <RCC_GetClocksFreq+0x298>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000504:	629a      	str	r2, [r3, #40]	; 0x28
 8000506:	e008      	b.n	800051a <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8000508:	4b61      	ldr	r3, [pc, #388]	; (8000690 <RCC_GetClocksFreq+0x420>)
 800050a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050c:	f003 0303 	and.w	r3, r3, #3
 8000510:	2b03      	cmp	r3, #3
 8000512:	d102      	bne.n	800051a <RCC_GetClocksFreq+0x2aa>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	4a5f      	ldr	r2, [pc, #380]	; (8000694 <RCC_GetClocksFreq+0x424>)
 8000518:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 800051a:	4b5d      	ldr	r3, [pc, #372]	; (8000690 <RCC_GetClocksFreq+0x420>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000522:	2b00      	cmp	r3, #0
 8000524:	d104      	bne.n	8000530 <RCC_GetClocksFreq+0x2c0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	689a      	ldr	r2, [r3, #8]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	62da      	str	r2, [r3, #44]	; 0x2c
 800052e:	e021      	b.n	8000574 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8000530:	4b57      	ldr	r3, [pc, #348]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000534:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800053c:	d104      	bne.n	8000548 <RCC_GetClocksFreq+0x2d8>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	62da      	str	r2, [r3, #44]	; 0x2c
 8000546:	e015      	b.n	8000574 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 8000548:	4b51      	ldr	r3, [pc, #324]	; (8000690 <RCC_GetClocksFreq+0x420>)
 800054a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000550:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000554:	d104      	bne.n	8000560 <RCC_GetClocksFreq+0x2f0>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800055c:	62da      	str	r2, [r3, #44]	; 0x2c
 800055e:	e009      	b.n	8000574 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8000560:	4b4b      	ldr	r3, [pc, #300]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000564:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000568:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800056c:	d102      	bne.n	8000574 <RCC_GetClocksFreq+0x304>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4a48      	ldr	r2, [pc, #288]	; (8000694 <RCC_GetClocksFreq+0x424>)
 8000572:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8000574:	4b46      	ldr	r3, [pc, #280]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000578:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800057c:	2b00      	cmp	r3, #0
 800057e:	d104      	bne.n	800058a <RCC_GetClocksFreq+0x31a>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	689a      	ldr	r2, [r3, #8]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	631a      	str	r2, [r3, #48]	; 0x30
 8000588:	e021      	b.n	80005ce <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 800058a:	4b41      	ldr	r3, [pc, #260]	; (8000690 <RCC_GetClocksFreq+0x420>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000592:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000596:	d104      	bne.n	80005a2 <RCC_GetClocksFreq+0x332>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	631a      	str	r2, [r3, #48]	; 0x30
 80005a0:	e015      	b.n	80005ce <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 80005a2:	4b3b      	ldr	r3, [pc, #236]	; (8000690 <RCC_GetClocksFreq+0x420>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80005aa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80005ae:	d104      	bne.n	80005ba <RCC_GetClocksFreq+0x34a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005b6:	631a      	str	r2, [r3, #48]	; 0x30
 80005b8:	e009      	b.n	80005ce <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 80005ba:	4b35      	ldr	r3, [pc, #212]	; (8000690 <RCC_GetClocksFreq+0x420>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80005c2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80005c6:	d102      	bne.n	80005ce <RCC_GetClocksFreq+0x35e>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4a32      	ldr	r2, [pc, #200]	; (8000694 <RCC_GetClocksFreq+0x424>)
 80005cc:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 80005ce:	4b30      	ldr	r3, [pc, #192]	; (8000690 <RCC_GetClocksFreq+0x420>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d104      	bne.n	80005e4 <RCC_GetClocksFreq+0x374>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	689a      	ldr	r2, [r3, #8]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	635a      	str	r2, [r3, #52]	; 0x34
 80005e2:	e021      	b.n	8000628 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 80005e4:	4b2a      	ldr	r3, [pc, #168]	; (8000690 <RCC_GetClocksFreq+0x420>)
 80005e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80005ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80005f0:	d104      	bne.n	80005fc <RCC_GetClocksFreq+0x38c>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	635a      	str	r2, [r3, #52]	; 0x34
 80005fa:	e015      	b.n	8000628 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 80005fc:	4b24      	ldr	r3, [pc, #144]	; (8000690 <RCC_GetClocksFreq+0x420>)
 80005fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000600:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000604:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000608:	d104      	bne.n	8000614 <RCC_GetClocksFreq+0x3a4>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000610:	635a      	str	r2, [r3, #52]	; 0x34
 8000612:	e009      	b.n	8000628 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8000614:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000618:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800061c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000620:	d102      	bne.n	8000628 <RCC_GetClocksFreq+0x3b8>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4a1b      	ldr	r2, [pc, #108]	; (8000694 <RCC_GetClocksFreq+0x424>)
 8000626:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 8000628:	4b19      	ldr	r3, [pc, #100]	; (8000690 <RCC_GetClocksFreq+0x420>)
 800062a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000630:	2b00      	cmp	r3, #0
 8000632:	d104      	bne.n	800063e <RCC_GetClocksFreq+0x3ce>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	689a      	ldr	r2, [r3, #8]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 800063c:	e021      	b.n	8000682 <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 800063e:	4b14      	ldr	r3, [pc, #80]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000646:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800064a:	d104      	bne.n	8000656 <RCC_GetClocksFreq+0x3e6>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000654:	e015      	b.n	8000682 <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800065e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000662:	d104      	bne.n	800066e <RCC_GetClocksFreq+0x3fe>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800066a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800066c:	e009      	b.n	8000682 <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 800066e:	4b08      	ldr	r3, [pc, #32]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000676:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800067a:	d102      	bne.n	8000682 <RCC_GetClocksFreq+0x412>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	4a05      	ldr	r2, [pc, #20]	; (8000694 <RCC_GetClocksFreq+0x424>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000682:	bf00      	nop
 8000684:	372c      	adds	r7, #44	; 0x2c
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	40021000 	.word	0x40021000
 8000694:	007a1200 	.word	0x007a1200

08000698 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	460b      	mov	r3, r1
 80006a2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 80006a4:	887b      	ldrh	r3, [r7, #2]
 80006a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80006aa:	b29a      	uxth	r2, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 80006bc:	b480      	push	{r7}
 80006be:	b089      	sub	sp, #36	; 0x24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	4613      	mov	r3, r2
 80006c8:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61bb      	str	r3, [r7, #24]
 80006ce:	2300      	movs	r3, #0
 80006d0:	617b      	str	r3, [r7, #20]
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	0a1b      	lsrs	r3, r3, #8
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 80006ee:	2201      	movs	r2, #1
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	fa02 f303 	lsl.w	r3, r2, r3
 80006f6:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 80006f8:	69bb      	ldr	r3, [r7, #24]
 80006fa:	2b02      	cmp	r3, #2
 80006fc:	d103      	bne.n	8000706 <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	3304      	adds	r3, #4
 8000702:	61fb      	str	r3, [r7, #28]
 8000704:	e005      	b.n	8000712 <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8000706:	69bb      	ldr	r3, [r7, #24]
 8000708:	2b03      	cmp	r3, #3
 800070a:	d102      	bne.n	8000712 <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 800070c:	69fb      	ldr	r3, [r7, #28]
 800070e:	3308      	adds	r3, #8
 8000710:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d006      	beq.n	8000726 <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000718:	69fb      	ldr	r3, [r7, #28]
 800071a:	6819      	ldr	r1, [r3, #0]
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	693a      	ldr	r2, [r7, #16]
 8000720:	430a      	orrs	r2, r1
 8000722:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000724:	e006      	b.n	8000734 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	6819      	ldr	r1, [r3, #0]
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	43da      	mvns	r2, r3
 800072e:	69fb      	ldr	r3, [r7, #28]
 8000730:	400a      	ands	r2, r1
 8000732:	601a      	str	r2, [r3, #0]
}
 8000734:	bf00      	nop
 8000736:	3724      	adds	r7, #36	; 0x24
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800074a:	2300      	movs	r3, #0
 800074c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	69da      	ldr	r2, [r3, #28]
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	4013      	ands	r3, r2
 8000756:	2b00      	cmp	r3, #0
 8000758:	d002      	beq.n	8000760 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 800075a:	2301      	movs	r3, #1
 800075c:	73fb      	strb	r3, [r7, #15]
 800075e:	e001      	b.n	8000764 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8000760:	2300      	movs	r3, #0
 8000762:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000764:	7bfb      	ldrb	r3, [r7, #15]
}
 8000766:	4618      	mov	r0, r3
 8000768:	3714      	adds	r7, #20
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr

08000772 <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8000772:	b480      	push	{r7}
 8000774:	b087      	sub	sp, #28
 8000776:	af00      	add	r7, sp, #0
 8000778:	6078      	str	r0, [r7, #4]
 800077a:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000788:	2300      	movs	r3, #0
 800078a:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	b29b      	uxth	r3, r3
 8000790:	0a1b      	lsrs	r3, r3, #8
 8000792:	b29b      	uxth	r3, r3
 8000794:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	b2db      	uxtb	r3, r3
 800079a:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 800079c:	2201      	movs	r2, #1
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	fa02 f303 	lsl.w	r3, r2, r3
 80007a4:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d105      	bne.n	80007b8 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	697a      	ldr	r2, [r7, #20]
 80007b2:	4013      	ands	r3, r2
 80007b4:	617b      	str	r3, [r7, #20]
 80007b6:	e00d      	b.n	80007d4 <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	2b02      	cmp	r3, #2
 80007bc:	d105      	bne.n	80007ca <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	697a      	ldr	r2, [r7, #20]
 80007c4:	4013      	ands	r3, r2
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	e004      	b.n	80007d4 <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	689b      	ldr	r3, [r3, #8]
 80007ce:	697a      	ldr	r2, [r7, #20]
 80007d0:	4013      	ands	r3, r2
 80007d2:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	0c1b      	lsrs	r3, r3, #16
 80007d8:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 80007da:	2201      	movs	r2, #1
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	fa02 f303 	lsl.w	r3, r2, r3
 80007e2:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	69db      	ldr	r3, [r3, #28]
 80007e8:	68fa      	ldr	r2, [r7, #12]
 80007ea:	4013      	ands	r3, r2
 80007ec:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d005      	beq.n	8000800 <USART_GetITStatus+0x8e>
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d002      	beq.n	8000800 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 80007fa:	2301      	movs	r3, #1
 80007fc:	74fb      	strb	r3, [r7, #19]
 80007fe:	e001      	b.n	8000804 <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 8000800:	2300      	movs	r3, #0
 8000802:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000804:	7cfb      	ldrb	r3, [r7, #19]
}
 8000806:	4618      	mov	r0, r3
 8000808:	371c      	adds	r7, #28
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
	...

08000814 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	f003 031f 	and.w	r3, r3, #31
 8000824:	2201      	movs	r2, #1
 8000826:	fa02 f103 	lsl.w	r1, r2, r3
 800082a:	4a06      	ldr	r2, [pc, #24]	; (8000844 <NVIC_EnableIRQ+0x30>)
 800082c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000830:	095b      	lsrs	r3, r3, #5
 8000832:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000e100 	.word	0xe000e100

08000848 <uart_put_char>:
        UART_COUNT--;
    }
    return val;
}

void uart_put_char(uint8_t c) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	b29b      	uxth	r3, r3
 8000856:	4619      	mov	r1, r3
 8000858:	4807      	ldr	r0, [pc, #28]	; (8000878 <uart_put_char+0x30>)
 800085a:	f7ff ff1d 	bl	8000698 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 800085e:	bf00      	nop
 8000860:	2180      	movs	r1, #128	; 0x80
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <uart_put_char+0x30>)
 8000864:	f7ff ff6c 	bl	8000740 <USART_GetFlagStatus>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d0f8      	beq.n	8000860 <uart_put_char+0x18>
}
 800086e:	bf00      	nop
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40004400 	.word	0x40004400

0800087c <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0
 8000882:	60f8      	str	r0, [r7, #12]
 8000884:	60b9      	str	r1, [r7, #8]
 8000886:	607a      	str	r2, [r7, #4]
 8000888:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]
 800088e:	e012      	b.n	80008b6 <_write_r+0x3a>
        if (ptr[n] == '\n') {
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	4413      	add	r3, r2
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2b0a      	cmp	r3, #10
 800089a:	d102      	bne.n	80008a2 <_write_r+0x26>
            uart_put_char('\r');
 800089c:	200d      	movs	r0, #13
 800089e:	f7ff ffd3 	bl	8000848 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	687a      	ldr	r2, [r7, #4]
 80008a6:	4413      	add	r3, r2
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff ffcc 	bl	8000848 <uart_put_char>
    for (n = 0; n < len; n++) {
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	3301      	adds	r3, #1
 80008b4:	617b      	str	r3, [r7, #20]
 80008b6:	697a      	ldr	r2, [r7, #20]
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	429a      	cmp	r2, r3
 80008bc:	dbe8      	blt.n	8000890 <_write_r+0x14>
    }

    return len;
 80008be:	683b      	ldr	r3, [r7, #0]
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3718      	adds	r7, #24
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 80008cc:	4915      	ldr	r1, [pc, #84]	; (8000924 <USART2_IRQHandler+0x5c>)
 80008ce:	4816      	ldr	r0, [pc, #88]	; (8000928 <USART2_IRQHandler+0x60>)
 80008d0:	f7ff ff4f 	bl	8000772 <USART_GetITStatus>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d021      	beq.n	800091e <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 80008da:	4b13      	ldr	r3, [pc, #76]	; (8000928 <USART2_IRQHandler+0x60>)
 80008dc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80008de:	b299      	uxth	r1, r3
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <USART2_IRQHandler+0x64>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	1c5a      	adds	r2, r3, #1
 80008e8:	b2d0      	uxtb	r0, r2
 80008ea:	4a10      	ldr	r2, [pc, #64]	; (800092c <USART2_IRQHandler+0x64>)
 80008ec:	7010      	strb	r0, [r2, #0]
 80008ee:	461a      	mov	r2, r3
 80008f0:	b2c9      	uxtb	r1, r1
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <USART2_IRQHandler+0x68>)
 80008f4:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 80008f6:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <USART2_IRQHandler+0x6c>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	2bff      	cmp	r3, #255	; 0xff
 80008fe:	d107      	bne.n	8000910 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 8000900:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <USART2_IRQHandler+0x70>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	b2db      	uxtb	r3, r3
 8000906:	3301      	adds	r3, #1
 8000908:	b2da      	uxtb	r2, r3
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <USART2_IRQHandler+0x70>)
 800090c:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 800090e:	e006      	b.n	800091e <USART2_IRQHandler+0x56>
            UART_COUNT++;
 8000910:	4b08      	ldr	r3, [pc, #32]	; (8000934 <USART2_IRQHandler+0x6c>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	b2db      	uxtb	r3, r3
 8000916:	3301      	adds	r3, #1
 8000918:	b2da      	uxtb	r2, r3
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <USART2_IRQHandler+0x6c>)
 800091c:	701a      	strb	r2, [r3, #0]
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	00050105 	.word	0x00050105
 8000928:	40004400 	.word	0x40004400
 800092c:	200001a4 	.word	0x200001a4
 8000930:	200000a4 	.word	0x200000a4
 8000934:	200001a6 	.word	0x200001a6
 8000938:	200001a5 	.word	0x200001a5

0800093c <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b094      	sub	sp, #80	; 0x50
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 8000944:	4b86      	ldr	r3, [pc, #536]	; (8000b60 <uart_init+0x224>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	689b      	ldr	r3, [r3, #8]
 800094a:	2100      	movs	r1, #0
 800094c:	4618      	mov	r0, r3
 800094e:	f000 fd31 	bl	80013b4 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 8000952:	4b83      	ldr	r3, [pc, #524]	; (8000b60 <uart_init+0x224>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	2100      	movs	r1, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f000 fd2a 	bl	80013b4 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 8000960:	4b80      	ldr	r3, [pc, #512]	; (8000b64 <uart_init+0x228>)
 8000962:	695b      	ldr	r3, [r3, #20]
 8000964:	4a7f      	ldr	r2, [pc, #508]	; (8000b64 <uart_init+0x228>)
 8000966:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800096a:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 800096c:	4b7d      	ldr	r3, [pc, #500]	; (8000b64 <uart_init+0x228>)
 800096e:	69db      	ldr	r3, [r3, #28]
 8000970:	4a7c      	ldr	r2, [pc, #496]	; (8000b64 <uart_init+0x228>)
 8000972:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000976:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8000978:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800097c:	6a1b      	ldr	r3, [r3, #32]
 800097e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000982:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000986:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8000988:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800098c:	6a1b      	ldr	r3, [r3, #32]
 800098e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000992:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000996:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8000998:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800099c:	6a1b      	ldr	r3, [r3, #32]
 800099e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80009a6:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 80009a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009ac:	6a1b      	ldr	r3, [r3, #32]
 80009ae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009b2:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80009b6:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 80009b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009bc:	689b      	ldr	r3, [r3, #8]
 80009be:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80009c6:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 80009c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009cc:	689b      	ldr	r3, [r3, #8]
 80009ce:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009d2:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80009d6:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 80009d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009dc:	889b      	ldrh	r3, [r3, #4]
 80009de:	b29b      	uxth	r3, r3
 80009e0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009e4:	f023 030c 	bic.w	r3, r3, #12
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 80009ec:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009f4:	8892      	ldrh	r2, [r2, #4]
 80009f6:	b292      	uxth	r2, r2
 80009f8:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 80009fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a08:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8000a0a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a14:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000a18:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8000a1a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a28:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8000a2a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a34:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000a38:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8000a3a:	4b4b      	ldr	r3, [pc, #300]	; (8000b68 <uart_init+0x22c>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a4a      	ldr	r2, [pc, #296]	; (8000b68 <uart_init+0x22c>)
 8000a40:	f023 0301 	bic.w	r3, r3, #1
 8000a44:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8000a46:	4b48      	ldr	r3, [pc, #288]	; (8000b68 <uart_init+0x22c>)
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	4a47      	ldr	r2, [pc, #284]	; (8000b68 <uart_init+0x22c>)
 8000a4c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000a50:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 8000a52:	4b45      	ldr	r3, [pc, #276]	; (8000b68 <uart_init+0x22c>)
 8000a54:	4a44      	ldr	r2, [pc, #272]	; (8000b68 <uart_init+0x22c>)
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8000a5a:	4b43      	ldr	r3, [pc, #268]	; (8000b68 <uart_init+0x22c>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a42      	ldr	r2, [pc, #264]	; (8000b68 <uart_init+0x22c>)
 8000a60:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000a64:	f023 030c 	bic.w	r3, r3, #12
 8000a68:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8000a6a:	4b3f      	ldr	r3, [pc, #252]	; (8000b68 <uart_init+0x22c>)
 8000a6c:	4a3e      	ldr	r2, [pc, #248]	; (8000b68 <uart_init+0x22c>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 8000a72:	4b3d      	ldr	r3, [pc, #244]	; (8000b68 <uart_init+0x22c>)
 8000a74:	4a3c      	ldr	r2, [pc, #240]	; (8000b68 <uart_init+0x22c>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8000a7a:	4b3b      	ldr	r3, [pc, #236]	; (8000b68 <uart_init+0x22c>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a3a      	ldr	r2, [pc, #232]	; (8000b68 <uart_init+0x22c>)
 8000a80:	f043 030c 	orr.w	r3, r3, #12
 8000a84:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8000a86:	4b38      	ldr	r3, [pc, #224]	; (8000b68 <uart_init+0x22c>)
 8000a88:	689b      	ldr	r3, [r3, #8]
 8000a8a:	4a37      	ldr	r2, [pc, #220]	; (8000b68 <uart_init+0x22c>)
 8000a8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a90:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 8000a92:	4b35      	ldr	r3, [pc, #212]	; (8000b68 <uart_init+0x22c>)
 8000a94:	4a34      	ldr	r2, [pc, #208]	; (8000b68 <uart_init+0x22c>)
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	647b      	str	r3, [r7, #68]	; 0x44
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8000aa6:	f107 0308 	add.w	r3, r7, #8
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff fbe0 	bl	8000270 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8000ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ab2:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000ab4:	4b2c      	ldr	r3, [pc, #176]	; (8000b68 <uart_init+0x22c>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d010      	beq.n	8000ae2 <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 8000ac0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ac2:	005a      	lsls	r2, r3, #1
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aca:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8000acc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	fbb3 f2f2 	udiv	r2, r3, r2
 8000ad6:	6879      	ldr	r1, [r7, #4]
 8000ad8:	fb01 f202 	mul.w	r2, r1, r2
 8000adc:	1a9b      	subs	r3, r3, r2
 8000ade:	64bb      	str	r3, [r7, #72]	; 0x48
 8000ae0:	e00d      	b.n	8000afe <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 8000ae2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aea:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 8000aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	fbb3 f2f2 	udiv	r2, r3, r2
 8000af4:	6879      	ldr	r1, [r7, #4]
 8000af6:	fb01 f202 	mul.w	r2, r1, r2
 8000afa:	1a9b      	subs	r3, r3, r2
 8000afc:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	085b      	lsrs	r3, r3, #1
 8000b02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d302      	bcc.n	8000b0e <uart_init+0x1d2>
        divider++;
 8000b08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 8000b0e:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <uart_init+0x22c>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d00b      	beq.n	8000b32 <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8000b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b1c:	085b      	lsrs	r3, r3, #1
 8000b1e:	f003 0307 	and.w	r3, r3, #7
 8000b22:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8000b24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000b26:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8000b32:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <uart_init+0x22c>)
 8000b34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000b36:	b292      	uxth	r2, r2
 8000b38:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <uart_init+0x22c>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a0a      	ldr	r2, [pc, #40]	; (8000b68 <uart_init+0x22c>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8000b46:	2201      	movs	r2, #1
 8000b48:	4908      	ldr	r1, [pc, #32]	; (8000b6c <uart_init+0x230>)
 8000b4a:	4807      	ldr	r0, [pc, #28]	; (8000b68 <uart_init+0x22c>)
 8000b4c:	f7ff fdb6 	bl	80006bc <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8000b50:	2026      	movs	r0, #38	; 0x26
 8000b52:	f7ff fe5f 	bl	8000814 <NVIC_EnableIRQ>
}
 8000b56:	bf00      	nop
 8000b58:	3750      	adds	r7, #80	; 0x50
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000084 	.word	0x20000084
 8000b64:	40021000 	.word	0x40021000
 8000b68:	40004400 	.word	0x40004400
 8000b6c:	00050105 	.word	0x00050105

08000b70 <TIM1_BRK_TIM15_IRQHandler>:


uint32_t counting_time = 0;


void TIM1_BRK_TIM15_IRQHandler(void){
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
	TIM15->SR &= ~(0x0001);
 8000b74:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 8000b76:	691b      	ldr	r3, [r3, #16]
 8000b78:	4a06      	ldr	r2, [pc, #24]	; (8000b94 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 8000b7a:	f023 0301 	bic.w	r3, r3, #1
 8000b7e:	6113      	str	r3, [r2, #16]
	counting_time++;
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <TIM1_BRK_TIM15_IRQHandler+0x28>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	3301      	adds	r3, #1
 8000b86:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <TIM1_BRK_TIM15_IRQHandler+0x28>)
 8000b88:	6013      	str	r3, [r2, #0]
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	40014000 	.word	0x40014000
 8000b98:	200001a8 	.word	0x200001a8

08000b9c <main>:




int main(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
	// Setup communication with the PC
	uart_init(115200);
 8000ba2:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8000ba6:	f7ff fec9 	bl	800093c <uart_init>


	setup();
 8000baa:	f000 f899 	bl	8000ce0 <setup>


	timesetup();
 8000bae:	f000 facf 	bl	8001150 <timesetup>


	char output = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	73fb      	strb	r3, [r7, #15]
	char temp = 1;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	75fb      	strb	r3, [r7, #23]

	int time = counting_time;
 8000bba:	4b2c      	ldr	r3, [pc, #176]	; (8000c6c <main+0xd0>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	60bb      	str	r3, [r7, #8]
	int time_saved;


	while (1) {

		char output = readJoystick();
 8000bc0:	f000 f85e 	bl	8000c80 <readJoystick>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	71fb      	strb	r3, [r7, #7]


		if(output && output != temp){
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d0f8      	beq.n	8000bc0 <main+0x24>
 8000bce:	79fa      	ldrb	r2, [r7, #7]
 8000bd0:	7dfb      	ldrb	r3, [r7, #23]
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d0f4      	beq.n	8000bc0 <main+0x24>
		int time = counting_time - time_saved;
 8000bd6:	4b25      	ldr	r3, [pc, #148]	; (8000c6c <main+0xd0>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	603b      	str	r3, [r7, #0]

		printf("current time %ld . %2d\n", counting_time/100 , counting_time%100 );
 8000be0:	4b22      	ldr	r3, [pc, #136]	; (8000c6c <main+0xd0>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a22      	ldr	r2, [pc, #136]	; (8000c70 <main+0xd4>)
 8000be6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bea:	0959      	lsrs	r1, r3, #5
 8000bec:	4b1f      	ldr	r3, [pc, #124]	; (8000c6c <main+0xd0>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	4b1f      	ldr	r3, [pc, #124]	; (8000c70 <main+0xd4>)
 8000bf2:	fba3 0302 	umull	r0, r3, r3, r2
 8000bf6:	095b      	lsrs	r3, r3, #5
 8000bf8:	2064      	movs	r0, #100	; 0x64
 8000bfa:	fb00 f303 	mul.w	r3, r0, r3
 8000bfe:	1ad3      	subs	r3, r2, r3
 8000c00:	461a      	mov	r2, r3
 8000c02:	481c      	ldr	r0, [pc, #112]	; (8000c74 <main+0xd8>)
 8000c04:	f000 fbc4 	bl	8001390 <iprintf>

		printf("time saved %ld . %2d\n", time_saved/100 , time_saved%100 );
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	4a19      	ldr	r2, [pc, #100]	; (8000c70 <main+0xd4>)
 8000c0c:	fb82 1203 	smull	r1, r2, r2, r3
 8000c10:	1152      	asrs	r2, r2, #5
 8000c12:	17db      	asrs	r3, r3, #31
 8000c14:	1ad0      	subs	r0, r2, r3
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	4a15      	ldr	r2, [pc, #84]	; (8000c70 <main+0xd4>)
 8000c1a:	fb82 1203 	smull	r1, r2, r2, r3
 8000c1e:	1151      	asrs	r1, r2, #5
 8000c20:	17da      	asrs	r2, r3, #31
 8000c22:	1a8a      	subs	r2, r1, r2
 8000c24:	2164      	movs	r1, #100	; 0x64
 8000c26:	fb01 f202 	mul.w	r2, r1, r2
 8000c2a:	1a9a      	subs	r2, r3, r2
 8000c2c:	4601      	mov	r1, r0
 8000c2e:	4812      	ldr	r0, [pc, #72]	; (8000c78 <main+0xdc>)
 8000c30:	f000 fbae 	bl	8001390 <iprintf>

		printf("difference is %ld . %2d\n",time/100, time%100  );
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	4a0e      	ldr	r2, [pc, #56]	; (8000c70 <main+0xd4>)
 8000c38:	fb82 1203 	smull	r1, r2, r2, r3
 8000c3c:	1152      	asrs	r2, r2, #5
 8000c3e:	17db      	asrs	r3, r3, #31
 8000c40:	1ad0      	subs	r0, r2, r3
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <main+0xd4>)
 8000c46:	fb82 1203 	smull	r1, r2, r2, r3
 8000c4a:	1151      	asrs	r1, r2, #5
 8000c4c:	17da      	asrs	r2, r3, #31
 8000c4e:	1a8a      	subs	r2, r1, r2
 8000c50:	2164      	movs	r1, #100	; 0x64
 8000c52:	fb01 f202 	mul.w	r2, r1, r2
 8000c56:	1a9a      	subs	r2, r3, r2
 8000c58:	4601      	mov	r1, r0
 8000c5a:	4808      	ldr	r0, [pc, #32]	; (8000c7c <main+0xe0>)
 8000c5c:	f000 fb98 	bl	8001390 <iprintf>
		temp = output;
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	75fb      	strb	r3, [r7, #23]
		time_saved = counting_time;
 8000c64:	4b01      	ldr	r3, [pc, #4]	; (8000c6c <main+0xd0>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	613b      	str	r3, [r7, #16]
	while (1) {
 8000c6a:	e7a9      	b.n	8000bc0 <main+0x24>
 8000c6c:	200001a8 	.word	0x200001a8
 8000c70:	51eb851f 	.word	0x51eb851f
 8000c74:	080021ec 	.word	0x080021ec
 8000c78:	08002204 	.word	0x08002204
 8000c7c:	0800221c 	.word	0x0800221c

08000c80 <readJoystick>:
 */

#include "project5.h"
#include "stm32f30x.h"

char readJoystick(){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
		char up = readgpioA4() >> 1;
 8000c86:	f000 f8ab 	bl	8000de0 <readgpioA4>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	105b      	asrs	r3, r3, #1
 8000c8e:	71fb      	strb	r3, [r7, #7]
		char down = readgpioB0() << 1;
 8000c90:	f000 f8b8 	bl	8000e04 <readgpioB0>
 8000c94:	4603      	mov	r3, r0
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	71bb      	strb	r3, [r7, #6]
		char left = readgpioC1() << 1;
 8000c9c:	f000 f8da 	bl	8000e54 <readgpioC1>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	717b      	strb	r3, [r7, #5]
		char right = readgpioC0();
 8000ca8:	f000 f8c0 	bl	8000e2c <readgpioC0>
 8000cac:	4603      	mov	r3, r0
 8000cae:	713b      	strb	r3, [r7, #4]
		char center = readgpioB5() >> 1;
 8000cb0:	f000 f8e4 	bl	8000e7c <readgpioB5>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	105b      	asrs	r3, r3, #1
 8000cb8:	70fb      	strb	r3, [r7, #3]

		char output = up | down | left | right | center;
 8000cba:	79fa      	ldrb	r2, [r7, #7]
 8000cbc:	79bb      	ldrb	r3, [r7, #6]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	797b      	ldrb	r3, [r7, #5]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	793b      	ldrb	r3, [r7, #4]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	78fb      	ldrb	r3, [r7, #3]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	70bb      	strb	r3, [r7, #2]
		return output;
 8000cd4:	78bb      	ldrb	r3, [r7, #2]
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <setup>:
	GPIOB->MODER &= ~(0x00000003 << (pin * 2)); // Clear mode register
	GPIOB->MODER |= (0x00000001 << (pin * 2)); // Set mode register (0x00 –Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)

}

int setup(){
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0

	RCC->AHBENR |= RCC_AHBPeriph_GPIOA; // Enable clock for GPIO Port A
 8000ce4:	4b3b      	ldr	r3, [pc, #236]	; (8000dd4 <setup+0xf4>)
 8000ce6:	695b      	ldr	r3, [r3, #20]
 8000ce8:	4a3a      	ldr	r2, [pc, #232]	; (8000dd4 <setup+0xf4>)
 8000cea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cee:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBPeriph_GPIOB; // Enable clock for GPIO Port B
 8000cf0:	4b38      	ldr	r3, [pc, #224]	; (8000dd4 <setup+0xf4>)
 8000cf2:	695b      	ldr	r3, [r3, #20]
 8000cf4:	4a37      	ldr	r2, [pc, #220]	; (8000dd4 <setup+0xf4>)
 8000cf6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cfa:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBPeriph_GPIOC; // Enable clock for GPIO Port C
 8000cfc:	4b35      	ldr	r3, [pc, #212]	; (8000dd4 <setup+0xf4>)
 8000cfe:	695b      	ldr	r3, [r3, #20]
 8000d00:	4a34      	ldr	r2, [pc, #208]	; (8000dd4 <setup+0xf4>)
 8000d02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d06:	6153      	str	r3, [r2, #20]




	// Set pin PA4 to input
	GPIOA->MODER &= ~(0x00000003 << (4 * 2)); // Clear mode register
 8000d08:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d16:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x00000000 << (4 * 2)); // Set mode register (0x00 –Input, 0x01 - Output, 0x02	// Alternate Function, 0x03 - Analog in/out)
 8000d18:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d1c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(0x00000003 << (4 * 2)); // Clear push/pull register
 8000d24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d28:	68db      	ldr	r3, [r3, #12]
 8000d2a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d32:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (0x00000002 << (4 * 2)); // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8000d34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d38:	68db      	ldr	r3, [r3, #12]
 8000d3a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d42:	60d3      	str	r3, [r2, #12]
	// Set pin PB0 to input
	GPIOB->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 8000d44:	4b24      	ldr	r3, [pc, #144]	; (8000dd8 <setup+0xf8>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a23      	ldr	r2, [pc, #140]	; (8000dd8 <setup+0xf8>)
 8000d4a:	f023 0303 	bic.w	r3, r3, #3
 8000d4e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0x00000000 << (0 * 2)); // Set mode register (0x00 –Input, 0x01 - Output, 0x02	// Alternate Function, 0x03 - Analog in/out)
 8000d50:	4b21      	ldr	r3, [pc, #132]	; (8000dd8 <setup+0xf8>)
 8000d52:	4a21      	ldr	r2, [pc, #132]	; (8000dd8 <setup+0xf8>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	6013      	str	r3, [r2, #0]
	GPIOB->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 8000d58:	4b1f      	ldr	r3, [pc, #124]	; (8000dd8 <setup+0xf8>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	4a1e      	ldr	r2, [pc, #120]	; (8000dd8 <setup+0xf8>)
 8000d5e:	f023 0303 	bic.w	r3, r3, #3
 8000d62:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (0x00000002 << (0 * 2)); // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8000d64:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <setup+0xf8>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	4a1b      	ldr	r2, [pc, #108]	; (8000dd8 <setup+0xf8>)
 8000d6a:	f043 0302 	orr.w	r3, r3, #2
 8000d6e:	60d3      	str	r3, [r2, #12]


	// Set pin PC1 and PC0 to input
	GPIOC->MODER &= ~(0x0000000f << (0 * 2)); // Clear mode register for the first 4 bit
 8000d70:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <setup+0xfc>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a19      	ldr	r2, [pc, #100]	; (8000ddc <setup+0xfc>)
 8000d76:	f023 030f 	bic.w	r3, r3, #15
 8000d7a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0x00000000 << (0 * 2)); // Set mode register
 8000d7c:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <setup+0xfc>)
 8000d7e:	4a17      	ldr	r2, [pc, #92]	; (8000ddc <setup+0xfc>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	6013      	str	r3, [r2, #0]
	//(0x00 –Input, 0x01 - Output, 0x02	// Alternate Function, 0x03 - Analog in/out)
	GPIOC->PUPDR &= ~(0x0000000f << (0 * 2)); // Clear push/pull register
 8000d84:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <setup+0xfc>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	4a14      	ldr	r2, [pc, #80]	; (8000ddc <setup+0xfc>)
 8000d8a:	f023 030f 	bic.w	r3, r3, #15
 8000d8e:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |= (0x0000000c << (0 * 2)); // Set push/pull register
 8000d90:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <setup+0xfc>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	4a11      	ldr	r2, [pc, #68]	; (8000ddc <setup+0xfc>)
 8000d96:	f043 030c 	orr.w	r3, r3, #12
 8000d9a:	60d3      	str	r3, [r2, #12]
	//(0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)


	// Set pin PB5 to input
	GPIOB->MODER &= ~(0x00000003 << (5 * 2)); // Clear mode register
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <setup+0xf8>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0d      	ldr	r2, [pc, #52]	; (8000dd8 <setup+0xf8>)
 8000da2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000da6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0x00000000 << (5 * 2)); // Set mode register (0x00 –Input, 0x01 - Output, 0x02	// Alternate Function, 0x03 - Analog in/out)
 8000da8:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <setup+0xf8>)
 8000daa:	4a0b      	ldr	r2, [pc, #44]	; (8000dd8 <setup+0xf8>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	6013      	str	r3, [r2, #0]
	GPIOB->PUPDR &= ~(0x00000003 << (5 * 2)); // Clear push/pull register
 8000db0:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <setup+0xf8>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	4a08      	ldr	r2, [pc, #32]	; (8000dd8 <setup+0xf8>)
 8000db6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000dba:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (0x00000002 << (5 * 2)); // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <setup+0xf8>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <setup+0xf8>)
 8000dc2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dc6:	60d3      	str	r3, [r2, #12]
	GPIOA->OTYPER |= (0x0000 << (1)); // Set output type register (0x00 -Push pull, 0x01 - Open drain)
	GPIOA->MODER &= ~(0x00000003 << (1 * 2)); // Clear mode register
	GPIOA->MODER |= (0x00000001 << (1 * 2)); // Set mode register (0x00 –Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
	GPIOA->ODR |= (0x0001 << 1); //Set pin PA1 to high
*/
return 0;
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	48000400 	.word	0x48000400
 8000ddc:	48000800 	.word	0x48000800

08000de0 <readgpioA4>:





int readgpioA4(){
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0

	char val = GPIOA->IDR & (0x0001 << 4); //Read from pin PA4
 8000de6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000dea:	8a1b      	ldrh	r3, [r3, #16]
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	f003 0310 	and.w	r3, r3, #16
 8000df4:	71fb      	strb	r3, [r7, #7]

	return val;
 8000df6:	79fb      	ldrb	r3, [r7, #7]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <readgpioB0>:
int readgpioB0(){
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0

	char val = GPIOB->IDR & (0x0001 << 0); //Read from pin PB0
 8000e0a:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <readgpioB0+0x24>)
 8000e0c:	8a1b      	ldrh	r3, [r3, #16]
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	71fb      	strb	r3, [r7, #7]

	return val;
 8000e18:	79fb      	ldrb	r3, [r7, #7]
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	48000400 	.word	0x48000400

08000e2c <readgpioC0>:
// Set pin PB5 to input

int readgpioC0(){
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0

	char val = GPIOC->IDR & (0x0001 << 0); //Read from pin PB0
 8000e32:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <readgpioC0+0x24>)
 8000e34:	8a1b      	ldrh	r3, [r3, #16]
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	71fb      	strb	r3, [r7, #7]

	return val;
 8000e40:	79fb      	ldrb	r3, [r7, #7]
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	48000800 	.word	0x48000800

08000e54 <readgpioC1>:
int readgpioC1(){
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0

	char val = GPIOC->IDR & (0x0001 << 1); //Read from pin PB0
 8000e5a:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <readgpioC1+0x24>)
 8000e5c:	8a1b      	ldrh	r3, [r3, #16]
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	f003 0302 	and.w	r3, r3, #2
 8000e66:	71fb      	strb	r3, [r7, #7]

	return val;
 8000e68:	79fb      	ldrb	r3, [r7, #7]
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	48000800 	.word	0x48000800

08000e7c <readgpioB5>:

int readgpioB5(){
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0

	char val = GPIOB->IDR & (0x0001 << 5); //Read from pin PB0
 8000e82:	4b07      	ldr	r3, [pc, #28]	; (8000ea0 <readgpioB5+0x24>)
 8000e84:	8a1b      	ldrh	r3, [r3, #16]
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	f003 0320 	and.w	r3, r3, #32
 8000e8e:	71fb      	strb	r3, [r7, #7]

	return val;
 8000e90:	79fb      	ldrb	r3, [r7, #7]
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	48000400 	.word	0x48000400

08000ea4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]
 8000eb4:	e00a      	b.n	8000ecc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000eb6:	f3af 8000 	nop.w
 8000eba:	4601      	mov	r1, r0
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	1c5a      	adds	r2, r3, #1
 8000ec0:	60ba      	str	r2, [r7, #8]
 8000ec2:	b2ca      	uxtb	r2, r1
 8000ec4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	617b      	str	r3, [r7, #20]
 8000ecc:	697a      	ldr	r2, [r7, #20]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	dbf0      	blt.n	8000eb6 <_read+0x12>
	}

return len;
 8000ed4:	687b      	ldr	r3, [r7, #4]
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3718      	adds	r7, #24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <_close>:
	}
	return len;
}

int _close(int file)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b083      	sub	sp, #12
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
	return -1;
 8000ee6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b083      	sub	sp, #12
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
 8000efe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f06:	605a      	str	r2, [r3, #4]
	return 0;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <_isatty>:

int _isatty(int file)
{
 8000f16:	b480      	push	{r7}
 8000f18:	b083      	sub	sp, #12
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
	return 1;
 8000f1e:	2301      	movs	r3, #1
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
	return 0;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
	...

08000f48 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000f50:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <_sbrk+0x50>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d102      	bne.n	8000f5e <_sbrk+0x16>
		heap_end = &end;
 8000f58:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <_sbrk+0x50>)
 8000f5a:	4a10      	ldr	r2, [pc, #64]	; (8000f9c <_sbrk+0x54>)
 8000f5c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <_sbrk+0x50>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <_sbrk+0x50>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	466a      	mov	r2, sp
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d907      	bls.n	8000f82 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000f72:	f000 fb55 	bl	8001620 <__errno>
 8000f76:	4603      	mov	r3, r0
 8000f78:	220c      	movs	r2, #12
 8000f7a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000f7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f80:	e006      	b.n	8000f90 <_sbrk+0x48>
	}

	heap_end += incr;
 8000f82:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <_sbrk+0x50>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	4a03      	ldr	r2, [pc, #12]	; (8000f98 <_sbrk+0x50>)
 8000f8c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	200001ac 	.word	0x200001ac
 8000f9c:	20000300 	.word	0x20000300

08000fa0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fa4:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <SystemInit+0x84>)
 8000fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000faa:	4a1e      	ldr	r2, [pc, #120]	; (8001024 <SystemInit+0x84>)
 8000fac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000fb4:	4b1c      	ldr	r3, [pc, #112]	; (8001028 <SystemInit+0x88>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a1b      	ldr	r2, [pc, #108]	; (8001028 <SystemInit+0x88>)
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8000fc0:	4b19      	ldr	r3, [pc, #100]	; (8001028 <SystemInit+0x88>)
 8000fc2:	685a      	ldr	r2, [r3, #4]
 8000fc4:	4918      	ldr	r1, [pc, #96]	; (8001028 <SystemInit+0x88>)
 8000fc6:	4b19      	ldr	r3, [pc, #100]	; (800102c <SystemInit+0x8c>)
 8000fc8:	4013      	ands	r3, r2
 8000fca:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000fcc:	4b16      	ldr	r3, [pc, #88]	; (8001028 <SystemInit+0x88>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a15      	ldr	r2, [pc, #84]	; (8001028 <SystemInit+0x88>)
 8000fd2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fda:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000fdc:	4b12      	ldr	r3, [pc, #72]	; (8001028 <SystemInit+0x88>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a11      	ldr	r2, [pc, #68]	; (8001028 <SystemInit+0x88>)
 8000fe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fe6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <SystemInit+0x88>)
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	4a0e      	ldr	r2, [pc, #56]	; (8001028 <SystemInit+0x88>)
 8000fee:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000ff2:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <SystemInit+0x88>)
 8000ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff8:	4a0b      	ldr	r2, [pc, #44]	; (8001028 <SystemInit+0x88>)
 8000ffa:	f023 030f 	bic.w	r3, r3, #15
 8000ffe:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8001000:	4b09      	ldr	r3, [pc, #36]	; (8001028 <SystemInit+0x88>)
 8001002:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001004:	4908      	ldr	r1, [pc, #32]	; (8001028 <SystemInit+0x88>)
 8001006:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <SystemInit+0x90>)
 8001008:	4013      	ands	r3, r2
 800100a:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <SystemInit+0x88>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001012:	f000 f80f 	bl	8001034 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001016:	4b03      	ldr	r3, [pc, #12]	; (8001024 <SystemInit+0x84>)
 8001018:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800101c:	609a      	str	r2, [r3, #8]
#endif  
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	e000ed00 	.word	0xe000ed00
 8001028:	40021000 	.word	0x40021000
 800102c:	f87fc00c 	.word	0xf87fc00c
 8001030:	ff00fccc 	.word	0xff00fccc

08001034 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 8001038:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <SetSysClock+0x8c>)
 800103a:	2212      	movs	r2, #18
 800103c:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800103e:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <SetSysClock+0x90>)
 8001040:	4a20      	ldr	r2, [pc, #128]	; (80010c4 <SetSysClock+0x90>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001046:	4b1f      	ldr	r3, [pc, #124]	; (80010c4 <SetSysClock+0x90>)
 8001048:	4a1e      	ldr	r2, [pc, #120]	; (80010c4 <SetSysClock+0x90>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800104e:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <SetSysClock+0x90>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	4a1c      	ldr	r2, [pc, #112]	; (80010c4 <SetSysClock+0x90>)
 8001054:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001058:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 800105a:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <SetSysClock+0x90>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	4a19      	ldr	r2, [pc, #100]	; (80010c4 <SetSysClock+0x90>)
 8001060:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001064:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 8001066:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <SetSysClock+0x90>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	4a16      	ldr	r2, [pc, #88]	; (80010c4 <SetSysClock+0x90>)
 800106c:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8001070:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8001072:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <SetSysClock+0x90>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a13      	ldr	r2, [pc, #76]	; (80010c4 <SetSysClock+0x90>)
 8001078:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800107c:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800107e:	bf00      	nop
 8001080:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <SetSysClock+0x90>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d0f9      	beq.n	8001080 <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800108c:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <SetSysClock+0x90>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	4a0c      	ldr	r2, [pc, #48]	; (80010c4 <SetSysClock+0x90>)
 8001092:	f023 0303 	bic.w	r3, r3, #3
 8001096:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8001098:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <SetSysClock+0x90>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	4a09      	ldr	r2, [pc, #36]	; (80010c4 <SetSysClock+0x90>)
 800109e:	f043 0302 	orr.w	r3, r3, #2
 80010a2:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80010a4:	bf00      	nop
 80010a6:	4b07      	ldr	r3, [pc, #28]	; (80010c4 <SetSysClock+0x90>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f003 030c 	and.w	r3, r3, #12
 80010ae:	2b08      	cmp	r3, #8
 80010b0:	d1f9      	bne.n	80010a6 <SetSysClock+0x72>
  {
  }
}
 80010b2:	bf00      	nop
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	40022000 	.word	0x40022000
 80010c4:	40021000 	.word	0x40021000

080010c8 <NVIC_EnableIRQ>:
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	f003 031f 	and.w	r3, r3, #31
 80010d8:	2201      	movs	r2, #1
 80010da:	fa02 f103 	lsl.w	r1, r2, r3
 80010de:	4a06      	ldr	r2, [pc, #24]	; (80010f8 <NVIC_EnableIRQ+0x30>)
 80010e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e4:	095b      	lsrs	r3, r3, #5
 80010e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	e000e100 	.word	0xe000e100

080010fc <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	6039      	str	r1, [r7, #0]
 8001106:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8001108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110c:	2b00      	cmp	r3, #0
 800110e:	da0b      	bge.n	8001128 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	b2da      	uxtb	r2, r3
 8001114:	490c      	ldr	r1, [pc, #48]	; (8001148 <NVIC_SetPriority+0x4c>)
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	f003 030f 	and.w	r3, r3, #15
 800111c:	3b04      	subs	r3, #4
 800111e:	0112      	lsls	r2, r2, #4
 8001120:	b2d2      	uxtb	r2, r2
 8001122:	440b      	add	r3, r1
 8001124:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8001126:	e009      	b.n	800113c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	b2da      	uxtb	r2, r3
 800112c:	4907      	ldr	r1, [pc, #28]	; (800114c <NVIC_SetPriority+0x50>)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	0112      	lsls	r2, r2, #4
 8001134:	b2d2      	uxtb	r2, r2
 8001136:	440b      	add	r3, r1
 8001138:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	e000ed00 	.word	0xe000ed00
 800114c:	e000e100 	.word	0xe000e100

08001150 <timesetup>:
#include "stm32f30x.h"




void timesetup(){
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0

	RCC->APB2ENR |= RCC_APB2Periph_TIM15;
 8001154:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <timesetup+0x60>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	4a15      	ldr	r2, [pc, #84]	; (80011b0 <timesetup+0x60>)
 800115a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800115e:	6193      	str	r3, [r2, #24]
	TIM15->CR1 = TIM15->CR1 & ~(0x001); 	// turn off timer
 8001160:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <timesetup+0x64>)
 8001162:	881b      	ldrh	r3, [r3, #0]
 8001164:	b29b      	uxth	r3, r3
 8001166:	4a13      	ldr	r2, [pc, #76]	; (80011b4 <timesetup+0x64>)
 8001168:	f023 0301 	bic.w	r3, r3, #1
 800116c:	b29b      	uxth	r3, r3
 800116e:	8013      	strh	r3, [r2, #0]

	TIM15->ARR = 999; 	// Set reload value
 8001170:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <timesetup+0x64>)
 8001172:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001176:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM15->PSC = 639; 	// Set prescale value
 8001178:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <timesetup+0x64>)
 800117a:	f240 227f 	movw	r2, #639	; 0x27f
 800117e:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM15->DIER |= 0x0001; // enable timer 15's interrutps
 8001180:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <timesetup+0x64>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	4a0b      	ldr	r2, [pc, #44]	; (80011b4 <timesetup+0x64>)
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	60d3      	str	r3, [r2, #12]


	TIM15->CR1 = TIM15->CR1 | (0x001); 	// turn on timer
 800118c:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <timesetup+0x64>)
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	b29b      	uxth	r3, r3
 8001192:	4a08      	ldr	r2, [pc, #32]	; (80011b4 <timesetup+0x64>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	b29b      	uxth	r3, r3
 800119a:	8013      	strh	r3, [r2, #0]

	NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5);
 800119c:	2105      	movs	r1, #5
 800119e:	2018      	movs	r0, #24
 80011a0:	f7ff ffac 	bl	80010fc <NVIC_SetPriority>
	NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80011a4:	2018      	movs	r0, #24
 80011a6:	f7ff ff8f 	bl	80010c8 <NVIC_EnableIRQ>

}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40021000 	.word	0x40021000
 80011b4:	40014000 	.word	0x40014000

080011b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011b8:	480d      	ldr	r0, [pc, #52]	; (80011f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011ba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011bc:	480d      	ldr	r0, [pc, #52]	; (80011f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80011be:	490e      	ldr	r1, [pc, #56]	; (80011f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011c0:	4a0e      	ldr	r2, [pc, #56]	; (80011fc <LoopForever+0xe>)
  movs r3, #0
 80011c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c4:	e002      	b.n	80011cc <LoopCopyDataInit>

080011c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ca:	3304      	adds	r3, #4

080011cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d0:	d3f9      	bcc.n	80011c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d2:	4a0b      	ldr	r2, [pc, #44]	; (8001200 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011d4:	4c0b      	ldr	r4, [pc, #44]	; (8001204 <LoopForever+0x16>)
  movs r3, #0
 80011d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d8:	e001      	b.n	80011de <LoopFillZerobss>

080011da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011dc:	3204      	adds	r2, #4

080011de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e0:	d3fb      	bcc.n	80011da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80011e2:	f7ff fedd 	bl	8000fa0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80011e6:	f000 fa21 	bl	800162c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011ea:	f7ff fcd7 	bl	8000b9c <main>

080011ee <LoopForever>:

LoopForever:
    b LoopForever
 80011ee:	e7fe      	b.n	80011ee <LoopForever>
  ldr   r0, =_estack
 80011f0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80011f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f8:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80011fc:	08002270 	.word	0x08002270
  ldr r2, =_sbss
 8001200:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001204:	200002fc 	.word	0x200002fc

08001208 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001208:	e7fe      	b.n	8001208 <ADC1_2_IRQHandler>
	...

0800120c <std>:
 800120c:	2300      	movs	r3, #0
 800120e:	b510      	push	{r4, lr}
 8001210:	4604      	mov	r4, r0
 8001212:	e9c0 3300 	strd	r3, r3, [r0]
 8001216:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800121a:	6083      	str	r3, [r0, #8]
 800121c:	8181      	strh	r1, [r0, #12]
 800121e:	6643      	str	r3, [r0, #100]	; 0x64
 8001220:	81c2      	strh	r2, [r0, #14]
 8001222:	6183      	str	r3, [r0, #24]
 8001224:	4619      	mov	r1, r3
 8001226:	2208      	movs	r2, #8
 8001228:	305c      	adds	r0, #92	; 0x5c
 800122a:	f000 f9bc 	bl	80015a6 <memset>
 800122e:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <std+0x58>)
 8001230:	6263      	str	r3, [r4, #36]	; 0x24
 8001232:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <std+0x5c>)
 8001234:	62a3      	str	r3, [r4, #40]	; 0x28
 8001236:	4b0d      	ldr	r3, [pc, #52]	; (800126c <std+0x60>)
 8001238:	62e3      	str	r3, [r4, #44]	; 0x2c
 800123a:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <std+0x64>)
 800123c:	6323      	str	r3, [r4, #48]	; 0x30
 800123e:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <std+0x68>)
 8001240:	6224      	str	r4, [r4, #32]
 8001242:	429c      	cmp	r4, r3
 8001244:	d006      	beq.n	8001254 <std+0x48>
 8001246:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800124a:	4294      	cmp	r4, r2
 800124c:	d002      	beq.n	8001254 <std+0x48>
 800124e:	33d0      	adds	r3, #208	; 0xd0
 8001250:	429c      	cmp	r4, r3
 8001252:	d105      	bne.n	8001260 <std+0x54>
 8001254:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800125c:	f000 ba0a 	b.w	8001674 <__retarget_lock_init_recursive>
 8001260:	bd10      	pop	{r4, pc}
 8001262:	bf00      	nop
 8001264:	08001521 	.word	0x08001521
 8001268:	08001543 	.word	0x08001543
 800126c:	0800157b 	.word	0x0800157b
 8001270:	0800159f 	.word	0x0800159f
 8001274:	200001b0 	.word	0x200001b0

08001278 <stdio_exit_handler>:
 8001278:	4a02      	ldr	r2, [pc, #8]	; (8001284 <stdio_exit_handler+0xc>)
 800127a:	4903      	ldr	r1, [pc, #12]	; (8001288 <stdio_exit_handler+0x10>)
 800127c:	4803      	ldr	r0, [pc, #12]	; (800128c <stdio_exit_handler+0x14>)
 800127e:	f000 b869 	b.w	8001354 <_fwalk_sglue>
 8001282:	bf00      	nop
 8001284:	2000002c 	.word	0x2000002c
 8001288:	08001f31 	.word	0x08001f31
 800128c:	20000038 	.word	0x20000038

08001290 <cleanup_stdio>:
 8001290:	6841      	ldr	r1, [r0, #4]
 8001292:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <cleanup_stdio+0x34>)
 8001294:	4299      	cmp	r1, r3
 8001296:	b510      	push	{r4, lr}
 8001298:	4604      	mov	r4, r0
 800129a:	d001      	beq.n	80012a0 <cleanup_stdio+0x10>
 800129c:	f000 fe48 	bl	8001f30 <_fflush_r>
 80012a0:	68a1      	ldr	r1, [r4, #8]
 80012a2:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <cleanup_stdio+0x38>)
 80012a4:	4299      	cmp	r1, r3
 80012a6:	d002      	beq.n	80012ae <cleanup_stdio+0x1e>
 80012a8:	4620      	mov	r0, r4
 80012aa:	f000 fe41 	bl	8001f30 <_fflush_r>
 80012ae:	68e1      	ldr	r1, [r4, #12]
 80012b0:	4b06      	ldr	r3, [pc, #24]	; (80012cc <cleanup_stdio+0x3c>)
 80012b2:	4299      	cmp	r1, r3
 80012b4:	d004      	beq.n	80012c0 <cleanup_stdio+0x30>
 80012b6:	4620      	mov	r0, r4
 80012b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80012bc:	f000 be38 	b.w	8001f30 <_fflush_r>
 80012c0:	bd10      	pop	{r4, pc}
 80012c2:	bf00      	nop
 80012c4:	200001b0 	.word	0x200001b0
 80012c8:	20000218 	.word	0x20000218
 80012cc:	20000280 	.word	0x20000280

080012d0 <global_stdio_init.part.0>:
 80012d0:	b510      	push	{r4, lr}
 80012d2:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <global_stdio_init.part.0+0x30>)
 80012d4:	4c0b      	ldr	r4, [pc, #44]	; (8001304 <global_stdio_init.part.0+0x34>)
 80012d6:	4a0c      	ldr	r2, [pc, #48]	; (8001308 <global_stdio_init.part.0+0x38>)
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	4620      	mov	r0, r4
 80012dc:	2200      	movs	r2, #0
 80012de:	2104      	movs	r1, #4
 80012e0:	f7ff ff94 	bl	800120c <std>
 80012e4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80012e8:	2201      	movs	r2, #1
 80012ea:	2109      	movs	r1, #9
 80012ec:	f7ff ff8e 	bl	800120c <std>
 80012f0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80012f4:	2202      	movs	r2, #2
 80012f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80012fa:	2112      	movs	r1, #18
 80012fc:	f7ff bf86 	b.w	800120c <std>
 8001300:	200002e8 	.word	0x200002e8
 8001304:	200001b0 	.word	0x200001b0
 8001308:	08001279 	.word	0x08001279

0800130c <__sfp_lock_acquire>:
 800130c:	4801      	ldr	r0, [pc, #4]	; (8001314 <__sfp_lock_acquire+0x8>)
 800130e:	f000 b9b2 	b.w	8001676 <__retarget_lock_acquire_recursive>
 8001312:	bf00      	nop
 8001314:	200002f1 	.word	0x200002f1

08001318 <__sfp_lock_release>:
 8001318:	4801      	ldr	r0, [pc, #4]	; (8001320 <__sfp_lock_release+0x8>)
 800131a:	f000 b9ad 	b.w	8001678 <__retarget_lock_release_recursive>
 800131e:	bf00      	nop
 8001320:	200002f1 	.word	0x200002f1

08001324 <__sinit>:
 8001324:	b510      	push	{r4, lr}
 8001326:	4604      	mov	r4, r0
 8001328:	f7ff fff0 	bl	800130c <__sfp_lock_acquire>
 800132c:	6a23      	ldr	r3, [r4, #32]
 800132e:	b11b      	cbz	r3, 8001338 <__sinit+0x14>
 8001330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001334:	f7ff bff0 	b.w	8001318 <__sfp_lock_release>
 8001338:	4b04      	ldr	r3, [pc, #16]	; (800134c <__sinit+0x28>)
 800133a:	6223      	str	r3, [r4, #32]
 800133c:	4b04      	ldr	r3, [pc, #16]	; (8001350 <__sinit+0x2c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1f5      	bne.n	8001330 <__sinit+0xc>
 8001344:	f7ff ffc4 	bl	80012d0 <global_stdio_init.part.0>
 8001348:	e7f2      	b.n	8001330 <__sinit+0xc>
 800134a:	bf00      	nop
 800134c:	08001291 	.word	0x08001291
 8001350:	200002e8 	.word	0x200002e8

08001354 <_fwalk_sglue>:
 8001354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001358:	4607      	mov	r7, r0
 800135a:	4688      	mov	r8, r1
 800135c:	4614      	mov	r4, r2
 800135e:	2600      	movs	r6, #0
 8001360:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001364:	f1b9 0901 	subs.w	r9, r9, #1
 8001368:	d505      	bpl.n	8001376 <_fwalk_sglue+0x22>
 800136a:	6824      	ldr	r4, [r4, #0]
 800136c:	2c00      	cmp	r4, #0
 800136e:	d1f7      	bne.n	8001360 <_fwalk_sglue+0xc>
 8001370:	4630      	mov	r0, r6
 8001372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001376:	89ab      	ldrh	r3, [r5, #12]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d907      	bls.n	800138c <_fwalk_sglue+0x38>
 800137c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001380:	3301      	adds	r3, #1
 8001382:	d003      	beq.n	800138c <_fwalk_sglue+0x38>
 8001384:	4629      	mov	r1, r5
 8001386:	4638      	mov	r0, r7
 8001388:	47c0      	blx	r8
 800138a:	4306      	orrs	r6, r0
 800138c:	3568      	adds	r5, #104	; 0x68
 800138e:	e7e9      	b.n	8001364 <_fwalk_sglue+0x10>

08001390 <iprintf>:
 8001390:	b40f      	push	{r0, r1, r2, r3}
 8001392:	b507      	push	{r0, r1, r2, lr}
 8001394:	4906      	ldr	r1, [pc, #24]	; (80013b0 <iprintf+0x20>)
 8001396:	ab04      	add	r3, sp, #16
 8001398:	6808      	ldr	r0, [r1, #0]
 800139a:	f853 2b04 	ldr.w	r2, [r3], #4
 800139e:	6881      	ldr	r1, [r0, #8]
 80013a0:	9301      	str	r3, [sp, #4]
 80013a2:	f000 fa95 	bl	80018d0 <_vfiprintf_r>
 80013a6:	b003      	add	sp, #12
 80013a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80013ac:	b004      	add	sp, #16
 80013ae:	4770      	bx	lr
 80013b0:	20000084 	.word	0x20000084

080013b4 <setbuf>:
 80013b4:	fab1 f281 	clz	r2, r1
 80013b8:	0952      	lsrs	r2, r2, #5
 80013ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013be:	0052      	lsls	r2, r2, #1
 80013c0:	f000 b800 	b.w	80013c4 <setvbuf>

080013c4 <setvbuf>:
 80013c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80013c8:	461d      	mov	r5, r3
 80013ca:	4b54      	ldr	r3, [pc, #336]	; (800151c <setvbuf+0x158>)
 80013cc:	681f      	ldr	r7, [r3, #0]
 80013ce:	4604      	mov	r4, r0
 80013d0:	460e      	mov	r6, r1
 80013d2:	4690      	mov	r8, r2
 80013d4:	b127      	cbz	r7, 80013e0 <setvbuf+0x1c>
 80013d6:	6a3b      	ldr	r3, [r7, #32]
 80013d8:	b913      	cbnz	r3, 80013e0 <setvbuf+0x1c>
 80013da:	4638      	mov	r0, r7
 80013dc:	f7ff ffa2 	bl	8001324 <__sinit>
 80013e0:	f1b8 0f02 	cmp.w	r8, #2
 80013e4:	d006      	beq.n	80013f4 <setvbuf+0x30>
 80013e6:	f1b8 0f01 	cmp.w	r8, #1
 80013ea:	f200 8094 	bhi.w	8001516 <setvbuf+0x152>
 80013ee:	2d00      	cmp	r5, #0
 80013f0:	f2c0 8091 	blt.w	8001516 <setvbuf+0x152>
 80013f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80013f6:	07da      	lsls	r2, r3, #31
 80013f8:	d405      	bmi.n	8001406 <setvbuf+0x42>
 80013fa:	89a3      	ldrh	r3, [r4, #12]
 80013fc:	059b      	lsls	r3, r3, #22
 80013fe:	d402      	bmi.n	8001406 <setvbuf+0x42>
 8001400:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001402:	f000 f938 	bl	8001676 <__retarget_lock_acquire_recursive>
 8001406:	4621      	mov	r1, r4
 8001408:	4638      	mov	r0, r7
 800140a:	f000 fd91 	bl	8001f30 <_fflush_r>
 800140e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001410:	b141      	cbz	r1, 8001424 <setvbuf+0x60>
 8001412:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001416:	4299      	cmp	r1, r3
 8001418:	d002      	beq.n	8001420 <setvbuf+0x5c>
 800141a:	4638      	mov	r0, r7
 800141c:	f000 f92e 	bl	800167c <_free_r>
 8001420:	2300      	movs	r3, #0
 8001422:	6363      	str	r3, [r4, #52]	; 0x34
 8001424:	2300      	movs	r3, #0
 8001426:	61a3      	str	r3, [r4, #24]
 8001428:	6063      	str	r3, [r4, #4]
 800142a:	89a3      	ldrh	r3, [r4, #12]
 800142c:	0618      	lsls	r0, r3, #24
 800142e:	d503      	bpl.n	8001438 <setvbuf+0x74>
 8001430:	6921      	ldr	r1, [r4, #16]
 8001432:	4638      	mov	r0, r7
 8001434:	f000 f922 	bl	800167c <_free_r>
 8001438:	89a3      	ldrh	r3, [r4, #12]
 800143a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800143e:	f023 0303 	bic.w	r3, r3, #3
 8001442:	f1b8 0f02 	cmp.w	r8, #2
 8001446:	81a3      	strh	r3, [r4, #12]
 8001448:	d05f      	beq.n	800150a <setvbuf+0x146>
 800144a:	ab01      	add	r3, sp, #4
 800144c:	466a      	mov	r2, sp
 800144e:	4621      	mov	r1, r4
 8001450:	4638      	mov	r0, r7
 8001452:	f000 fd95 	bl	8001f80 <__swhatbuf_r>
 8001456:	89a3      	ldrh	r3, [r4, #12]
 8001458:	4318      	orrs	r0, r3
 800145a:	81a0      	strh	r0, [r4, #12]
 800145c:	bb2d      	cbnz	r5, 80014aa <setvbuf+0xe6>
 800145e:	9d00      	ldr	r5, [sp, #0]
 8001460:	4628      	mov	r0, r5
 8001462:	f000 f957 	bl	8001714 <malloc>
 8001466:	4606      	mov	r6, r0
 8001468:	2800      	cmp	r0, #0
 800146a:	d150      	bne.n	800150e <setvbuf+0x14a>
 800146c:	f8dd 9000 	ldr.w	r9, [sp]
 8001470:	45a9      	cmp	r9, r5
 8001472:	d13e      	bne.n	80014f2 <setvbuf+0x12e>
 8001474:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001478:	2200      	movs	r2, #0
 800147a:	60a2      	str	r2, [r4, #8]
 800147c:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8001480:	6022      	str	r2, [r4, #0]
 8001482:	6122      	str	r2, [r4, #16]
 8001484:	2201      	movs	r2, #1
 8001486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800148a:	6162      	str	r2, [r4, #20]
 800148c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800148e:	f043 0302 	orr.w	r3, r3, #2
 8001492:	07d1      	lsls	r1, r2, #31
 8001494:	81a3      	strh	r3, [r4, #12]
 8001496:	d404      	bmi.n	80014a2 <setvbuf+0xde>
 8001498:	059b      	lsls	r3, r3, #22
 800149a:	d402      	bmi.n	80014a2 <setvbuf+0xde>
 800149c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800149e:	f000 f8eb 	bl	8001678 <__retarget_lock_release_recursive>
 80014a2:	4628      	mov	r0, r5
 80014a4:	b003      	add	sp, #12
 80014a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80014aa:	2e00      	cmp	r6, #0
 80014ac:	d0d8      	beq.n	8001460 <setvbuf+0x9c>
 80014ae:	6a3b      	ldr	r3, [r7, #32]
 80014b0:	b913      	cbnz	r3, 80014b8 <setvbuf+0xf4>
 80014b2:	4638      	mov	r0, r7
 80014b4:	f7ff ff36 	bl	8001324 <__sinit>
 80014b8:	f1b8 0f01 	cmp.w	r8, #1
 80014bc:	bf08      	it	eq
 80014be:	89a3      	ldrheq	r3, [r4, #12]
 80014c0:	6026      	str	r6, [r4, #0]
 80014c2:	bf04      	itt	eq
 80014c4:	f043 0301 	orreq.w	r3, r3, #1
 80014c8:	81a3      	strheq	r3, [r4, #12]
 80014ca:	89a3      	ldrh	r3, [r4, #12]
 80014cc:	f013 0208 	ands.w	r2, r3, #8
 80014d0:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80014d4:	d01d      	beq.n	8001512 <setvbuf+0x14e>
 80014d6:	07da      	lsls	r2, r3, #31
 80014d8:	bf41      	itttt	mi
 80014da:	2200      	movmi	r2, #0
 80014dc:	426d      	negmi	r5, r5
 80014de:	60a2      	strmi	r2, [r4, #8]
 80014e0:	61a5      	strmi	r5, [r4, #24]
 80014e2:	bf58      	it	pl
 80014e4:	60a5      	strpl	r5, [r4, #8]
 80014e6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80014e8:	f015 0501 	ands.w	r5, r5, #1
 80014ec:	d0d4      	beq.n	8001498 <setvbuf+0xd4>
 80014ee:	2500      	movs	r5, #0
 80014f0:	e7d7      	b.n	80014a2 <setvbuf+0xde>
 80014f2:	4648      	mov	r0, r9
 80014f4:	f000 f90e 	bl	8001714 <malloc>
 80014f8:	4606      	mov	r6, r0
 80014fa:	2800      	cmp	r0, #0
 80014fc:	d0ba      	beq.n	8001474 <setvbuf+0xb0>
 80014fe:	89a3      	ldrh	r3, [r4, #12]
 8001500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001504:	81a3      	strh	r3, [r4, #12]
 8001506:	464d      	mov	r5, r9
 8001508:	e7d1      	b.n	80014ae <setvbuf+0xea>
 800150a:	2500      	movs	r5, #0
 800150c:	e7b4      	b.n	8001478 <setvbuf+0xb4>
 800150e:	46a9      	mov	r9, r5
 8001510:	e7f5      	b.n	80014fe <setvbuf+0x13a>
 8001512:	60a2      	str	r2, [r4, #8]
 8001514:	e7e7      	b.n	80014e6 <setvbuf+0x122>
 8001516:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800151a:	e7c2      	b.n	80014a2 <setvbuf+0xde>
 800151c:	20000084 	.word	0x20000084

08001520 <__sread>:
 8001520:	b510      	push	{r4, lr}
 8001522:	460c      	mov	r4, r1
 8001524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001528:	f000 f868 	bl	80015fc <_read_r>
 800152c:	2800      	cmp	r0, #0
 800152e:	bfab      	itete	ge
 8001530:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001532:	89a3      	ldrhlt	r3, [r4, #12]
 8001534:	181b      	addge	r3, r3, r0
 8001536:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800153a:	bfac      	ite	ge
 800153c:	6563      	strge	r3, [r4, #84]	; 0x54
 800153e:	81a3      	strhlt	r3, [r4, #12]
 8001540:	bd10      	pop	{r4, pc}

08001542 <__swrite>:
 8001542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001546:	461f      	mov	r7, r3
 8001548:	898b      	ldrh	r3, [r1, #12]
 800154a:	05db      	lsls	r3, r3, #23
 800154c:	4605      	mov	r5, r0
 800154e:	460c      	mov	r4, r1
 8001550:	4616      	mov	r6, r2
 8001552:	d505      	bpl.n	8001560 <__swrite+0x1e>
 8001554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001558:	2302      	movs	r3, #2
 800155a:	2200      	movs	r2, #0
 800155c:	f000 f83c 	bl	80015d8 <_lseek_r>
 8001560:	89a3      	ldrh	r3, [r4, #12]
 8001562:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001566:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800156a:	81a3      	strh	r3, [r4, #12]
 800156c:	4632      	mov	r2, r6
 800156e:	463b      	mov	r3, r7
 8001570:	4628      	mov	r0, r5
 8001572:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001576:	f7ff b981 	b.w	800087c <_write_r>

0800157a <__sseek>:
 800157a:	b510      	push	{r4, lr}
 800157c:	460c      	mov	r4, r1
 800157e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001582:	f000 f829 	bl	80015d8 <_lseek_r>
 8001586:	1c43      	adds	r3, r0, #1
 8001588:	89a3      	ldrh	r3, [r4, #12]
 800158a:	bf15      	itete	ne
 800158c:	6560      	strne	r0, [r4, #84]	; 0x54
 800158e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001592:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001596:	81a3      	strheq	r3, [r4, #12]
 8001598:	bf18      	it	ne
 800159a:	81a3      	strhne	r3, [r4, #12]
 800159c:	bd10      	pop	{r4, pc}

0800159e <__sclose>:
 800159e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015a2:	f000 b809 	b.w	80015b8 <_close_r>

080015a6 <memset>:
 80015a6:	4402      	add	r2, r0
 80015a8:	4603      	mov	r3, r0
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d100      	bne.n	80015b0 <memset+0xa>
 80015ae:	4770      	bx	lr
 80015b0:	f803 1b01 	strb.w	r1, [r3], #1
 80015b4:	e7f9      	b.n	80015aa <memset+0x4>
	...

080015b8 <_close_r>:
 80015b8:	b538      	push	{r3, r4, r5, lr}
 80015ba:	4d06      	ldr	r5, [pc, #24]	; (80015d4 <_close_r+0x1c>)
 80015bc:	2300      	movs	r3, #0
 80015be:	4604      	mov	r4, r0
 80015c0:	4608      	mov	r0, r1
 80015c2:	602b      	str	r3, [r5, #0]
 80015c4:	f7ff fc8b 	bl	8000ede <_close>
 80015c8:	1c43      	adds	r3, r0, #1
 80015ca:	d102      	bne.n	80015d2 <_close_r+0x1a>
 80015cc:	682b      	ldr	r3, [r5, #0]
 80015ce:	b103      	cbz	r3, 80015d2 <_close_r+0x1a>
 80015d0:	6023      	str	r3, [r4, #0]
 80015d2:	bd38      	pop	{r3, r4, r5, pc}
 80015d4:	200002ec 	.word	0x200002ec

080015d8 <_lseek_r>:
 80015d8:	b538      	push	{r3, r4, r5, lr}
 80015da:	4d07      	ldr	r5, [pc, #28]	; (80015f8 <_lseek_r+0x20>)
 80015dc:	4604      	mov	r4, r0
 80015de:	4608      	mov	r0, r1
 80015e0:	4611      	mov	r1, r2
 80015e2:	2200      	movs	r2, #0
 80015e4:	602a      	str	r2, [r5, #0]
 80015e6:	461a      	mov	r2, r3
 80015e8:	f7ff fca0 	bl	8000f2c <_lseek>
 80015ec:	1c43      	adds	r3, r0, #1
 80015ee:	d102      	bne.n	80015f6 <_lseek_r+0x1e>
 80015f0:	682b      	ldr	r3, [r5, #0]
 80015f2:	b103      	cbz	r3, 80015f6 <_lseek_r+0x1e>
 80015f4:	6023      	str	r3, [r4, #0]
 80015f6:	bd38      	pop	{r3, r4, r5, pc}
 80015f8:	200002ec 	.word	0x200002ec

080015fc <_read_r>:
 80015fc:	b538      	push	{r3, r4, r5, lr}
 80015fe:	4d07      	ldr	r5, [pc, #28]	; (800161c <_read_r+0x20>)
 8001600:	4604      	mov	r4, r0
 8001602:	4608      	mov	r0, r1
 8001604:	4611      	mov	r1, r2
 8001606:	2200      	movs	r2, #0
 8001608:	602a      	str	r2, [r5, #0]
 800160a:	461a      	mov	r2, r3
 800160c:	f7ff fc4a 	bl	8000ea4 <_read>
 8001610:	1c43      	adds	r3, r0, #1
 8001612:	d102      	bne.n	800161a <_read_r+0x1e>
 8001614:	682b      	ldr	r3, [r5, #0]
 8001616:	b103      	cbz	r3, 800161a <_read_r+0x1e>
 8001618:	6023      	str	r3, [r4, #0]
 800161a:	bd38      	pop	{r3, r4, r5, pc}
 800161c:	200002ec 	.word	0x200002ec

08001620 <__errno>:
 8001620:	4b01      	ldr	r3, [pc, #4]	; (8001628 <__errno+0x8>)
 8001622:	6818      	ldr	r0, [r3, #0]
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	20000084 	.word	0x20000084

0800162c <__libc_init_array>:
 800162c:	b570      	push	{r4, r5, r6, lr}
 800162e:	4d0d      	ldr	r5, [pc, #52]	; (8001664 <__libc_init_array+0x38>)
 8001630:	4c0d      	ldr	r4, [pc, #52]	; (8001668 <__libc_init_array+0x3c>)
 8001632:	1b64      	subs	r4, r4, r5
 8001634:	10a4      	asrs	r4, r4, #2
 8001636:	2600      	movs	r6, #0
 8001638:	42a6      	cmp	r6, r4
 800163a:	d109      	bne.n	8001650 <__libc_init_array+0x24>
 800163c:	4d0b      	ldr	r5, [pc, #44]	; (800166c <__libc_init_array+0x40>)
 800163e:	4c0c      	ldr	r4, [pc, #48]	; (8001670 <__libc_init_array+0x44>)
 8001640:	f000 fdc8 	bl	80021d4 <_init>
 8001644:	1b64      	subs	r4, r4, r5
 8001646:	10a4      	asrs	r4, r4, #2
 8001648:	2600      	movs	r6, #0
 800164a:	42a6      	cmp	r6, r4
 800164c:	d105      	bne.n	800165a <__libc_init_array+0x2e>
 800164e:	bd70      	pop	{r4, r5, r6, pc}
 8001650:	f855 3b04 	ldr.w	r3, [r5], #4
 8001654:	4798      	blx	r3
 8001656:	3601      	adds	r6, #1
 8001658:	e7ee      	b.n	8001638 <__libc_init_array+0xc>
 800165a:	f855 3b04 	ldr.w	r3, [r5], #4
 800165e:	4798      	blx	r3
 8001660:	3601      	adds	r6, #1
 8001662:	e7f2      	b.n	800164a <__libc_init_array+0x1e>
 8001664:	08002268 	.word	0x08002268
 8001668:	08002268 	.word	0x08002268
 800166c:	08002268 	.word	0x08002268
 8001670:	0800226c 	.word	0x0800226c

08001674 <__retarget_lock_init_recursive>:
 8001674:	4770      	bx	lr

08001676 <__retarget_lock_acquire_recursive>:
 8001676:	4770      	bx	lr

08001678 <__retarget_lock_release_recursive>:
 8001678:	4770      	bx	lr
	...

0800167c <_free_r>:
 800167c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800167e:	2900      	cmp	r1, #0
 8001680:	d044      	beq.n	800170c <_free_r+0x90>
 8001682:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001686:	9001      	str	r0, [sp, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	f1a1 0404 	sub.w	r4, r1, #4
 800168e:	bfb8      	it	lt
 8001690:	18e4      	addlt	r4, r4, r3
 8001692:	f000 f8e7 	bl	8001864 <__malloc_lock>
 8001696:	4a1e      	ldr	r2, [pc, #120]	; (8001710 <_free_r+0x94>)
 8001698:	9801      	ldr	r0, [sp, #4]
 800169a:	6813      	ldr	r3, [r2, #0]
 800169c:	b933      	cbnz	r3, 80016ac <_free_r+0x30>
 800169e:	6063      	str	r3, [r4, #4]
 80016a0:	6014      	str	r4, [r2, #0]
 80016a2:	b003      	add	sp, #12
 80016a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80016a8:	f000 b8e2 	b.w	8001870 <__malloc_unlock>
 80016ac:	42a3      	cmp	r3, r4
 80016ae:	d908      	bls.n	80016c2 <_free_r+0x46>
 80016b0:	6825      	ldr	r5, [r4, #0]
 80016b2:	1961      	adds	r1, r4, r5
 80016b4:	428b      	cmp	r3, r1
 80016b6:	bf01      	itttt	eq
 80016b8:	6819      	ldreq	r1, [r3, #0]
 80016ba:	685b      	ldreq	r3, [r3, #4]
 80016bc:	1949      	addeq	r1, r1, r5
 80016be:	6021      	streq	r1, [r4, #0]
 80016c0:	e7ed      	b.n	800169e <_free_r+0x22>
 80016c2:	461a      	mov	r2, r3
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	b10b      	cbz	r3, 80016cc <_free_r+0x50>
 80016c8:	42a3      	cmp	r3, r4
 80016ca:	d9fa      	bls.n	80016c2 <_free_r+0x46>
 80016cc:	6811      	ldr	r1, [r2, #0]
 80016ce:	1855      	adds	r5, r2, r1
 80016d0:	42a5      	cmp	r5, r4
 80016d2:	d10b      	bne.n	80016ec <_free_r+0x70>
 80016d4:	6824      	ldr	r4, [r4, #0]
 80016d6:	4421      	add	r1, r4
 80016d8:	1854      	adds	r4, r2, r1
 80016da:	42a3      	cmp	r3, r4
 80016dc:	6011      	str	r1, [r2, #0]
 80016de:	d1e0      	bne.n	80016a2 <_free_r+0x26>
 80016e0:	681c      	ldr	r4, [r3, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	6053      	str	r3, [r2, #4]
 80016e6:	440c      	add	r4, r1
 80016e8:	6014      	str	r4, [r2, #0]
 80016ea:	e7da      	b.n	80016a2 <_free_r+0x26>
 80016ec:	d902      	bls.n	80016f4 <_free_r+0x78>
 80016ee:	230c      	movs	r3, #12
 80016f0:	6003      	str	r3, [r0, #0]
 80016f2:	e7d6      	b.n	80016a2 <_free_r+0x26>
 80016f4:	6825      	ldr	r5, [r4, #0]
 80016f6:	1961      	adds	r1, r4, r5
 80016f8:	428b      	cmp	r3, r1
 80016fa:	bf04      	itt	eq
 80016fc:	6819      	ldreq	r1, [r3, #0]
 80016fe:	685b      	ldreq	r3, [r3, #4]
 8001700:	6063      	str	r3, [r4, #4]
 8001702:	bf04      	itt	eq
 8001704:	1949      	addeq	r1, r1, r5
 8001706:	6021      	streq	r1, [r4, #0]
 8001708:	6054      	str	r4, [r2, #4]
 800170a:	e7ca      	b.n	80016a2 <_free_r+0x26>
 800170c:	b003      	add	sp, #12
 800170e:	bd30      	pop	{r4, r5, pc}
 8001710:	200002f4 	.word	0x200002f4

08001714 <malloc>:
 8001714:	4b02      	ldr	r3, [pc, #8]	; (8001720 <malloc+0xc>)
 8001716:	4601      	mov	r1, r0
 8001718:	6818      	ldr	r0, [r3, #0]
 800171a:	f000 b823 	b.w	8001764 <_malloc_r>
 800171e:	bf00      	nop
 8001720:	20000084 	.word	0x20000084

08001724 <sbrk_aligned>:
 8001724:	b570      	push	{r4, r5, r6, lr}
 8001726:	4e0e      	ldr	r6, [pc, #56]	; (8001760 <sbrk_aligned+0x3c>)
 8001728:	460c      	mov	r4, r1
 800172a:	6831      	ldr	r1, [r6, #0]
 800172c:	4605      	mov	r5, r0
 800172e:	b911      	cbnz	r1, 8001736 <sbrk_aligned+0x12>
 8001730:	f000 fd40 	bl	80021b4 <_sbrk_r>
 8001734:	6030      	str	r0, [r6, #0]
 8001736:	4621      	mov	r1, r4
 8001738:	4628      	mov	r0, r5
 800173a:	f000 fd3b 	bl	80021b4 <_sbrk_r>
 800173e:	1c43      	adds	r3, r0, #1
 8001740:	d00a      	beq.n	8001758 <sbrk_aligned+0x34>
 8001742:	1cc4      	adds	r4, r0, #3
 8001744:	f024 0403 	bic.w	r4, r4, #3
 8001748:	42a0      	cmp	r0, r4
 800174a:	d007      	beq.n	800175c <sbrk_aligned+0x38>
 800174c:	1a21      	subs	r1, r4, r0
 800174e:	4628      	mov	r0, r5
 8001750:	f000 fd30 	bl	80021b4 <_sbrk_r>
 8001754:	3001      	adds	r0, #1
 8001756:	d101      	bne.n	800175c <sbrk_aligned+0x38>
 8001758:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800175c:	4620      	mov	r0, r4
 800175e:	bd70      	pop	{r4, r5, r6, pc}
 8001760:	200002f8 	.word	0x200002f8

08001764 <_malloc_r>:
 8001764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001768:	1ccd      	adds	r5, r1, #3
 800176a:	f025 0503 	bic.w	r5, r5, #3
 800176e:	3508      	adds	r5, #8
 8001770:	2d0c      	cmp	r5, #12
 8001772:	bf38      	it	cc
 8001774:	250c      	movcc	r5, #12
 8001776:	2d00      	cmp	r5, #0
 8001778:	4607      	mov	r7, r0
 800177a:	db01      	blt.n	8001780 <_malloc_r+0x1c>
 800177c:	42a9      	cmp	r1, r5
 800177e:	d905      	bls.n	800178c <_malloc_r+0x28>
 8001780:	230c      	movs	r3, #12
 8001782:	603b      	str	r3, [r7, #0]
 8001784:	2600      	movs	r6, #0
 8001786:	4630      	mov	r0, r6
 8001788:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800178c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001860 <_malloc_r+0xfc>
 8001790:	f000 f868 	bl	8001864 <__malloc_lock>
 8001794:	f8d8 3000 	ldr.w	r3, [r8]
 8001798:	461c      	mov	r4, r3
 800179a:	bb5c      	cbnz	r4, 80017f4 <_malloc_r+0x90>
 800179c:	4629      	mov	r1, r5
 800179e:	4638      	mov	r0, r7
 80017a0:	f7ff ffc0 	bl	8001724 <sbrk_aligned>
 80017a4:	1c43      	adds	r3, r0, #1
 80017a6:	4604      	mov	r4, r0
 80017a8:	d155      	bne.n	8001856 <_malloc_r+0xf2>
 80017aa:	f8d8 4000 	ldr.w	r4, [r8]
 80017ae:	4626      	mov	r6, r4
 80017b0:	2e00      	cmp	r6, #0
 80017b2:	d145      	bne.n	8001840 <_malloc_r+0xdc>
 80017b4:	2c00      	cmp	r4, #0
 80017b6:	d048      	beq.n	800184a <_malloc_r+0xe6>
 80017b8:	6823      	ldr	r3, [r4, #0]
 80017ba:	4631      	mov	r1, r6
 80017bc:	4638      	mov	r0, r7
 80017be:	eb04 0903 	add.w	r9, r4, r3
 80017c2:	f000 fcf7 	bl	80021b4 <_sbrk_r>
 80017c6:	4581      	cmp	r9, r0
 80017c8:	d13f      	bne.n	800184a <_malloc_r+0xe6>
 80017ca:	6821      	ldr	r1, [r4, #0]
 80017cc:	1a6d      	subs	r5, r5, r1
 80017ce:	4629      	mov	r1, r5
 80017d0:	4638      	mov	r0, r7
 80017d2:	f7ff ffa7 	bl	8001724 <sbrk_aligned>
 80017d6:	3001      	adds	r0, #1
 80017d8:	d037      	beq.n	800184a <_malloc_r+0xe6>
 80017da:	6823      	ldr	r3, [r4, #0]
 80017dc:	442b      	add	r3, r5
 80017de:	6023      	str	r3, [r4, #0]
 80017e0:	f8d8 3000 	ldr.w	r3, [r8]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d038      	beq.n	800185a <_malloc_r+0xf6>
 80017e8:	685a      	ldr	r2, [r3, #4]
 80017ea:	42a2      	cmp	r2, r4
 80017ec:	d12b      	bne.n	8001846 <_malloc_r+0xe2>
 80017ee:	2200      	movs	r2, #0
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	e00f      	b.n	8001814 <_malloc_r+0xb0>
 80017f4:	6822      	ldr	r2, [r4, #0]
 80017f6:	1b52      	subs	r2, r2, r5
 80017f8:	d41f      	bmi.n	800183a <_malloc_r+0xd6>
 80017fa:	2a0b      	cmp	r2, #11
 80017fc:	d917      	bls.n	800182e <_malloc_r+0xca>
 80017fe:	1961      	adds	r1, r4, r5
 8001800:	42a3      	cmp	r3, r4
 8001802:	6025      	str	r5, [r4, #0]
 8001804:	bf18      	it	ne
 8001806:	6059      	strne	r1, [r3, #4]
 8001808:	6863      	ldr	r3, [r4, #4]
 800180a:	bf08      	it	eq
 800180c:	f8c8 1000 	streq.w	r1, [r8]
 8001810:	5162      	str	r2, [r4, r5]
 8001812:	604b      	str	r3, [r1, #4]
 8001814:	4638      	mov	r0, r7
 8001816:	f104 060b 	add.w	r6, r4, #11
 800181a:	f000 f829 	bl	8001870 <__malloc_unlock>
 800181e:	f026 0607 	bic.w	r6, r6, #7
 8001822:	1d23      	adds	r3, r4, #4
 8001824:	1af2      	subs	r2, r6, r3
 8001826:	d0ae      	beq.n	8001786 <_malloc_r+0x22>
 8001828:	1b9b      	subs	r3, r3, r6
 800182a:	50a3      	str	r3, [r4, r2]
 800182c:	e7ab      	b.n	8001786 <_malloc_r+0x22>
 800182e:	42a3      	cmp	r3, r4
 8001830:	6862      	ldr	r2, [r4, #4]
 8001832:	d1dd      	bne.n	80017f0 <_malloc_r+0x8c>
 8001834:	f8c8 2000 	str.w	r2, [r8]
 8001838:	e7ec      	b.n	8001814 <_malloc_r+0xb0>
 800183a:	4623      	mov	r3, r4
 800183c:	6864      	ldr	r4, [r4, #4]
 800183e:	e7ac      	b.n	800179a <_malloc_r+0x36>
 8001840:	4634      	mov	r4, r6
 8001842:	6876      	ldr	r6, [r6, #4]
 8001844:	e7b4      	b.n	80017b0 <_malloc_r+0x4c>
 8001846:	4613      	mov	r3, r2
 8001848:	e7cc      	b.n	80017e4 <_malloc_r+0x80>
 800184a:	230c      	movs	r3, #12
 800184c:	603b      	str	r3, [r7, #0]
 800184e:	4638      	mov	r0, r7
 8001850:	f000 f80e 	bl	8001870 <__malloc_unlock>
 8001854:	e797      	b.n	8001786 <_malloc_r+0x22>
 8001856:	6025      	str	r5, [r4, #0]
 8001858:	e7dc      	b.n	8001814 <_malloc_r+0xb0>
 800185a:	605b      	str	r3, [r3, #4]
 800185c:	deff      	udf	#255	; 0xff
 800185e:	bf00      	nop
 8001860:	200002f4 	.word	0x200002f4

08001864 <__malloc_lock>:
 8001864:	4801      	ldr	r0, [pc, #4]	; (800186c <__malloc_lock+0x8>)
 8001866:	f7ff bf06 	b.w	8001676 <__retarget_lock_acquire_recursive>
 800186a:	bf00      	nop
 800186c:	200002f0 	.word	0x200002f0

08001870 <__malloc_unlock>:
 8001870:	4801      	ldr	r0, [pc, #4]	; (8001878 <__malloc_unlock+0x8>)
 8001872:	f7ff bf01 	b.w	8001678 <__retarget_lock_release_recursive>
 8001876:	bf00      	nop
 8001878:	200002f0 	.word	0x200002f0

0800187c <__sfputc_r>:
 800187c:	6893      	ldr	r3, [r2, #8]
 800187e:	3b01      	subs	r3, #1
 8001880:	2b00      	cmp	r3, #0
 8001882:	b410      	push	{r4}
 8001884:	6093      	str	r3, [r2, #8]
 8001886:	da08      	bge.n	800189a <__sfputc_r+0x1e>
 8001888:	6994      	ldr	r4, [r2, #24]
 800188a:	42a3      	cmp	r3, r4
 800188c:	db01      	blt.n	8001892 <__sfputc_r+0x16>
 800188e:	290a      	cmp	r1, #10
 8001890:	d103      	bne.n	800189a <__sfputc_r+0x1e>
 8001892:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001896:	f000 bbd5 	b.w	8002044 <__swbuf_r>
 800189a:	6813      	ldr	r3, [r2, #0]
 800189c:	1c58      	adds	r0, r3, #1
 800189e:	6010      	str	r0, [r2, #0]
 80018a0:	7019      	strb	r1, [r3, #0]
 80018a2:	4608      	mov	r0, r1
 80018a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <__sfputs_r>:
 80018aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018ac:	4606      	mov	r6, r0
 80018ae:	460f      	mov	r7, r1
 80018b0:	4614      	mov	r4, r2
 80018b2:	18d5      	adds	r5, r2, r3
 80018b4:	42ac      	cmp	r4, r5
 80018b6:	d101      	bne.n	80018bc <__sfputs_r+0x12>
 80018b8:	2000      	movs	r0, #0
 80018ba:	e007      	b.n	80018cc <__sfputs_r+0x22>
 80018bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018c0:	463a      	mov	r2, r7
 80018c2:	4630      	mov	r0, r6
 80018c4:	f7ff ffda 	bl	800187c <__sfputc_r>
 80018c8:	1c43      	adds	r3, r0, #1
 80018ca:	d1f3      	bne.n	80018b4 <__sfputs_r+0xa>
 80018cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080018d0 <_vfiprintf_r>:
 80018d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018d4:	460d      	mov	r5, r1
 80018d6:	b09d      	sub	sp, #116	; 0x74
 80018d8:	4614      	mov	r4, r2
 80018da:	4698      	mov	r8, r3
 80018dc:	4606      	mov	r6, r0
 80018de:	b118      	cbz	r0, 80018e8 <_vfiprintf_r+0x18>
 80018e0:	6a03      	ldr	r3, [r0, #32]
 80018e2:	b90b      	cbnz	r3, 80018e8 <_vfiprintf_r+0x18>
 80018e4:	f7ff fd1e 	bl	8001324 <__sinit>
 80018e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80018ea:	07d9      	lsls	r1, r3, #31
 80018ec:	d405      	bmi.n	80018fa <_vfiprintf_r+0x2a>
 80018ee:	89ab      	ldrh	r3, [r5, #12]
 80018f0:	059a      	lsls	r2, r3, #22
 80018f2:	d402      	bmi.n	80018fa <_vfiprintf_r+0x2a>
 80018f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80018f6:	f7ff febe 	bl	8001676 <__retarget_lock_acquire_recursive>
 80018fa:	89ab      	ldrh	r3, [r5, #12]
 80018fc:	071b      	lsls	r3, r3, #28
 80018fe:	d501      	bpl.n	8001904 <_vfiprintf_r+0x34>
 8001900:	692b      	ldr	r3, [r5, #16]
 8001902:	b99b      	cbnz	r3, 800192c <_vfiprintf_r+0x5c>
 8001904:	4629      	mov	r1, r5
 8001906:	4630      	mov	r0, r6
 8001908:	f000 fbda 	bl	80020c0 <__swsetup_r>
 800190c:	b170      	cbz	r0, 800192c <_vfiprintf_r+0x5c>
 800190e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001910:	07dc      	lsls	r4, r3, #31
 8001912:	d504      	bpl.n	800191e <_vfiprintf_r+0x4e>
 8001914:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001918:	b01d      	add	sp, #116	; 0x74
 800191a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800191e:	89ab      	ldrh	r3, [r5, #12]
 8001920:	0598      	lsls	r0, r3, #22
 8001922:	d4f7      	bmi.n	8001914 <_vfiprintf_r+0x44>
 8001924:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001926:	f7ff fea7 	bl	8001678 <__retarget_lock_release_recursive>
 800192a:	e7f3      	b.n	8001914 <_vfiprintf_r+0x44>
 800192c:	2300      	movs	r3, #0
 800192e:	9309      	str	r3, [sp, #36]	; 0x24
 8001930:	2320      	movs	r3, #32
 8001932:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001936:	f8cd 800c 	str.w	r8, [sp, #12]
 800193a:	2330      	movs	r3, #48	; 0x30
 800193c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8001af0 <_vfiprintf_r+0x220>
 8001940:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001944:	f04f 0901 	mov.w	r9, #1
 8001948:	4623      	mov	r3, r4
 800194a:	469a      	mov	sl, r3
 800194c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001950:	b10a      	cbz	r2, 8001956 <_vfiprintf_r+0x86>
 8001952:	2a25      	cmp	r2, #37	; 0x25
 8001954:	d1f9      	bne.n	800194a <_vfiprintf_r+0x7a>
 8001956:	ebba 0b04 	subs.w	fp, sl, r4
 800195a:	d00b      	beq.n	8001974 <_vfiprintf_r+0xa4>
 800195c:	465b      	mov	r3, fp
 800195e:	4622      	mov	r2, r4
 8001960:	4629      	mov	r1, r5
 8001962:	4630      	mov	r0, r6
 8001964:	f7ff ffa1 	bl	80018aa <__sfputs_r>
 8001968:	3001      	adds	r0, #1
 800196a:	f000 80a9 	beq.w	8001ac0 <_vfiprintf_r+0x1f0>
 800196e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001970:	445a      	add	r2, fp
 8001972:	9209      	str	r2, [sp, #36]	; 0x24
 8001974:	f89a 3000 	ldrb.w	r3, [sl]
 8001978:	2b00      	cmp	r3, #0
 800197a:	f000 80a1 	beq.w	8001ac0 <_vfiprintf_r+0x1f0>
 800197e:	2300      	movs	r3, #0
 8001980:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001984:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001988:	f10a 0a01 	add.w	sl, sl, #1
 800198c:	9304      	str	r3, [sp, #16]
 800198e:	9307      	str	r3, [sp, #28]
 8001990:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001994:	931a      	str	r3, [sp, #104]	; 0x68
 8001996:	4654      	mov	r4, sl
 8001998:	2205      	movs	r2, #5
 800199a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800199e:	4854      	ldr	r0, [pc, #336]	; (8001af0 <_vfiprintf_r+0x220>)
 80019a0:	f7fe fc16 	bl	80001d0 <memchr>
 80019a4:	9a04      	ldr	r2, [sp, #16]
 80019a6:	b9d8      	cbnz	r0, 80019e0 <_vfiprintf_r+0x110>
 80019a8:	06d1      	lsls	r1, r2, #27
 80019aa:	bf44      	itt	mi
 80019ac:	2320      	movmi	r3, #32
 80019ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80019b2:	0713      	lsls	r3, r2, #28
 80019b4:	bf44      	itt	mi
 80019b6:	232b      	movmi	r3, #43	; 0x2b
 80019b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80019bc:	f89a 3000 	ldrb.w	r3, [sl]
 80019c0:	2b2a      	cmp	r3, #42	; 0x2a
 80019c2:	d015      	beq.n	80019f0 <_vfiprintf_r+0x120>
 80019c4:	9a07      	ldr	r2, [sp, #28]
 80019c6:	4654      	mov	r4, sl
 80019c8:	2000      	movs	r0, #0
 80019ca:	f04f 0c0a 	mov.w	ip, #10
 80019ce:	4621      	mov	r1, r4
 80019d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80019d4:	3b30      	subs	r3, #48	; 0x30
 80019d6:	2b09      	cmp	r3, #9
 80019d8:	d94d      	bls.n	8001a76 <_vfiprintf_r+0x1a6>
 80019da:	b1b0      	cbz	r0, 8001a0a <_vfiprintf_r+0x13a>
 80019dc:	9207      	str	r2, [sp, #28]
 80019de:	e014      	b.n	8001a0a <_vfiprintf_r+0x13a>
 80019e0:	eba0 0308 	sub.w	r3, r0, r8
 80019e4:	fa09 f303 	lsl.w	r3, r9, r3
 80019e8:	4313      	orrs	r3, r2
 80019ea:	9304      	str	r3, [sp, #16]
 80019ec:	46a2      	mov	sl, r4
 80019ee:	e7d2      	b.n	8001996 <_vfiprintf_r+0xc6>
 80019f0:	9b03      	ldr	r3, [sp, #12]
 80019f2:	1d19      	adds	r1, r3, #4
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	9103      	str	r1, [sp, #12]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	bfbb      	ittet	lt
 80019fc:	425b      	neglt	r3, r3
 80019fe:	f042 0202 	orrlt.w	r2, r2, #2
 8001a02:	9307      	strge	r3, [sp, #28]
 8001a04:	9307      	strlt	r3, [sp, #28]
 8001a06:	bfb8      	it	lt
 8001a08:	9204      	strlt	r2, [sp, #16]
 8001a0a:	7823      	ldrb	r3, [r4, #0]
 8001a0c:	2b2e      	cmp	r3, #46	; 0x2e
 8001a0e:	d10c      	bne.n	8001a2a <_vfiprintf_r+0x15a>
 8001a10:	7863      	ldrb	r3, [r4, #1]
 8001a12:	2b2a      	cmp	r3, #42	; 0x2a
 8001a14:	d134      	bne.n	8001a80 <_vfiprintf_r+0x1b0>
 8001a16:	9b03      	ldr	r3, [sp, #12]
 8001a18:	1d1a      	adds	r2, r3, #4
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	9203      	str	r2, [sp, #12]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	bfb8      	it	lt
 8001a22:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001a26:	3402      	adds	r4, #2
 8001a28:	9305      	str	r3, [sp, #20]
 8001a2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8001b00 <_vfiprintf_r+0x230>
 8001a2e:	7821      	ldrb	r1, [r4, #0]
 8001a30:	2203      	movs	r2, #3
 8001a32:	4650      	mov	r0, sl
 8001a34:	f7fe fbcc 	bl	80001d0 <memchr>
 8001a38:	b138      	cbz	r0, 8001a4a <_vfiprintf_r+0x17a>
 8001a3a:	9b04      	ldr	r3, [sp, #16]
 8001a3c:	eba0 000a 	sub.w	r0, r0, sl
 8001a40:	2240      	movs	r2, #64	; 0x40
 8001a42:	4082      	lsls	r2, r0
 8001a44:	4313      	orrs	r3, r2
 8001a46:	3401      	adds	r4, #1
 8001a48:	9304      	str	r3, [sp, #16]
 8001a4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a4e:	4829      	ldr	r0, [pc, #164]	; (8001af4 <_vfiprintf_r+0x224>)
 8001a50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001a54:	2206      	movs	r2, #6
 8001a56:	f7fe fbbb 	bl	80001d0 <memchr>
 8001a5a:	2800      	cmp	r0, #0
 8001a5c:	d03f      	beq.n	8001ade <_vfiprintf_r+0x20e>
 8001a5e:	4b26      	ldr	r3, [pc, #152]	; (8001af8 <_vfiprintf_r+0x228>)
 8001a60:	bb1b      	cbnz	r3, 8001aaa <_vfiprintf_r+0x1da>
 8001a62:	9b03      	ldr	r3, [sp, #12]
 8001a64:	3307      	adds	r3, #7
 8001a66:	f023 0307 	bic.w	r3, r3, #7
 8001a6a:	3308      	adds	r3, #8
 8001a6c:	9303      	str	r3, [sp, #12]
 8001a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001a70:	443b      	add	r3, r7
 8001a72:	9309      	str	r3, [sp, #36]	; 0x24
 8001a74:	e768      	b.n	8001948 <_vfiprintf_r+0x78>
 8001a76:	fb0c 3202 	mla	r2, ip, r2, r3
 8001a7a:	460c      	mov	r4, r1
 8001a7c:	2001      	movs	r0, #1
 8001a7e:	e7a6      	b.n	80019ce <_vfiprintf_r+0xfe>
 8001a80:	2300      	movs	r3, #0
 8001a82:	3401      	adds	r4, #1
 8001a84:	9305      	str	r3, [sp, #20]
 8001a86:	4619      	mov	r1, r3
 8001a88:	f04f 0c0a 	mov.w	ip, #10
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001a92:	3a30      	subs	r2, #48	; 0x30
 8001a94:	2a09      	cmp	r2, #9
 8001a96:	d903      	bls.n	8001aa0 <_vfiprintf_r+0x1d0>
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0c6      	beq.n	8001a2a <_vfiprintf_r+0x15a>
 8001a9c:	9105      	str	r1, [sp, #20]
 8001a9e:	e7c4      	b.n	8001a2a <_vfiprintf_r+0x15a>
 8001aa0:	fb0c 2101 	mla	r1, ip, r1, r2
 8001aa4:	4604      	mov	r4, r0
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e7f0      	b.n	8001a8c <_vfiprintf_r+0x1bc>
 8001aaa:	ab03      	add	r3, sp, #12
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	462a      	mov	r2, r5
 8001ab0:	4b12      	ldr	r3, [pc, #72]	; (8001afc <_vfiprintf_r+0x22c>)
 8001ab2:	a904      	add	r1, sp, #16
 8001ab4:	4630      	mov	r0, r6
 8001ab6:	f3af 8000 	nop.w
 8001aba:	4607      	mov	r7, r0
 8001abc:	1c78      	adds	r0, r7, #1
 8001abe:	d1d6      	bne.n	8001a6e <_vfiprintf_r+0x19e>
 8001ac0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001ac2:	07d9      	lsls	r1, r3, #31
 8001ac4:	d405      	bmi.n	8001ad2 <_vfiprintf_r+0x202>
 8001ac6:	89ab      	ldrh	r3, [r5, #12]
 8001ac8:	059a      	lsls	r2, r3, #22
 8001aca:	d402      	bmi.n	8001ad2 <_vfiprintf_r+0x202>
 8001acc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001ace:	f7ff fdd3 	bl	8001678 <__retarget_lock_release_recursive>
 8001ad2:	89ab      	ldrh	r3, [r5, #12]
 8001ad4:	065b      	lsls	r3, r3, #25
 8001ad6:	f53f af1d 	bmi.w	8001914 <_vfiprintf_r+0x44>
 8001ada:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001adc:	e71c      	b.n	8001918 <_vfiprintf_r+0x48>
 8001ade:	ab03      	add	r3, sp, #12
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	462a      	mov	r2, r5
 8001ae4:	4b05      	ldr	r3, [pc, #20]	; (8001afc <_vfiprintf_r+0x22c>)
 8001ae6:	a904      	add	r1, sp, #16
 8001ae8:	4630      	mov	r0, r6
 8001aea:	f000 f879 	bl	8001be0 <_printf_i>
 8001aee:	e7e4      	b.n	8001aba <_vfiprintf_r+0x1ea>
 8001af0:	08002235 	.word	0x08002235
 8001af4:	0800223f 	.word	0x0800223f
 8001af8:	00000000 	.word	0x00000000
 8001afc:	080018ab 	.word	0x080018ab
 8001b00:	0800223b 	.word	0x0800223b

08001b04 <_printf_common>:
 8001b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b08:	4616      	mov	r6, r2
 8001b0a:	4699      	mov	r9, r3
 8001b0c:	688a      	ldr	r2, [r1, #8]
 8001b0e:	690b      	ldr	r3, [r1, #16]
 8001b10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001b14:	4293      	cmp	r3, r2
 8001b16:	bfb8      	it	lt
 8001b18:	4613      	movlt	r3, r2
 8001b1a:	6033      	str	r3, [r6, #0]
 8001b1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001b20:	4607      	mov	r7, r0
 8001b22:	460c      	mov	r4, r1
 8001b24:	b10a      	cbz	r2, 8001b2a <_printf_common+0x26>
 8001b26:	3301      	adds	r3, #1
 8001b28:	6033      	str	r3, [r6, #0]
 8001b2a:	6823      	ldr	r3, [r4, #0]
 8001b2c:	0699      	lsls	r1, r3, #26
 8001b2e:	bf42      	ittt	mi
 8001b30:	6833      	ldrmi	r3, [r6, #0]
 8001b32:	3302      	addmi	r3, #2
 8001b34:	6033      	strmi	r3, [r6, #0]
 8001b36:	6825      	ldr	r5, [r4, #0]
 8001b38:	f015 0506 	ands.w	r5, r5, #6
 8001b3c:	d106      	bne.n	8001b4c <_printf_common+0x48>
 8001b3e:	f104 0a19 	add.w	sl, r4, #25
 8001b42:	68e3      	ldr	r3, [r4, #12]
 8001b44:	6832      	ldr	r2, [r6, #0]
 8001b46:	1a9b      	subs	r3, r3, r2
 8001b48:	42ab      	cmp	r3, r5
 8001b4a:	dc26      	bgt.n	8001b9a <_printf_common+0x96>
 8001b4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001b50:	1e13      	subs	r3, r2, #0
 8001b52:	6822      	ldr	r2, [r4, #0]
 8001b54:	bf18      	it	ne
 8001b56:	2301      	movne	r3, #1
 8001b58:	0692      	lsls	r2, r2, #26
 8001b5a:	d42b      	bmi.n	8001bb4 <_printf_common+0xb0>
 8001b5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001b60:	4649      	mov	r1, r9
 8001b62:	4638      	mov	r0, r7
 8001b64:	47c0      	blx	r8
 8001b66:	3001      	adds	r0, #1
 8001b68:	d01e      	beq.n	8001ba8 <_printf_common+0xa4>
 8001b6a:	6823      	ldr	r3, [r4, #0]
 8001b6c:	6922      	ldr	r2, [r4, #16]
 8001b6e:	f003 0306 	and.w	r3, r3, #6
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	bf02      	ittt	eq
 8001b76:	68e5      	ldreq	r5, [r4, #12]
 8001b78:	6833      	ldreq	r3, [r6, #0]
 8001b7a:	1aed      	subeq	r5, r5, r3
 8001b7c:	68a3      	ldr	r3, [r4, #8]
 8001b7e:	bf0c      	ite	eq
 8001b80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001b84:	2500      	movne	r5, #0
 8001b86:	4293      	cmp	r3, r2
 8001b88:	bfc4      	itt	gt
 8001b8a:	1a9b      	subgt	r3, r3, r2
 8001b8c:	18ed      	addgt	r5, r5, r3
 8001b8e:	2600      	movs	r6, #0
 8001b90:	341a      	adds	r4, #26
 8001b92:	42b5      	cmp	r5, r6
 8001b94:	d11a      	bne.n	8001bcc <_printf_common+0xc8>
 8001b96:	2000      	movs	r0, #0
 8001b98:	e008      	b.n	8001bac <_printf_common+0xa8>
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	4652      	mov	r2, sl
 8001b9e:	4649      	mov	r1, r9
 8001ba0:	4638      	mov	r0, r7
 8001ba2:	47c0      	blx	r8
 8001ba4:	3001      	adds	r0, #1
 8001ba6:	d103      	bne.n	8001bb0 <_printf_common+0xac>
 8001ba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bb0:	3501      	adds	r5, #1
 8001bb2:	e7c6      	b.n	8001b42 <_printf_common+0x3e>
 8001bb4:	18e1      	adds	r1, r4, r3
 8001bb6:	1c5a      	adds	r2, r3, #1
 8001bb8:	2030      	movs	r0, #48	; 0x30
 8001bba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001bbe:	4422      	add	r2, r4
 8001bc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001bc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001bc8:	3302      	adds	r3, #2
 8001bca:	e7c7      	b.n	8001b5c <_printf_common+0x58>
 8001bcc:	2301      	movs	r3, #1
 8001bce:	4622      	mov	r2, r4
 8001bd0:	4649      	mov	r1, r9
 8001bd2:	4638      	mov	r0, r7
 8001bd4:	47c0      	blx	r8
 8001bd6:	3001      	adds	r0, #1
 8001bd8:	d0e6      	beq.n	8001ba8 <_printf_common+0xa4>
 8001bda:	3601      	adds	r6, #1
 8001bdc:	e7d9      	b.n	8001b92 <_printf_common+0x8e>
	...

08001be0 <_printf_i>:
 8001be0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001be4:	7e0f      	ldrb	r7, [r1, #24]
 8001be6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001be8:	2f78      	cmp	r7, #120	; 0x78
 8001bea:	4691      	mov	r9, r2
 8001bec:	4680      	mov	r8, r0
 8001bee:	460c      	mov	r4, r1
 8001bf0:	469a      	mov	sl, r3
 8001bf2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001bf6:	d807      	bhi.n	8001c08 <_printf_i+0x28>
 8001bf8:	2f62      	cmp	r7, #98	; 0x62
 8001bfa:	d80a      	bhi.n	8001c12 <_printf_i+0x32>
 8001bfc:	2f00      	cmp	r7, #0
 8001bfe:	f000 80d4 	beq.w	8001daa <_printf_i+0x1ca>
 8001c02:	2f58      	cmp	r7, #88	; 0x58
 8001c04:	f000 80c0 	beq.w	8001d88 <_printf_i+0x1a8>
 8001c08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001c0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001c10:	e03a      	b.n	8001c88 <_printf_i+0xa8>
 8001c12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001c16:	2b15      	cmp	r3, #21
 8001c18:	d8f6      	bhi.n	8001c08 <_printf_i+0x28>
 8001c1a:	a101      	add	r1, pc, #4	; (adr r1, 8001c20 <_printf_i+0x40>)
 8001c1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001c20:	08001c79 	.word	0x08001c79
 8001c24:	08001c8d 	.word	0x08001c8d
 8001c28:	08001c09 	.word	0x08001c09
 8001c2c:	08001c09 	.word	0x08001c09
 8001c30:	08001c09 	.word	0x08001c09
 8001c34:	08001c09 	.word	0x08001c09
 8001c38:	08001c8d 	.word	0x08001c8d
 8001c3c:	08001c09 	.word	0x08001c09
 8001c40:	08001c09 	.word	0x08001c09
 8001c44:	08001c09 	.word	0x08001c09
 8001c48:	08001c09 	.word	0x08001c09
 8001c4c:	08001d91 	.word	0x08001d91
 8001c50:	08001cb9 	.word	0x08001cb9
 8001c54:	08001d4b 	.word	0x08001d4b
 8001c58:	08001c09 	.word	0x08001c09
 8001c5c:	08001c09 	.word	0x08001c09
 8001c60:	08001db3 	.word	0x08001db3
 8001c64:	08001c09 	.word	0x08001c09
 8001c68:	08001cb9 	.word	0x08001cb9
 8001c6c:	08001c09 	.word	0x08001c09
 8001c70:	08001c09 	.word	0x08001c09
 8001c74:	08001d53 	.word	0x08001d53
 8001c78:	682b      	ldr	r3, [r5, #0]
 8001c7a:	1d1a      	adds	r2, r3, #4
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	602a      	str	r2, [r5, #0]
 8001c80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001c84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e09f      	b.n	8001dcc <_printf_i+0x1ec>
 8001c8c:	6820      	ldr	r0, [r4, #0]
 8001c8e:	682b      	ldr	r3, [r5, #0]
 8001c90:	0607      	lsls	r7, r0, #24
 8001c92:	f103 0104 	add.w	r1, r3, #4
 8001c96:	6029      	str	r1, [r5, #0]
 8001c98:	d501      	bpl.n	8001c9e <_printf_i+0xbe>
 8001c9a:	681e      	ldr	r6, [r3, #0]
 8001c9c:	e003      	b.n	8001ca6 <_printf_i+0xc6>
 8001c9e:	0646      	lsls	r6, r0, #25
 8001ca0:	d5fb      	bpl.n	8001c9a <_printf_i+0xba>
 8001ca2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001ca6:	2e00      	cmp	r6, #0
 8001ca8:	da03      	bge.n	8001cb2 <_printf_i+0xd2>
 8001caa:	232d      	movs	r3, #45	; 0x2d
 8001cac:	4276      	negs	r6, r6
 8001cae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001cb2:	485a      	ldr	r0, [pc, #360]	; (8001e1c <_printf_i+0x23c>)
 8001cb4:	230a      	movs	r3, #10
 8001cb6:	e012      	b.n	8001cde <_printf_i+0xfe>
 8001cb8:	682b      	ldr	r3, [r5, #0]
 8001cba:	6820      	ldr	r0, [r4, #0]
 8001cbc:	1d19      	adds	r1, r3, #4
 8001cbe:	6029      	str	r1, [r5, #0]
 8001cc0:	0605      	lsls	r5, r0, #24
 8001cc2:	d501      	bpl.n	8001cc8 <_printf_i+0xe8>
 8001cc4:	681e      	ldr	r6, [r3, #0]
 8001cc6:	e002      	b.n	8001cce <_printf_i+0xee>
 8001cc8:	0641      	lsls	r1, r0, #25
 8001cca:	d5fb      	bpl.n	8001cc4 <_printf_i+0xe4>
 8001ccc:	881e      	ldrh	r6, [r3, #0]
 8001cce:	4853      	ldr	r0, [pc, #332]	; (8001e1c <_printf_i+0x23c>)
 8001cd0:	2f6f      	cmp	r7, #111	; 0x6f
 8001cd2:	bf0c      	ite	eq
 8001cd4:	2308      	moveq	r3, #8
 8001cd6:	230a      	movne	r3, #10
 8001cd8:	2100      	movs	r1, #0
 8001cda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001cde:	6865      	ldr	r5, [r4, #4]
 8001ce0:	60a5      	str	r5, [r4, #8]
 8001ce2:	2d00      	cmp	r5, #0
 8001ce4:	bfa2      	ittt	ge
 8001ce6:	6821      	ldrge	r1, [r4, #0]
 8001ce8:	f021 0104 	bicge.w	r1, r1, #4
 8001cec:	6021      	strge	r1, [r4, #0]
 8001cee:	b90e      	cbnz	r6, 8001cf4 <_printf_i+0x114>
 8001cf0:	2d00      	cmp	r5, #0
 8001cf2:	d04b      	beq.n	8001d8c <_printf_i+0x1ac>
 8001cf4:	4615      	mov	r5, r2
 8001cf6:	fbb6 f1f3 	udiv	r1, r6, r3
 8001cfa:	fb03 6711 	mls	r7, r3, r1, r6
 8001cfe:	5dc7      	ldrb	r7, [r0, r7]
 8001d00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001d04:	4637      	mov	r7, r6
 8001d06:	42bb      	cmp	r3, r7
 8001d08:	460e      	mov	r6, r1
 8001d0a:	d9f4      	bls.n	8001cf6 <_printf_i+0x116>
 8001d0c:	2b08      	cmp	r3, #8
 8001d0e:	d10b      	bne.n	8001d28 <_printf_i+0x148>
 8001d10:	6823      	ldr	r3, [r4, #0]
 8001d12:	07de      	lsls	r6, r3, #31
 8001d14:	d508      	bpl.n	8001d28 <_printf_i+0x148>
 8001d16:	6923      	ldr	r3, [r4, #16]
 8001d18:	6861      	ldr	r1, [r4, #4]
 8001d1a:	4299      	cmp	r1, r3
 8001d1c:	bfde      	ittt	le
 8001d1e:	2330      	movle	r3, #48	; 0x30
 8001d20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001d24:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001d28:	1b52      	subs	r2, r2, r5
 8001d2a:	6122      	str	r2, [r4, #16]
 8001d2c:	f8cd a000 	str.w	sl, [sp]
 8001d30:	464b      	mov	r3, r9
 8001d32:	aa03      	add	r2, sp, #12
 8001d34:	4621      	mov	r1, r4
 8001d36:	4640      	mov	r0, r8
 8001d38:	f7ff fee4 	bl	8001b04 <_printf_common>
 8001d3c:	3001      	adds	r0, #1
 8001d3e:	d14a      	bne.n	8001dd6 <_printf_i+0x1f6>
 8001d40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d44:	b004      	add	sp, #16
 8001d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d4a:	6823      	ldr	r3, [r4, #0]
 8001d4c:	f043 0320 	orr.w	r3, r3, #32
 8001d50:	6023      	str	r3, [r4, #0]
 8001d52:	4833      	ldr	r0, [pc, #204]	; (8001e20 <_printf_i+0x240>)
 8001d54:	2778      	movs	r7, #120	; 0x78
 8001d56:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001d5a:	6823      	ldr	r3, [r4, #0]
 8001d5c:	6829      	ldr	r1, [r5, #0]
 8001d5e:	061f      	lsls	r7, r3, #24
 8001d60:	f851 6b04 	ldr.w	r6, [r1], #4
 8001d64:	d402      	bmi.n	8001d6c <_printf_i+0x18c>
 8001d66:	065f      	lsls	r7, r3, #25
 8001d68:	bf48      	it	mi
 8001d6a:	b2b6      	uxthmi	r6, r6
 8001d6c:	07df      	lsls	r7, r3, #31
 8001d6e:	bf48      	it	mi
 8001d70:	f043 0320 	orrmi.w	r3, r3, #32
 8001d74:	6029      	str	r1, [r5, #0]
 8001d76:	bf48      	it	mi
 8001d78:	6023      	strmi	r3, [r4, #0]
 8001d7a:	b91e      	cbnz	r6, 8001d84 <_printf_i+0x1a4>
 8001d7c:	6823      	ldr	r3, [r4, #0]
 8001d7e:	f023 0320 	bic.w	r3, r3, #32
 8001d82:	6023      	str	r3, [r4, #0]
 8001d84:	2310      	movs	r3, #16
 8001d86:	e7a7      	b.n	8001cd8 <_printf_i+0xf8>
 8001d88:	4824      	ldr	r0, [pc, #144]	; (8001e1c <_printf_i+0x23c>)
 8001d8a:	e7e4      	b.n	8001d56 <_printf_i+0x176>
 8001d8c:	4615      	mov	r5, r2
 8001d8e:	e7bd      	b.n	8001d0c <_printf_i+0x12c>
 8001d90:	682b      	ldr	r3, [r5, #0]
 8001d92:	6826      	ldr	r6, [r4, #0]
 8001d94:	6961      	ldr	r1, [r4, #20]
 8001d96:	1d18      	adds	r0, r3, #4
 8001d98:	6028      	str	r0, [r5, #0]
 8001d9a:	0635      	lsls	r5, r6, #24
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	d501      	bpl.n	8001da4 <_printf_i+0x1c4>
 8001da0:	6019      	str	r1, [r3, #0]
 8001da2:	e002      	b.n	8001daa <_printf_i+0x1ca>
 8001da4:	0670      	lsls	r0, r6, #25
 8001da6:	d5fb      	bpl.n	8001da0 <_printf_i+0x1c0>
 8001da8:	8019      	strh	r1, [r3, #0]
 8001daa:	2300      	movs	r3, #0
 8001dac:	6123      	str	r3, [r4, #16]
 8001dae:	4615      	mov	r5, r2
 8001db0:	e7bc      	b.n	8001d2c <_printf_i+0x14c>
 8001db2:	682b      	ldr	r3, [r5, #0]
 8001db4:	1d1a      	adds	r2, r3, #4
 8001db6:	602a      	str	r2, [r5, #0]
 8001db8:	681d      	ldr	r5, [r3, #0]
 8001dba:	6862      	ldr	r2, [r4, #4]
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	4628      	mov	r0, r5
 8001dc0:	f7fe fa06 	bl	80001d0 <memchr>
 8001dc4:	b108      	cbz	r0, 8001dca <_printf_i+0x1ea>
 8001dc6:	1b40      	subs	r0, r0, r5
 8001dc8:	6060      	str	r0, [r4, #4]
 8001dca:	6863      	ldr	r3, [r4, #4]
 8001dcc:	6123      	str	r3, [r4, #16]
 8001dce:	2300      	movs	r3, #0
 8001dd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001dd4:	e7aa      	b.n	8001d2c <_printf_i+0x14c>
 8001dd6:	6923      	ldr	r3, [r4, #16]
 8001dd8:	462a      	mov	r2, r5
 8001dda:	4649      	mov	r1, r9
 8001ddc:	4640      	mov	r0, r8
 8001dde:	47d0      	blx	sl
 8001de0:	3001      	adds	r0, #1
 8001de2:	d0ad      	beq.n	8001d40 <_printf_i+0x160>
 8001de4:	6823      	ldr	r3, [r4, #0]
 8001de6:	079b      	lsls	r3, r3, #30
 8001de8:	d413      	bmi.n	8001e12 <_printf_i+0x232>
 8001dea:	68e0      	ldr	r0, [r4, #12]
 8001dec:	9b03      	ldr	r3, [sp, #12]
 8001dee:	4298      	cmp	r0, r3
 8001df0:	bfb8      	it	lt
 8001df2:	4618      	movlt	r0, r3
 8001df4:	e7a6      	b.n	8001d44 <_printf_i+0x164>
 8001df6:	2301      	movs	r3, #1
 8001df8:	4632      	mov	r2, r6
 8001dfa:	4649      	mov	r1, r9
 8001dfc:	4640      	mov	r0, r8
 8001dfe:	47d0      	blx	sl
 8001e00:	3001      	adds	r0, #1
 8001e02:	d09d      	beq.n	8001d40 <_printf_i+0x160>
 8001e04:	3501      	adds	r5, #1
 8001e06:	68e3      	ldr	r3, [r4, #12]
 8001e08:	9903      	ldr	r1, [sp, #12]
 8001e0a:	1a5b      	subs	r3, r3, r1
 8001e0c:	42ab      	cmp	r3, r5
 8001e0e:	dcf2      	bgt.n	8001df6 <_printf_i+0x216>
 8001e10:	e7eb      	b.n	8001dea <_printf_i+0x20a>
 8001e12:	2500      	movs	r5, #0
 8001e14:	f104 0619 	add.w	r6, r4, #25
 8001e18:	e7f5      	b.n	8001e06 <_printf_i+0x226>
 8001e1a:	bf00      	nop
 8001e1c:	08002246 	.word	0x08002246
 8001e20:	08002257 	.word	0x08002257

08001e24 <__sflush_r>:
 8001e24:	898a      	ldrh	r2, [r1, #12]
 8001e26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e2a:	4605      	mov	r5, r0
 8001e2c:	0710      	lsls	r0, r2, #28
 8001e2e:	460c      	mov	r4, r1
 8001e30:	d458      	bmi.n	8001ee4 <__sflush_r+0xc0>
 8001e32:	684b      	ldr	r3, [r1, #4]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	dc05      	bgt.n	8001e44 <__sflush_r+0x20>
 8001e38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	dc02      	bgt.n	8001e44 <__sflush_r+0x20>
 8001e3e:	2000      	movs	r0, #0
 8001e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001e46:	2e00      	cmp	r6, #0
 8001e48:	d0f9      	beq.n	8001e3e <__sflush_r+0x1a>
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001e50:	682f      	ldr	r7, [r5, #0]
 8001e52:	6a21      	ldr	r1, [r4, #32]
 8001e54:	602b      	str	r3, [r5, #0]
 8001e56:	d032      	beq.n	8001ebe <__sflush_r+0x9a>
 8001e58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001e5a:	89a3      	ldrh	r3, [r4, #12]
 8001e5c:	075a      	lsls	r2, r3, #29
 8001e5e:	d505      	bpl.n	8001e6c <__sflush_r+0x48>
 8001e60:	6863      	ldr	r3, [r4, #4]
 8001e62:	1ac0      	subs	r0, r0, r3
 8001e64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001e66:	b10b      	cbz	r3, 8001e6c <__sflush_r+0x48>
 8001e68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e6a:	1ac0      	subs	r0, r0, r3
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	4602      	mov	r2, r0
 8001e70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001e72:	6a21      	ldr	r1, [r4, #32]
 8001e74:	4628      	mov	r0, r5
 8001e76:	47b0      	blx	r6
 8001e78:	1c43      	adds	r3, r0, #1
 8001e7a:	89a3      	ldrh	r3, [r4, #12]
 8001e7c:	d106      	bne.n	8001e8c <__sflush_r+0x68>
 8001e7e:	6829      	ldr	r1, [r5, #0]
 8001e80:	291d      	cmp	r1, #29
 8001e82:	d82b      	bhi.n	8001edc <__sflush_r+0xb8>
 8001e84:	4a29      	ldr	r2, [pc, #164]	; (8001f2c <__sflush_r+0x108>)
 8001e86:	410a      	asrs	r2, r1
 8001e88:	07d6      	lsls	r6, r2, #31
 8001e8a:	d427      	bmi.n	8001edc <__sflush_r+0xb8>
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	6062      	str	r2, [r4, #4]
 8001e90:	04d9      	lsls	r1, r3, #19
 8001e92:	6922      	ldr	r2, [r4, #16]
 8001e94:	6022      	str	r2, [r4, #0]
 8001e96:	d504      	bpl.n	8001ea2 <__sflush_r+0x7e>
 8001e98:	1c42      	adds	r2, r0, #1
 8001e9a:	d101      	bne.n	8001ea0 <__sflush_r+0x7c>
 8001e9c:	682b      	ldr	r3, [r5, #0]
 8001e9e:	b903      	cbnz	r3, 8001ea2 <__sflush_r+0x7e>
 8001ea0:	6560      	str	r0, [r4, #84]	; 0x54
 8001ea2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001ea4:	602f      	str	r7, [r5, #0]
 8001ea6:	2900      	cmp	r1, #0
 8001ea8:	d0c9      	beq.n	8001e3e <__sflush_r+0x1a>
 8001eaa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001eae:	4299      	cmp	r1, r3
 8001eb0:	d002      	beq.n	8001eb8 <__sflush_r+0x94>
 8001eb2:	4628      	mov	r0, r5
 8001eb4:	f7ff fbe2 	bl	800167c <_free_r>
 8001eb8:	2000      	movs	r0, #0
 8001eba:	6360      	str	r0, [r4, #52]	; 0x34
 8001ebc:	e7c0      	b.n	8001e40 <__sflush_r+0x1c>
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	4628      	mov	r0, r5
 8001ec2:	47b0      	blx	r6
 8001ec4:	1c41      	adds	r1, r0, #1
 8001ec6:	d1c8      	bne.n	8001e5a <__sflush_r+0x36>
 8001ec8:	682b      	ldr	r3, [r5, #0]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d0c5      	beq.n	8001e5a <__sflush_r+0x36>
 8001ece:	2b1d      	cmp	r3, #29
 8001ed0:	d001      	beq.n	8001ed6 <__sflush_r+0xb2>
 8001ed2:	2b16      	cmp	r3, #22
 8001ed4:	d101      	bne.n	8001eda <__sflush_r+0xb6>
 8001ed6:	602f      	str	r7, [r5, #0]
 8001ed8:	e7b1      	b.n	8001e3e <__sflush_r+0x1a>
 8001eda:	89a3      	ldrh	r3, [r4, #12]
 8001edc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ee0:	81a3      	strh	r3, [r4, #12]
 8001ee2:	e7ad      	b.n	8001e40 <__sflush_r+0x1c>
 8001ee4:	690f      	ldr	r7, [r1, #16]
 8001ee6:	2f00      	cmp	r7, #0
 8001ee8:	d0a9      	beq.n	8001e3e <__sflush_r+0x1a>
 8001eea:	0793      	lsls	r3, r2, #30
 8001eec:	680e      	ldr	r6, [r1, #0]
 8001eee:	bf08      	it	eq
 8001ef0:	694b      	ldreq	r3, [r1, #20]
 8001ef2:	600f      	str	r7, [r1, #0]
 8001ef4:	bf18      	it	ne
 8001ef6:	2300      	movne	r3, #0
 8001ef8:	eba6 0807 	sub.w	r8, r6, r7
 8001efc:	608b      	str	r3, [r1, #8]
 8001efe:	f1b8 0f00 	cmp.w	r8, #0
 8001f02:	dd9c      	ble.n	8001e3e <__sflush_r+0x1a>
 8001f04:	6a21      	ldr	r1, [r4, #32]
 8001f06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001f08:	4643      	mov	r3, r8
 8001f0a:	463a      	mov	r2, r7
 8001f0c:	4628      	mov	r0, r5
 8001f0e:	47b0      	blx	r6
 8001f10:	2800      	cmp	r0, #0
 8001f12:	dc06      	bgt.n	8001f22 <__sflush_r+0xfe>
 8001f14:	89a3      	ldrh	r3, [r4, #12]
 8001f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f1a:	81a3      	strh	r3, [r4, #12]
 8001f1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f20:	e78e      	b.n	8001e40 <__sflush_r+0x1c>
 8001f22:	4407      	add	r7, r0
 8001f24:	eba8 0800 	sub.w	r8, r8, r0
 8001f28:	e7e9      	b.n	8001efe <__sflush_r+0xda>
 8001f2a:	bf00      	nop
 8001f2c:	dfbffffe 	.word	0xdfbffffe

08001f30 <_fflush_r>:
 8001f30:	b538      	push	{r3, r4, r5, lr}
 8001f32:	690b      	ldr	r3, [r1, #16]
 8001f34:	4605      	mov	r5, r0
 8001f36:	460c      	mov	r4, r1
 8001f38:	b913      	cbnz	r3, 8001f40 <_fflush_r+0x10>
 8001f3a:	2500      	movs	r5, #0
 8001f3c:	4628      	mov	r0, r5
 8001f3e:	bd38      	pop	{r3, r4, r5, pc}
 8001f40:	b118      	cbz	r0, 8001f4a <_fflush_r+0x1a>
 8001f42:	6a03      	ldr	r3, [r0, #32]
 8001f44:	b90b      	cbnz	r3, 8001f4a <_fflush_r+0x1a>
 8001f46:	f7ff f9ed 	bl	8001324 <__sinit>
 8001f4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0f3      	beq.n	8001f3a <_fflush_r+0xa>
 8001f52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001f54:	07d0      	lsls	r0, r2, #31
 8001f56:	d404      	bmi.n	8001f62 <_fflush_r+0x32>
 8001f58:	0599      	lsls	r1, r3, #22
 8001f5a:	d402      	bmi.n	8001f62 <_fflush_r+0x32>
 8001f5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f5e:	f7ff fb8a 	bl	8001676 <__retarget_lock_acquire_recursive>
 8001f62:	4628      	mov	r0, r5
 8001f64:	4621      	mov	r1, r4
 8001f66:	f7ff ff5d 	bl	8001e24 <__sflush_r>
 8001f6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001f6c:	07da      	lsls	r2, r3, #31
 8001f6e:	4605      	mov	r5, r0
 8001f70:	d4e4      	bmi.n	8001f3c <_fflush_r+0xc>
 8001f72:	89a3      	ldrh	r3, [r4, #12]
 8001f74:	059b      	lsls	r3, r3, #22
 8001f76:	d4e1      	bmi.n	8001f3c <_fflush_r+0xc>
 8001f78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f7a:	f7ff fb7d 	bl	8001678 <__retarget_lock_release_recursive>
 8001f7e:	e7dd      	b.n	8001f3c <_fflush_r+0xc>

08001f80 <__swhatbuf_r>:
 8001f80:	b570      	push	{r4, r5, r6, lr}
 8001f82:	460c      	mov	r4, r1
 8001f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f88:	2900      	cmp	r1, #0
 8001f8a:	b096      	sub	sp, #88	; 0x58
 8001f8c:	4615      	mov	r5, r2
 8001f8e:	461e      	mov	r6, r3
 8001f90:	da0d      	bge.n	8001fae <__swhatbuf_r+0x2e>
 8001f92:	89a3      	ldrh	r3, [r4, #12]
 8001f94:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001f98:	f04f 0100 	mov.w	r1, #0
 8001f9c:	bf0c      	ite	eq
 8001f9e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001fa2:	2340      	movne	r3, #64	; 0x40
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	6031      	str	r1, [r6, #0]
 8001fa8:	602b      	str	r3, [r5, #0]
 8001faa:	b016      	add	sp, #88	; 0x58
 8001fac:	bd70      	pop	{r4, r5, r6, pc}
 8001fae:	466a      	mov	r2, sp
 8001fb0:	f000 f8de 	bl	8002170 <_fstat_r>
 8001fb4:	2800      	cmp	r0, #0
 8001fb6:	dbec      	blt.n	8001f92 <__swhatbuf_r+0x12>
 8001fb8:	9901      	ldr	r1, [sp, #4]
 8001fba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001fbe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001fc2:	4259      	negs	r1, r3
 8001fc4:	4159      	adcs	r1, r3
 8001fc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fca:	e7eb      	b.n	8001fa4 <__swhatbuf_r+0x24>

08001fcc <__smakebuf_r>:
 8001fcc:	898b      	ldrh	r3, [r1, #12]
 8001fce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001fd0:	079d      	lsls	r5, r3, #30
 8001fd2:	4606      	mov	r6, r0
 8001fd4:	460c      	mov	r4, r1
 8001fd6:	d507      	bpl.n	8001fe8 <__smakebuf_r+0x1c>
 8001fd8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001fdc:	6023      	str	r3, [r4, #0]
 8001fde:	6123      	str	r3, [r4, #16]
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	6163      	str	r3, [r4, #20]
 8001fe4:	b002      	add	sp, #8
 8001fe6:	bd70      	pop	{r4, r5, r6, pc}
 8001fe8:	ab01      	add	r3, sp, #4
 8001fea:	466a      	mov	r2, sp
 8001fec:	f7ff ffc8 	bl	8001f80 <__swhatbuf_r>
 8001ff0:	9900      	ldr	r1, [sp, #0]
 8001ff2:	4605      	mov	r5, r0
 8001ff4:	4630      	mov	r0, r6
 8001ff6:	f7ff fbb5 	bl	8001764 <_malloc_r>
 8001ffa:	b948      	cbnz	r0, 8002010 <__smakebuf_r+0x44>
 8001ffc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002000:	059a      	lsls	r2, r3, #22
 8002002:	d4ef      	bmi.n	8001fe4 <__smakebuf_r+0x18>
 8002004:	f023 0303 	bic.w	r3, r3, #3
 8002008:	f043 0302 	orr.w	r3, r3, #2
 800200c:	81a3      	strh	r3, [r4, #12]
 800200e:	e7e3      	b.n	8001fd8 <__smakebuf_r+0xc>
 8002010:	89a3      	ldrh	r3, [r4, #12]
 8002012:	6020      	str	r0, [r4, #0]
 8002014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002018:	81a3      	strh	r3, [r4, #12]
 800201a:	9b00      	ldr	r3, [sp, #0]
 800201c:	6163      	str	r3, [r4, #20]
 800201e:	9b01      	ldr	r3, [sp, #4]
 8002020:	6120      	str	r0, [r4, #16]
 8002022:	b15b      	cbz	r3, 800203c <__smakebuf_r+0x70>
 8002024:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002028:	4630      	mov	r0, r6
 800202a:	f000 f8b3 	bl	8002194 <_isatty_r>
 800202e:	b128      	cbz	r0, 800203c <__smakebuf_r+0x70>
 8002030:	89a3      	ldrh	r3, [r4, #12]
 8002032:	f023 0303 	bic.w	r3, r3, #3
 8002036:	f043 0301 	orr.w	r3, r3, #1
 800203a:	81a3      	strh	r3, [r4, #12]
 800203c:	89a3      	ldrh	r3, [r4, #12]
 800203e:	431d      	orrs	r5, r3
 8002040:	81a5      	strh	r5, [r4, #12]
 8002042:	e7cf      	b.n	8001fe4 <__smakebuf_r+0x18>

08002044 <__swbuf_r>:
 8002044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002046:	460e      	mov	r6, r1
 8002048:	4614      	mov	r4, r2
 800204a:	4605      	mov	r5, r0
 800204c:	b118      	cbz	r0, 8002056 <__swbuf_r+0x12>
 800204e:	6a03      	ldr	r3, [r0, #32]
 8002050:	b90b      	cbnz	r3, 8002056 <__swbuf_r+0x12>
 8002052:	f7ff f967 	bl	8001324 <__sinit>
 8002056:	69a3      	ldr	r3, [r4, #24]
 8002058:	60a3      	str	r3, [r4, #8]
 800205a:	89a3      	ldrh	r3, [r4, #12]
 800205c:	071a      	lsls	r2, r3, #28
 800205e:	d525      	bpl.n	80020ac <__swbuf_r+0x68>
 8002060:	6923      	ldr	r3, [r4, #16]
 8002062:	b31b      	cbz	r3, 80020ac <__swbuf_r+0x68>
 8002064:	6823      	ldr	r3, [r4, #0]
 8002066:	6922      	ldr	r2, [r4, #16]
 8002068:	1a98      	subs	r0, r3, r2
 800206a:	6963      	ldr	r3, [r4, #20]
 800206c:	b2f6      	uxtb	r6, r6
 800206e:	4283      	cmp	r3, r0
 8002070:	4637      	mov	r7, r6
 8002072:	dc04      	bgt.n	800207e <__swbuf_r+0x3a>
 8002074:	4621      	mov	r1, r4
 8002076:	4628      	mov	r0, r5
 8002078:	f7ff ff5a 	bl	8001f30 <_fflush_r>
 800207c:	b9e0      	cbnz	r0, 80020b8 <__swbuf_r+0x74>
 800207e:	68a3      	ldr	r3, [r4, #8]
 8002080:	3b01      	subs	r3, #1
 8002082:	60a3      	str	r3, [r4, #8]
 8002084:	6823      	ldr	r3, [r4, #0]
 8002086:	1c5a      	adds	r2, r3, #1
 8002088:	6022      	str	r2, [r4, #0]
 800208a:	701e      	strb	r6, [r3, #0]
 800208c:	6962      	ldr	r2, [r4, #20]
 800208e:	1c43      	adds	r3, r0, #1
 8002090:	429a      	cmp	r2, r3
 8002092:	d004      	beq.n	800209e <__swbuf_r+0x5a>
 8002094:	89a3      	ldrh	r3, [r4, #12]
 8002096:	07db      	lsls	r3, r3, #31
 8002098:	d506      	bpl.n	80020a8 <__swbuf_r+0x64>
 800209a:	2e0a      	cmp	r6, #10
 800209c:	d104      	bne.n	80020a8 <__swbuf_r+0x64>
 800209e:	4621      	mov	r1, r4
 80020a0:	4628      	mov	r0, r5
 80020a2:	f7ff ff45 	bl	8001f30 <_fflush_r>
 80020a6:	b938      	cbnz	r0, 80020b8 <__swbuf_r+0x74>
 80020a8:	4638      	mov	r0, r7
 80020aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020ac:	4621      	mov	r1, r4
 80020ae:	4628      	mov	r0, r5
 80020b0:	f000 f806 	bl	80020c0 <__swsetup_r>
 80020b4:	2800      	cmp	r0, #0
 80020b6:	d0d5      	beq.n	8002064 <__swbuf_r+0x20>
 80020b8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80020bc:	e7f4      	b.n	80020a8 <__swbuf_r+0x64>
	...

080020c0 <__swsetup_r>:
 80020c0:	b538      	push	{r3, r4, r5, lr}
 80020c2:	4b2a      	ldr	r3, [pc, #168]	; (800216c <__swsetup_r+0xac>)
 80020c4:	4605      	mov	r5, r0
 80020c6:	6818      	ldr	r0, [r3, #0]
 80020c8:	460c      	mov	r4, r1
 80020ca:	b118      	cbz	r0, 80020d4 <__swsetup_r+0x14>
 80020cc:	6a03      	ldr	r3, [r0, #32]
 80020ce:	b90b      	cbnz	r3, 80020d4 <__swsetup_r+0x14>
 80020d0:	f7ff f928 	bl	8001324 <__sinit>
 80020d4:	89a3      	ldrh	r3, [r4, #12]
 80020d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80020da:	0718      	lsls	r0, r3, #28
 80020dc:	d422      	bmi.n	8002124 <__swsetup_r+0x64>
 80020de:	06d9      	lsls	r1, r3, #27
 80020e0:	d407      	bmi.n	80020f2 <__swsetup_r+0x32>
 80020e2:	2309      	movs	r3, #9
 80020e4:	602b      	str	r3, [r5, #0]
 80020e6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80020ea:	81a3      	strh	r3, [r4, #12]
 80020ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020f0:	e034      	b.n	800215c <__swsetup_r+0x9c>
 80020f2:	0758      	lsls	r0, r3, #29
 80020f4:	d512      	bpl.n	800211c <__swsetup_r+0x5c>
 80020f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80020f8:	b141      	cbz	r1, 800210c <__swsetup_r+0x4c>
 80020fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80020fe:	4299      	cmp	r1, r3
 8002100:	d002      	beq.n	8002108 <__swsetup_r+0x48>
 8002102:	4628      	mov	r0, r5
 8002104:	f7ff faba 	bl	800167c <_free_r>
 8002108:	2300      	movs	r3, #0
 800210a:	6363      	str	r3, [r4, #52]	; 0x34
 800210c:	89a3      	ldrh	r3, [r4, #12]
 800210e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002112:	81a3      	strh	r3, [r4, #12]
 8002114:	2300      	movs	r3, #0
 8002116:	6063      	str	r3, [r4, #4]
 8002118:	6923      	ldr	r3, [r4, #16]
 800211a:	6023      	str	r3, [r4, #0]
 800211c:	89a3      	ldrh	r3, [r4, #12]
 800211e:	f043 0308 	orr.w	r3, r3, #8
 8002122:	81a3      	strh	r3, [r4, #12]
 8002124:	6923      	ldr	r3, [r4, #16]
 8002126:	b94b      	cbnz	r3, 800213c <__swsetup_r+0x7c>
 8002128:	89a3      	ldrh	r3, [r4, #12]
 800212a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800212e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002132:	d003      	beq.n	800213c <__swsetup_r+0x7c>
 8002134:	4621      	mov	r1, r4
 8002136:	4628      	mov	r0, r5
 8002138:	f7ff ff48 	bl	8001fcc <__smakebuf_r>
 800213c:	89a0      	ldrh	r0, [r4, #12]
 800213e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002142:	f010 0301 	ands.w	r3, r0, #1
 8002146:	d00a      	beq.n	800215e <__swsetup_r+0x9e>
 8002148:	2300      	movs	r3, #0
 800214a:	60a3      	str	r3, [r4, #8]
 800214c:	6963      	ldr	r3, [r4, #20]
 800214e:	425b      	negs	r3, r3
 8002150:	61a3      	str	r3, [r4, #24]
 8002152:	6923      	ldr	r3, [r4, #16]
 8002154:	b943      	cbnz	r3, 8002168 <__swsetup_r+0xa8>
 8002156:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800215a:	d1c4      	bne.n	80020e6 <__swsetup_r+0x26>
 800215c:	bd38      	pop	{r3, r4, r5, pc}
 800215e:	0781      	lsls	r1, r0, #30
 8002160:	bf58      	it	pl
 8002162:	6963      	ldrpl	r3, [r4, #20]
 8002164:	60a3      	str	r3, [r4, #8]
 8002166:	e7f4      	b.n	8002152 <__swsetup_r+0x92>
 8002168:	2000      	movs	r0, #0
 800216a:	e7f7      	b.n	800215c <__swsetup_r+0x9c>
 800216c:	20000084 	.word	0x20000084

08002170 <_fstat_r>:
 8002170:	b538      	push	{r3, r4, r5, lr}
 8002172:	4d07      	ldr	r5, [pc, #28]	; (8002190 <_fstat_r+0x20>)
 8002174:	2300      	movs	r3, #0
 8002176:	4604      	mov	r4, r0
 8002178:	4608      	mov	r0, r1
 800217a:	4611      	mov	r1, r2
 800217c:	602b      	str	r3, [r5, #0]
 800217e:	f7fe feba 	bl	8000ef6 <_fstat>
 8002182:	1c43      	adds	r3, r0, #1
 8002184:	d102      	bne.n	800218c <_fstat_r+0x1c>
 8002186:	682b      	ldr	r3, [r5, #0]
 8002188:	b103      	cbz	r3, 800218c <_fstat_r+0x1c>
 800218a:	6023      	str	r3, [r4, #0]
 800218c:	bd38      	pop	{r3, r4, r5, pc}
 800218e:	bf00      	nop
 8002190:	200002ec 	.word	0x200002ec

08002194 <_isatty_r>:
 8002194:	b538      	push	{r3, r4, r5, lr}
 8002196:	4d06      	ldr	r5, [pc, #24]	; (80021b0 <_isatty_r+0x1c>)
 8002198:	2300      	movs	r3, #0
 800219a:	4604      	mov	r4, r0
 800219c:	4608      	mov	r0, r1
 800219e:	602b      	str	r3, [r5, #0]
 80021a0:	f7fe feb9 	bl	8000f16 <_isatty>
 80021a4:	1c43      	adds	r3, r0, #1
 80021a6:	d102      	bne.n	80021ae <_isatty_r+0x1a>
 80021a8:	682b      	ldr	r3, [r5, #0]
 80021aa:	b103      	cbz	r3, 80021ae <_isatty_r+0x1a>
 80021ac:	6023      	str	r3, [r4, #0]
 80021ae:	bd38      	pop	{r3, r4, r5, pc}
 80021b0:	200002ec 	.word	0x200002ec

080021b4 <_sbrk_r>:
 80021b4:	b538      	push	{r3, r4, r5, lr}
 80021b6:	4d06      	ldr	r5, [pc, #24]	; (80021d0 <_sbrk_r+0x1c>)
 80021b8:	2300      	movs	r3, #0
 80021ba:	4604      	mov	r4, r0
 80021bc:	4608      	mov	r0, r1
 80021be:	602b      	str	r3, [r5, #0]
 80021c0:	f7fe fec2 	bl	8000f48 <_sbrk>
 80021c4:	1c43      	adds	r3, r0, #1
 80021c6:	d102      	bne.n	80021ce <_sbrk_r+0x1a>
 80021c8:	682b      	ldr	r3, [r5, #0]
 80021ca:	b103      	cbz	r3, 80021ce <_sbrk_r+0x1a>
 80021cc:	6023      	str	r3, [r4, #0]
 80021ce:	bd38      	pop	{r3, r4, r5, pc}
 80021d0:	200002ec 	.word	0x200002ec

080021d4 <_init>:
 80021d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021d6:	bf00      	nop
 80021d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021da:	bc08      	pop	{r3}
 80021dc:	469e      	mov	lr, r3
 80021de:	4770      	bx	lr

080021e0 <_fini>:
 80021e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021e2:	bf00      	nop
 80021e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021e6:	bc08      	pop	{r3}
 80021e8:	469e      	mov	lr, r3
 80021ea:	4770      	bx	lr
