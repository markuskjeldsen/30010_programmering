
BaseProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002220  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080023a8  080023a8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080023a8  080023a8  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  080023a8  080023a8  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  080023a8  080023a8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023a8  080023a8  000123a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023ac  080023ac  000123ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080023b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  20000088  08002438  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  08002438  000202fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000065eb  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001425  00000000  00000000  000266e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007d0  00000000  00000000  00027b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005b4  00000000  00000000  000282e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000102bf  00000000  00000000  00028894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007364  00000000  00000000  00038b53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005b1bb  00000000  00000000  0003feb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000027c8  00000000  00000000  0009b074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0009d83c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000088 	.word	0x20000088
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002390 	.word	0x08002390

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000008c 	.word	0x2000008c
 80001c4:	08002390 	.word	0x08002390

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <ADC_StartConversion>:
  * @brief  Enables or disables the selected ADC start conversion .
  * @param  ADCx: where x can be 1, 2, 3 or 4 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartConversion(ADC_TypeDef* ADCx)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADSTART bit */
  ADCx->CR |= ADC_CR_ADSTART;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	689b      	ldr	r3, [r3, #8]
 80009b0:	f043 0204 	orr.w	r2, r3, #4
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	609a      	str	r2, [r3, #8]
}
 80009b8:	bf00      	nop
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <GPIO_PinAFConfig>:
  *        for the detailed mapping of the system and peripherals alternate 
  *        function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	460b      	mov	r3, r1
 80009ce:	807b      	strh	r3, [r7, #2]
 80009d0:	4613      	mov	r3, r2
 80009d2:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80009d8:	2300      	movs	r3, #0
 80009da:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80009dc:	787a      	ldrb	r2, [r7, #1]
 80009de:	887b      	ldrh	r3, [r7, #2]
 80009e0:	f003 0307 	and.w	r3, r3, #7
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ea:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80009ec:	887b      	ldrh	r3, [r7, #2]
 80009ee:	08db      	lsrs	r3, r3, #3
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	461a      	mov	r2, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3208      	adds	r2, #8
 80009f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80009fc:	887b      	ldrh	r3, [r7, #2]
 80009fe:	f003 0307 	and.w	r3, r3, #7
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	210f      	movs	r1, #15
 8000a06:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0a:	43db      	mvns	r3, r3
 8000a0c:	8879      	ldrh	r1, [r7, #2]
 8000a0e:	08c9      	lsrs	r1, r1, #3
 8000a10:	b289      	uxth	r1, r1
 8000a12:	4608      	mov	r0, r1
 8000a14:	ea02 0103 	and.w	r1, r2, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f100 0208 	add.w	r2, r0, #8
 8000a1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000a22:	887b      	ldrh	r3, [r7, #2]
 8000a24:	08db      	lsrs	r3, r3, #3
 8000a26:	b29b      	uxth	r3, r3
 8000a28:	461a      	mov	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	3208      	adds	r2, #8
 8000a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a32:	68fa      	ldr	r2, [r7, #12]
 8000a34:	4313      	orrs	r3, r2
 8000a36:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000a38:	887b      	ldrh	r3, [r7, #2]
 8000a3a:	08db      	lsrs	r3, r3, #3
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	461a      	mov	r2, r3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	3208      	adds	r2, #8
 8000a44:	68b9      	ldr	r1, [r7, #8]
 8000a46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000a4a:	bf00      	nop
 8000a4c:	3714      	adds	r7, #20
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
	...

08000a58 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b08b      	sub	sp, #44	; 0x2c
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	623b      	str	r3, [r7, #32]
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61bb      	str	r3, [r7, #24]
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	2300      	movs	r3, #0
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	2300      	movs	r3, #0
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000a80:	4b8b      	ldr	r3, [pc, #556]	; (8000cb0 <RCC_GetClocksFreq+0x258>)
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f003 030c 	and.w	r3, r3, #12
 8000a88:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 8000a8a:	6a3b      	ldr	r3, [r7, #32]
 8000a8c:	2b08      	cmp	r3, #8
 8000a8e:	d011      	beq.n	8000ab4 <RCC_GetClocksFreq+0x5c>
 8000a90:	6a3b      	ldr	r3, [r7, #32]
 8000a92:	2b08      	cmp	r3, #8
 8000a94:	d837      	bhi.n	8000b06 <RCC_GetClocksFreq+0xae>
 8000a96:	6a3b      	ldr	r3, [r7, #32]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d003      	beq.n	8000aa4 <RCC_GetClocksFreq+0x4c>
 8000a9c:	6a3b      	ldr	r3, [r7, #32]
 8000a9e:	2b04      	cmp	r3, #4
 8000aa0:	d004      	beq.n	8000aac <RCC_GetClocksFreq+0x54>
 8000aa2:	e030      	b.n	8000b06 <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4a83      	ldr	r2, [pc, #524]	; (8000cb4 <RCC_GetClocksFreq+0x25c>)
 8000aa8:	601a      	str	r2, [r3, #0]
      break;
 8000aaa:	e030      	b.n	8000b0e <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4a81      	ldr	r2, [pc, #516]	; (8000cb4 <RCC_GetClocksFreq+0x25c>)
 8000ab0:	601a      	str	r2, [r3, #0]
      break;
 8000ab2:	e02c      	b.n	8000b0e <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000ab4:	4b7e      	ldr	r3, [pc, #504]	; (8000cb0 <RCC_GetClocksFreq+0x258>)
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000abc:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000abe:	4b7c      	ldr	r3, [pc, #496]	; (8000cb0 <RCC_GetClocksFreq+0x258>)
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ac6:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 8000ac8:	69fb      	ldr	r3, [r7, #28]
 8000aca:	0c9b      	lsrs	r3, r3, #18
 8000acc:	3302      	adds	r3, #2
 8000ace:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d105      	bne.n	8000ae2 <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	4a77      	ldr	r2, [pc, #476]	; (8000cb8 <RCC_GetClocksFreq+0x260>)
 8000ada:	fb02 f303 	mul.w	r3, r2, r3
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
 8000ae0:	e00d      	b.n	8000afe <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000ae2:	4b73      	ldr	r3, [pc, #460]	; (8000cb0 <RCC_GetClocksFreq+0x258>)
 8000ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ae6:	f003 030f 	and.w	r3, r3, #15
 8000aea:	3301      	adds	r3, #1
 8000aec:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8000aee:	4a71      	ldr	r2, [pc, #452]	; (8000cb4 <RCC_GetClocksFreq+0x25c>)
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	fbb2 f2f3 	udiv	r2, r2, r3
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	fb02 f303 	mul.w	r3, r2, r3
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b02:	601a      	str	r2, [r3, #0]
      break;
 8000b04:	e003      	b.n	8000b0e <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4a6a      	ldr	r2, [pc, #424]	; (8000cb4 <RCC_GetClocksFreq+0x25c>)
 8000b0a:	601a      	str	r2, [r3, #0]
      break;
 8000b0c:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000b0e:	4b68      	ldr	r3, [pc, #416]	; (8000cb0 <RCC_GetClocksFreq+0x258>)
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000b16:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000b18:	6a3b      	ldr	r3, [r7, #32]
 8000b1a:	091b      	lsrs	r3, r3, #4
 8000b1c:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 8000b1e:	4a67      	ldr	r2, [pc, #412]	; (8000cbc <RCC_GetClocksFreq+0x264>)
 8000b20:	6a3b      	ldr	r3, [r7, #32]
 8000b22:	4413      	add	r3, r2
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	40da      	lsrs	r2, r3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000b36:	4b5e      	ldr	r3, [pc, #376]	; (8000cb0 <RCC_GetClocksFreq+0x258>)
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000b3e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8000b40:	6a3b      	ldr	r3, [r7, #32]
 8000b42:	0a1b      	lsrs	r3, r3, #8
 8000b44:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000b46:	4a5d      	ldr	r2, [pc, #372]	; (8000cbc <RCC_GetClocksFreq+0x264>)
 8000b48:	6a3b      	ldr	r3, [r7, #32]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	685a      	ldr	r2, [r3, #4]
 8000b56:	693b      	ldr	r3, [r7, #16]
 8000b58:	40da      	lsrs	r2, r3
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000b5e:	4b54      	ldr	r3, [pc, #336]	; (8000cb0 <RCC_GetClocksFreq+0x258>)
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000b66:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8000b68:	6a3b      	ldr	r3, [r7, #32]
 8000b6a:	0adb      	lsrs	r3, r3, #11
 8000b6c:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 8000b6e:	4a53      	ldr	r2, [pc, #332]	; (8000cbc <RCC_GetClocksFreq+0x264>)
 8000b70:	6a3b      	ldr	r3, [r7, #32]
 8000b72:	4413      	add	r3, r2
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	685a      	ldr	r2, [r3, #4]
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	40da      	lsrs	r2, r3
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 8000b86:	4b4a      	ldr	r3, [pc, #296]	; (8000cb0 <RCC_GetClocksFreq+0x258>)
 8000b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b8a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000b8e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000b90:	6a3b      	ldr	r3, [r7, #32]
 8000b92:	091b      	lsrs	r3, r3, #4
 8000b94:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000b96:	4a4a      	ldr	r2, [pc, #296]	; (8000cc0 <RCC_GetClocksFreq+0x268>)
 8000b98:	6a3b      	ldr	r3, [r7, #32]
 8000b9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	f003 0310 	and.w	r3, r3, #16
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d006      	beq.n	8000bba <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 8000bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	611a      	str	r2, [r3, #16]
 8000bb8:	e003      	b.n	8000bc2 <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 8000bc2:	4b3b      	ldr	r3, [pc, #236]	; (8000cb0 <RCC_GetClocksFreq+0x258>)
 8000bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bc6:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8000bca:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 8000bcc:	6a3b      	ldr	r3, [r7, #32]
 8000bce:	0a5b      	lsrs	r3, r3, #9
 8000bd0:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8000bd2:	4a3b      	ldr	r2, [pc, #236]	; (8000cc0 <RCC_GetClocksFreq+0x268>)
 8000bd4:	6a3b      	ldr	r3, [r7, #32]
 8000bd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	f003 0310 	and.w	r3, r3, #16
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d006      	beq.n	8000bf6 <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8000be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	fbb2 f2f3 	udiv	r2, r2, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	615a      	str	r2, [r3, #20]
 8000bf4:	e003      	b.n	8000bfe <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000bfe:	4b2c      	ldr	r3, [pc, #176]	; (8000cb0 <RCC_GetClocksFreq+0x258>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0310 	and.w	r3, r3, #16
 8000c06:	2b10      	cmp	r3, #16
 8000c08:	d003      	beq.n	8000c12 <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4a29      	ldr	r2, [pc, #164]	; (8000cb4 <RCC_GetClocksFreq+0x25c>)
 8000c0e:	619a      	str	r2, [r3, #24]
 8000c10:	e003      	b.n	8000c1a <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 8000c1a:	4b25      	ldr	r3, [pc, #148]	; (8000cb0 <RCC_GetClocksFreq+0x258>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0320 	and.w	r3, r3, #32
 8000c22:	2b20      	cmp	r3, #32
 8000c24:	d003      	beq.n	8000c2e <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4a22      	ldr	r2, [pc, #136]	; (8000cb4 <RCC_GetClocksFreq+0x25c>)
 8000c2a:	61da      	str	r2, [r3, #28]
 8000c2c:	e003      	b.n	8000c36 <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000c36:	4b1e      	ldr	r3, [pc, #120]	; (8000cb0 <RCC_GetClocksFreq+0x258>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c42:	d10d      	bne.n	8000c60 <RCC_GetClocksFreq+0x208>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d108      	bne.n	8000c60 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 8000c4e:	68fa      	ldr	r2, [r7, #12]
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	429a      	cmp	r2, r3
 8000c54:	d104      	bne.n	8000c60 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 8000c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c58:	005a      	lsls	r2, r3, #1
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	621a      	str	r2, [r3, #32]
 8000c5e:	e003      	b.n	8000c68 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	68da      	ldr	r2, [r3, #12]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000c68:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <RCC_GetClocksFreq+0x258>)
 8000c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c74:	d10d      	bne.n	8000c92 <RCC_GetClocksFreq+0x23a>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d108      	bne.n	8000c92 <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 8000c80:	68fa      	ldr	r2, [r7, #12]
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d104      	bne.n	8000c92 <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 8000c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8a:	005a      	lsls	r2, r3, #1
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	625a      	str	r2, [r3, #36]	; 0x24
 8000c90:	e003      	b.n	8000c9a <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	68da      	ldr	r2, [r3, #12]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8000c9a:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <RCC_GetClocksFreq+0x258>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0303 	and.w	r3, r3, #3
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d10e      	bne.n	8000cc4 <RCC_GetClocksFreq+0x26c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	68da      	ldr	r2, [r3, #12]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	629a      	str	r2, [r3, #40]	; 0x28
 8000cae:	e028      	b.n	8000d02 <RCC_GetClocksFreq+0x2aa>
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	007a1200 	.word	0x007a1200
 8000cb8:	003d0900 	.word	0x003d0900
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8000cc4:	4b6c      	ldr	r3, [pc, #432]	; (8000e78 <RCC_GetClocksFreq+0x420>)
 8000cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc8:	f003 0303 	and.w	r3, r3, #3
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d104      	bne.n	8000cda <RCC_GetClocksFreq+0x282>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	629a      	str	r2, [r3, #40]	; 0x28
 8000cd8:	e013      	b.n	8000d02 <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8000cda:	4b67      	ldr	r3, [pc, #412]	; (8000e78 <RCC_GetClocksFreq+0x420>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0303 	and.w	r3, r3, #3
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d104      	bne.n	8000cf0 <RCC_GetClocksFreq+0x298>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000cec:	629a      	str	r2, [r3, #40]	; 0x28
 8000cee:	e008      	b.n	8000d02 <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8000cf0:	4b61      	ldr	r3, [pc, #388]	; (8000e78 <RCC_GetClocksFreq+0x420>)
 8000cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf4:	f003 0303 	and.w	r3, r3, #3
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d102      	bne.n	8000d02 <RCC_GetClocksFreq+0x2aa>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4a5f      	ldr	r2, [pc, #380]	; (8000e7c <RCC_GetClocksFreq+0x424>)
 8000d00:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 8000d02:	4b5d      	ldr	r3, [pc, #372]	; (8000e78 <RCC_GetClocksFreq+0x420>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d104      	bne.n	8000d18 <RCC_GetClocksFreq+0x2c0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	689a      	ldr	r2, [r3, #8]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d16:	e021      	b.n	8000d5c <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8000d18:	4b57      	ldr	r3, [pc, #348]	; (8000e78 <RCC_GetClocksFreq+0x420>)
 8000d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d24:	d104      	bne.n	8000d30 <RCC_GetClocksFreq+0x2d8>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d2e:	e015      	b.n	8000d5c <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 8000d30:	4b51      	ldr	r3, [pc, #324]	; (8000e78 <RCC_GetClocksFreq+0x420>)
 8000d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000d3c:	d104      	bne.n	8000d48 <RCC_GetClocksFreq+0x2f0>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d44:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d46:	e009      	b.n	8000d5c <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8000d48:	4b4b      	ldr	r3, [pc, #300]	; (8000e78 <RCC_GetClocksFreq+0x420>)
 8000d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d50:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000d54:	d102      	bne.n	8000d5c <RCC_GetClocksFreq+0x304>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a48      	ldr	r2, [pc, #288]	; (8000e7c <RCC_GetClocksFreq+0x424>)
 8000d5a:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8000d5c:	4b46      	ldr	r3, [pc, #280]	; (8000e78 <RCC_GetClocksFreq+0x420>)
 8000d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d60:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d104      	bne.n	8000d72 <RCC_GetClocksFreq+0x31a>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	689a      	ldr	r2, [r3, #8]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	631a      	str	r2, [r3, #48]	; 0x30
 8000d70:	e021      	b.n	8000db6 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 8000d72:	4b41      	ldr	r3, [pc, #260]	; (8000e78 <RCC_GetClocksFreq+0x420>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000d7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000d7e:	d104      	bne.n	8000d8a <RCC_GetClocksFreq+0x332>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	631a      	str	r2, [r3, #48]	; 0x30
 8000d88:	e015      	b.n	8000db6 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 8000d8a:	4b3b      	ldr	r3, [pc, #236]	; (8000e78 <RCC_GetClocksFreq+0x420>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000d92:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000d96:	d104      	bne.n	8000da2 <RCC_GetClocksFreq+0x34a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d9e:	631a      	str	r2, [r3, #48]	; 0x30
 8000da0:	e009      	b.n	8000db6 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 8000da2:	4b35      	ldr	r3, [pc, #212]	; (8000e78 <RCC_GetClocksFreq+0x420>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000daa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000dae:	d102      	bne.n	8000db6 <RCC_GetClocksFreq+0x35e>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4a32      	ldr	r2, [pc, #200]	; (8000e7c <RCC_GetClocksFreq+0x424>)
 8000db4:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 8000db6:	4b30      	ldr	r3, [pc, #192]	; (8000e78 <RCC_GetClocksFreq+0x420>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d104      	bne.n	8000dcc <RCC_GetClocksFreq+0x374>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	689a      	ldr	r2, [r3, #8]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	635a      	str	r2, [r3, #52]	; 0x34
 8000dca:	e021      	b.n	8000e10 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 8000dcc:	4b2a      	ldr	r3, [pc, #168]	; (8000e78 <RCC_GetClocksFreq+0x420>)
 8000dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000dd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000dd8:	d104      	bne.n	8000de4 <RCC_GetClocksFreq+0x38c>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	635a      	str	r2, [r3, #52]	; 0x34
 8000de2:	e015      	b.n	8000e10 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 8000de4:	4b24      	ldr	r3, [pc, #144]	; (8000e78 <RCC_GetClocksFreq+0x420>)
 8000de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000dec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000df0:	d104      	bne.n	8000dfc <RCC_GetClocksFreq+0x3a4>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000df8:	635a      	str	r2, [r3, #52]	; 0x34
 8000dfa:	e009      	b.n	8000e10 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8000dfc:	4b1e      	ldr	r3, [pc, #120]	; (8000e78 <RCC_GetClocksFreq+0x420>)
 8000dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e00:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000e04:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000e08:	d102      	bne.n	8000e10 <RCC_GetClocksFreq+0x3b8>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a1b      	ldr	r2, [pc, #108]	; (8000e7c <RCC_GetClocksFreq+0x424>)
 8000e0e:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 8000e10:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <RCC_GetClocksFreq+0x420>)
 8000e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e14:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d104      	bne.n	8000e26 <RCC_GetClocksFreq+0x3ce>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	689a      	ldr	r2, [r3, #8]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 8000e24:	e021      	b.n	8000e6a <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8000e26:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <RCC_GetClocksFreq+0x420>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000e2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000e32:	d104      	bne.n	8000e3e <RCC_GetClocksFreq+0x3e6>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000e3c:	e015      	b.n	8000e6a <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <RCC_GetClocksFreq+0x420>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000e46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000e4a:	d104      	bne.n	8000e56 <RCC_GetClocksFreq+0x3fe>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e52:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000e54:	e009      	b.n	8000e6a <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8000e56:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <RCC_GetClocksFreq+0x420>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000e5e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8000e62:	d102      	bne.n	8000e6a <RCC_GetClocksFreq+0x412>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a05      	ldr	r2, [pc, #20]	; (8000e7c <RCC_GetClocksFreq+0x424>)
 8000e68:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000e6a:	bf00      	nop
 8000e6c:	372c      	adds	r7, #44	; 0x2c
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	007a1200 	.word	0x007a1200

08000e80 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8000e8c:	887b      	ldrh	r3, [r7, #2]
 8000e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e92:	b29a      	uxth	r2, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b089      	sub	sp, #36	; 0x24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61bb      	str	r3, [r7, #24]
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	0a1b      	lsrs	r3, r3, #8
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d103      	bne.n	8000eee <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	3304      	adds	r3, #4
 8000eea:	61fb      	str	r3, [r7, #28]
 8000eec:	e005      	b.n	8000efa <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	2b03      	cmp	r3, #3
 8000ef2:	d102      	bne.n	8000efa <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	3308      	adds	r3, #8
 8000ef8:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d006      	beq.n	8000f0e <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	6819      	ldr	r1, [r3, #0]
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	430a      	orrs	r2, r1
 8000f0a:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000f0c:	e006      	b.n	8000f1c <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	6819      	ldr	r1, [r3, #0]
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	43da      	mvns	r2, r3
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	400a      	ands	r2, r1
 8000f1a:	601a      	str	r2, [r3, #0]
}
 8000f1c:	bf00      	nop
 8000f1e:	3724      	adds	r7, #36	; 0x24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000f32:	2300      	movs	r3, #0
 8000f34:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	69da      	ldr	r2, [r3, #28]
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d002      	beq.n	8000f48 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 8000f42:	2301      	movs	r3, #1
 8000f44:	73fb      	strb	r3, [r7, #15]
 8000f46:	e001      	b.n	8000f4c <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3714      	adds	r7, #20
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	b087      	sub	sp, #28
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
 8000f62:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000f70:	2300      	movs	r3, #0
 8000f72:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	0a1b      	lsrs	r3, r3, #8
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000f84:	2201      	movs	r2, #1
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d105      	bne.n	8000fa0 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	697a      	ldr	r2, [r7, #20]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	617b      	str	r3, [r7, #20]
 8000f9e:	e00d      	b.n	8000fbc <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d105      	bne.n	8000fb2 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	697a      	ldr	r2, [r7, #20]
 8000fac:	4013      	ands	r3, r2
 8000fae:	617b      	str	r3, [r7, #20]
 8000fb0:	e004      	b.n	8000fbc <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	697a      	ldr	r2, [r7, #20]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	0c1b      	lsrs	r3, r3, #16
 8000fc0:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	69db      	ldr	r3, [r3, #28]
 8000fd0:	68fa      	ldr	r2, [r7, #12]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d005      	beq.n	8000fe8 <USART_GetITStatus+0x8e>
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d002      	beq.n	8000fe8 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	74fb      	strb	r3, [r7, #19]
 8000fe6:	e001      	b.n	8000fec <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000fec:	7cfb      	ldrb	r3, [r7, #19]
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	371c      	adds	r7, #28
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
	...

08000ffc <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	f003 031f 	and.w	r3, r3, #31
 800100c:	2201      	movs	r2, #1
 800100e:	fa02 f103 	lsl.w	r1, r2, r3
 8001012:	4a06      	ldr	r2, [pc, #24]	; (800102c <NVIC_EnableIRQ+0x30>)
 8001014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001018:	095b      	lsrs	r3, r3, #5
 800101a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000e100 	.word	0xe000e100

08001030 <uart_put_char>:
        UART_COUNT--;
    }
    return val;
}

void uart_put_char(uint8_t c) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	b29b      	uxth	r3, r3
 800103e:	4619      	mov	r1, r3
 8001040:	4807      	ldr	r0, [pc, #28]	; (8001060 <uart_put_char+0x30>)
 8001042:	f7ff ff1d 	bl	8000e80 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 8001046:	bf00      	nop
 8001048:	2180      	movs	r1, #128	; 0x80
 800104a:	4805      	ldr	r0, [pc, #20]	; (8001060 <uart_put_char+0x30>)
 800104c:	f7ff ff6c 	bl	8000f28 <USART_GetFlagStatus>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d0f8      	beq.n	8001048 <uart_put_char+0x18>
}
 8001056:	bf00      	nop
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40004400 	.word	0x40004400

08001064 <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
 8001070:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
 8001076:	e012      	b.n	800109e <_write_r+0x3a>
        if (ptr[n] == '\n') {
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	4413      	add	r3, r2
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b0a      	cmp	r3, #10
 8001082:	d102      	bne.n	800108a <_write_r+0x26>
            uart_put_char('\r');
 8001084:	200d      	movs	r0, #13
 8001086:	f7ff ffd3 	bl	8001030 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	4413      	add	r3, r2
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff ffcc 	bl	8001030 <uart_put_char>
    for (n = 0; n < len; n++) {
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	3301      	adds	r3, #1
 800109c:	617b      	str	r3, [r7, #20]
 800109e:	697a      	ldr	r2, [r7, #20]
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	dbe8      	blt.n	8001078 <_write_r+0x14>
    }

    return len;
 80010a6:	683b      	ldr	r3, [r7, #0]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3718      	adds	r7, #24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 80010b4:	4915      	ldr	r1, [pc, #84]	; (800110c <USART2_IRQHandler+0x5c>)
 80010b6:	4816      	ldr	r0, [pc, #88]	; (8001110 <USART2_IRQHandler+0x60>)
 80010b8:	f7ff ff4f 	bl	8000f5a <USART_GetITStatus>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d021      	beq.n	8001106 <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 80010c2:	4b13      	ldr	r3, [pc, #76]	; (8001110 <USART2_IRQHandler+0x60>)
 80010c4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80010c6:	b299      	uxth	r1, r3
 80010c8:	4b12      	ldr	r3, [pc, #72]	; (8001114 <USART2_IRQHandler+0x64>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	1c5a      	adds	r2, r3, #1
 80010d0:	b2d0      	uxtb	r0, r2
 80010d2:	4a10      	ldr	r2, [pc, #64]	; (8001114 <USART2_IRQHandler+0x64>)
 80010d4:	7010      	strb	r0, [r2, #0]
 80010d6:	461a      	mov	r2, r3
 80010d8:	b2c9      	uxtb	r1, r1
 80010da:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <USART2_IRQHandler+0x68>)
 80010dc:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <USART2_IRQHandler+0x6c>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2bff      	cmp	r3, #255	; 0xff
 80010e6:	d107      	bne.n	80010f8 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 80010e8:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <USART2_IRQHandler+0x70>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	3301      	adds	r3, #1
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <USART2_IRQHandler+0x70>)
 80010f4:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 80010f6:	e006      	b.n	8001106 <USART2_IRQHandler+0x56>
            UART_COUNT++;
 80010f8:	4b08      	ldr	r3, [pc, #32]	; (800111c <USART2_IRQHandler+0x6c>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	3301      	adds	r3, #1
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <USART2_IRQHandler+0x6c>)
 8001104:	701a      	strb	r2, [r3, #0]
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	00050105 	.word	0x00050105
 8001110:	40004400 	.word	0x40004400
 8001114:	200001a4 	.word	0x200001a4
 8001118:	200000a4 	.word	0x200000a4
 800111c:	200001a6 	.word	0x200001a6
 8001120:	200001a5 	.word	0x200001a5

08001124 <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b094      	sub	sp, #80	; 0x50
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 800112c:	4b86      	ldr	r3, [pc, #536]	; (8001348 <uart_init+0x224>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	2100      	movs	r1, #0
 8001134:	4618      	mov	r0, r3
 8001136:	f000 fdd1 	bl	8001cdc <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 800113a:	4b83      	ldr	r3, [pc, #524]	; (8001348 <uart_init+0x224>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	2100      	movs	r1, #0
 8001142:	4618      	mov	r0, r3
 8001144:	f000 fdca 	bl	8001cdc <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 8001148:	4b80      	ldr	r3, [pc, #512]	; (800134c <uart_init+0x228>)
 800114a:	695b      	ldr	r3, [r3, #20]
 800114c:	4a7f      	ldr	r2, [pc, #508]	; (800134c <uart_init+0x228>)
 800114e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001152:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 8001154:	4b7d      	ldr	r3, [pc, #500]	; (800134c <uart_init+0x228>)
 8001156:	69db      	ldr	r3, [r3, #28]
 8001158:	4a7c      	ldr	r2, [pc, #496]	; (800134c <uart_init+0x228>)
 800115a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800115e:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8001160:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001164:	6a1b      	ldr	r3, [r3, #32]
 8001166:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800116a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800116e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8001170:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001174:	6a1b      	ldr	r3, [r3, #32]
 8001176:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800117a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800117e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8001180:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001184:	6a1b      	ldr	r3, [r3, #32]
 8001186:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800118a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800118e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8001190:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001194:	6a1b      	ldr	r3, [r3, #32]
 8001196:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800119a:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800119e:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 80011a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80011aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80011ae:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 80011b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80011ba:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80011be:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 80011c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011c4:	889b      	ldrh	r3, [r3, #4]
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80011cc:	f023 030c 	bic.w	r3, r3, #12
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 80011d4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80011d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011dc:	8892      	ldrh	r2, [r2, #4]
 80011de:	b292      	uxth	r2, r2
 80011e0:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 80011e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80011ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80011f0:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 80011f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80011fc:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001200:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8001202:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800120c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001210:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8001212:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800121c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8001220:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8001222:	4b4b      	ldr	r3, [pc, #300]	; (8001350 <uart_init+0x22c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a4a      	ldr	r2, [pc, #296]	; (8001350 <uart_init+0x22c>)
 8001228:	f023 0301 	bic.w	r3, r3, #1
 800122c:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 800122e:	4b48      	ldr	r3, [pc, #288]	; (8001350 <uart_init+0x22c>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	4a47      	ldr	r2, [pc, #284]	; (8001350 <uart_init+0x22c>)
 8001234:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001238:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 800123a:	4b45      	ldr	r3, [pc, #276]	; (8001350 <uart_init+0x22c>)
 800123c:	4a44      	ldr	r2, [pc, #272]	; (8001350 <uart_init+0x22c>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8001242:	4b43      	ldr	r3, [pc, #268]	; (8001350 <uart_init+0x22c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a42      	ldr	r2, [pc, #264]	; (8001350 <uart_init+0x22c>)
 8001248:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800124c:	f023 030c 	bic.w	r3, r3, #12
 8001250:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8001252:	4b3f      	ldr	r3, [pc, #252]	; (8001350 <uart_init+0x22c>)
 8001254:	4a3e      	ldr	r2, [pc, #248]	; (8001350 <uart_init+0x22c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 800125a:	4b3d      	ldr	r3, [pc, #244]	; (8001350 <uart_init+0x22c>)
 800125c:	4a3c      	ldr	r2, [pc, #240]	; (8001350 <uart_init+0x22c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8001262:	4b3b      	ldr	r3, [pc, #236]	; (8001350 <uart_init+0x22c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a3a      	ldr	r2, [pc, #232]	; (8001350 <uart_init+0x22c>)
 8001268:	f043 030c 	orr.w	r3, r3, #12
 800126c:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 800126e:	4b38      	ldr	r3, [pc, #224]	; (8001350 <uart_init+0x22c>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	4a37      	ldr	r2, [pc, #220]	; (8001350 <uart_init+0x22c>)
 8001274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001278:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 800127a:	4b35      	ldr	r3, [pc, #212]	; (8001350 <uart_init+0x22c>)
 800127c:	4a34      	ldr	r2, [pc, #208]	; (8001350 <uart_init+0x22c>)
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001286:	2300      	movs	r3, #0
 8001288:	647b      	str	r3, [r7, #68]	; 0x44
 800128a:	2300      	movs	r3, #0
 800128c:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 800128e:	f107 0308 	add.w	r3, r7, #8
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff fbe0 	bl	8000a58 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8001298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800129a:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 800129c:	4b2c      	ldr	r3, [pc, #176]	; (8001350 <uart_init+0x22c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d010      	beq.n	80012ca <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 80012a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012aa:	005a      	lsls	r2, r3, #1
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 80012b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	fb01 f202 	mul.w	r2, r1, r2
 80012c4:	1a9b      	subs	r3, r3, r2
 80012c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80012c8:	e00d      	b.n	80012e6 <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 80012ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 80012d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	fbb3 f2f2 	udiv	r2, r3, r2
 80012dc:	6879      	ldr	r1, [r7, #4]
 80012de:	fb01 f202 	mul.w	r2, r1, r2
 80012e2:	1a9b      	subs	r3, r3, r2
 80012e4:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	085b      	lsrs	r3, r3, #1
 80012ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d302      	bcc.n	80012f6 <uart_init+0x1d2>
        divider++;
 80012f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012f2:	3301      	adds	r3, #1
 80012f4:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 80012f6:	4b16      	ldr	r3, [pc, #88]	; (8001350 <uart_init+0x22c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d00b      	beq.n	800131a <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8001302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001304:	085b      	lsrs	r3, r3, #1
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 800130c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800130e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8001312:	4013      	ands	r3, r2
 8001314:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001316:	4313      	orrs	r3, r2
 8001318:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 800131a:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <uart_init+0x22c>)
 800131c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800131e:	b292      	uxth	r2, r2
 8001320:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8001322:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <uart_init+0x22c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a0a      	ldr	r2, [pc, #40]	; (8001350 <uart_init+0x22c>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 800132e:	2201      	movs	r2, #1
 8001330:	4908      	ldr	r1, [pc, #32]	; (8001354 <uart_init+0x230>)
 8001332:	4807      	ldr	r0, [pc, #28]	; (8001350 <uart_init+0x22c>)
 8001334:	f7ff fdb6 	bl	8000ea4 <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8001338:	2026      	movs	r0, #38	; 0x26
 800133a:	f7ff fe5f 	bl	8000ffc <NVIC_EnableIRQ>
}
 800133e:	bf00      	nop
 8001340:	3750      	adds	r7, #80	; 0x50
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000084 	.word	0x20000084
 800134c:	40021000 	.word	0x40021000
 8001350:	40004400 	.word	0x40004400
 8001354:	00050105 	.word	0x00050105

08001358 <TIM1_BRK_TIM15_IRQHandler>:
#include "project9.h"

int counter = 0;


void TIM1_BRK_TIM15_IRQHandler(void){
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
	TIM15->SR &= ~(0x0001);
 800135c:	4b07      	ldr	r3, [pc, #28]	; (800137c <TIM1_BRK_TIM15_IRQHandler+0x24>)
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	4a06      	ldr	r2, [pc, #24]	; (800137c <TIM1_BRK_TIM15_IRQHandler+0x24>)
 8001362:	f023 0301 	bic.w	r3, r3, #1
 8001366:	6113      	str	r3, [r2, #16]
	counter++;
 8001368:	4b05      	ldr	r3, [pc, #20]	; (8001380 <TIM1_BRK_TIM15_IRQHandler+0x28>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	3301      	adds	r3, #1
 800136e:	4a04      	ldr	r2, [pc, #16]	; (8001380 <TIM1_BRK_TIM15_IRQHandler+0x28>)
 8001370:	6013      	str	r3, [r2, #0]

}
 8001372:	bf00      	nop
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	40014000 	.word	0x40014000
 8001380:	200001a8 	.word	0x200001a8

08001384 <main>:




int main(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0

	// Setup communication with the PC
	uart_init(115200);
 800138a:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 800138e:	f7ff fec9 	bl	8001124 <uart_init>

	timesetup();
 8001392:	f000 fb6b 	bl	8001a6c <timesetup>
	uint16_t data;
	uint16_t data1;
	ADCsetup();
 8001396:	f000 f86d 	bl	8001474 <ADCsetup>
	speakerSetup();
 800139a:	f000 f91b 	bl	80015d4 <speakerSetup>



	setFreq(50);
 800139e:	2032      	movs	r0, #50	; 0x32
 80013a0:	f000 f9d2 	bl	8001748 <setFreq>



	setFreq(30);
 80013a4:	201e      	movs	r0, #30
 80013a6:	f000 f9cf 	bl	8001748 <setFreq>
	int diff = 15;
 80013aa:	230f      	movs	r3, #15
 80013ac:	607b      	str	r3, [r7, #4]

			setFreq(data1);
			previous = data1;
		}
*/
		setFreq(293);
 80013ae:	f240 1025 	movw	r0, #293	; 0x125
 80013b2:	f000 f9c9 	bl	8001748 <setFreq>
		wait(50);
 80013b6:	2032      	movs	r0, #50	; 0x32
 80013b8:	f000 fb8c 	bl	8001ad4 <wait>
		setFreq(440);
 80013bc:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 80013c0:	f000 f9c2 	bl	8001748 <setFreq>
		wait(50);
 80013c4:	2032      	movs	r0, #50	; 0x32
 80013c6:	f000 fb85 	bl	8001ad4 <wait>
		setFreq(587);
 80013ca:	f240 204b 	movw	r0, #587	; 0x24b
 80013ce:	f000 f9bb 	bl	8001748 <setFreq>
		wait(100);
 80013d2:	2064      	movs	r0, #100	; 0x64
 80013d4:	f000 fb7e 	bl	8001ad4 <wait>
		setFreq(293);
 80013d8:	f240 1025 	movw	r0, #293	; 0x125
 80013dc:	f000 f9b4 	bl	8001748 <setFreq>
		wait(50);
 80013e0:	2032      	movs	r0, #50	; 0x32
 80013e2:	f000 fb77 	bl	8001ad4 <wait>
		setFreq(440);
 80013e6:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 80013ea:	f000 f9ad 	bl	8001748 <setFreq>
		wait(50);
 80013ee:	2032      	movs	r0, #50	; 0x32
 80013f0:	f000 fb70 	bl	8001ad4 <wait>
		setFreq(587);
 80013f4:	f240 204b 	movw	r0, #587	; 0x24b
 80013f8:	f000 f9a6 	bl	8001748 <setFreq>
		wait(100);
 80013fc:	2064      	movs	r0, #100	; 0x64
 80013fe:	f000 fb69 	bl	8001ad4 <wait>


		setFreq(659);
 8001402:	f240 2093 	movw	r0, #659	; 0x293
 8001406:	f000 f99f 	bl	8001748 <setFreq>
		wait(30);
 800140a:	201e      	movs	r0, #30
 800140c:	f000 fb62 	bl	8001ad4 <wait>
		setFreq(698);
 8001410:	f240 20ba 	movw	r0, #698	; 0x2ba
 8001414:	f000 f998 	bl	8001748 <setFreq>
		wait(20);
 8001418:	2014      	movs	r0, #20
 800141a:	f000 fb5b 	bl	8001ad4 <wait>
		setFreq(659);
 800141e:	f240 2093 	movw	r0, #659	; 0x293
 8001422:	f000 f991 	bl	8001748 <setFreq>
		wait(20);
 8001426:	2014      	movs	r0, #20
 8001428:	f000 fb54 	bl	8001ad4 <wait>
		setFreq(698);
 800142c:	f240 20ba 	movw	r0, #698	; 0x2ba
 8001430:	f000 f98a 	bl	8001748 <setFreq>
		wait(20);
 8001434:	2014      	movs	r0, #20
 8001436:	f000 fb4d 	bl	8001ad4 <wait>
		setFreq(659);
 800143a:	f240 2093 	movw	r0, #659	; 0x293
 800143e:	f000 f983 	bl	8001748 <setFreq>
		wait(20);
 8001442:	2014      	movs	r0, #20
 8001444:	f000 fb46 	bl	8001ad4 <wait>
		setFreq(523);
 8001448:	f240 200b 	movw	r0, #523	; 0x20b
 800144c:	f000 f97c 	bl	8001748 <setFreq>
		wait(40);
 8001450:	2028      	movs	r0, #40	; 0x28
 8001452:	f000 fb3f 	bl	8001ad4 <wait>
		setFreq(440);
 8001456:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 800145a:	f000 f975 	bl	8001748 <setFreq>
		wait(60);
 800145e:	203c      	movs	r0, #60	; 0x3c
 8001460:	f000 fb38 	bl	8001ad4 <wait>

		setFreq(0);
 8001464:	2000      	movs	r0, #0
 8001466:	f000 f96f 	bl	8001748 <setFreq>
		wait(1000);
 800146a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800146e:	f000 fb31 	bl	8001ad4 <wait>
	while (1) {
 8001472:	e79c      	b.n	80013ae <main+0x2a>

08001474 <ADCsetup>:
#include "stm32f30x.h"




void ADCsetup(){
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0

RCC->AHBENR |= RCC_AHBPeriph_GPIOA; // Enable clock for GPIO Port A
 800147a:	4b54      	ldr	r3, [pc, #336]	; (80015cc <ADCsetup+0x158>)
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	4a53      	ldr	r2, [pc, #332]	; (80015cc <ADCsetup+0x158>)
 8001480:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001484:	6153      	str	r3, [r2, #20]


// Set pin PA0 to input
GPIOA->MODER &= ~(0x00000003 << (0 * 2)); // Clear mode register
 8001486:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001490:	f023 0303 	bic.w	r3, r3, #3
 8001494:	6013      	str	r3, [r2, #0]
GPIOA->MODER |= (0x00000002 << (0 * 2)); // Set mode register (0x00 –Input, 0x01 - Output, 0x02 -Alternate Function, 0x03 - Analog in/out)
 8001496:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80014a0:	f043 0302 	orr.w	r3, r3, #2
 80014a4:	6013      	str	r3, [r2, #0]
GPIOA->PUPDR &= ~(0x00000003 << (0 * 2)); // Clear push/pull register
 80014a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80014b0:	f023 0303 	bic.w	r3, r3, #3
 80014b4:	60d3      	str	r3, [r2, #12]
GPIOA->PUPDR |= (0x00000000 << (0 * 2)); // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 80014b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80014ba:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	60d3      	str	r3, [r2, #12]

// Set pin PA1 to input
GPIOA->MODER &= ~(0x00000003 << (1 * 2)); // Clear mode register
 80014c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80014cc:	f023 030c 	bic.w	r3, r3, #12
 80014d0:	6013      	str	r3, [r2, #0]
GPIOA->MODER |=  (0x00000002 << (1 * 2)); // Set mode register (0x00 –Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 80014d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80014dc:	f043 0308 	orr.w	r3, r3, #8
 80014e0:	6013      	str	r3, [r2, #0]
GPIOA->PUPDR &= ~(0x00000003 << (1 * 2)); // Clear push/pull register
 80014e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80014ec:	f023 030c 	bic.w	r3, r3, #12
 80014f0:	60d3      	str	r3, [r2, #12]
GPIOA->PUPDR |=  (0x00000000 << (1 * 2)); // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 80014f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80014f6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	60d3      	str	r3, [r2, #12]

// fix time
RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE12; // Clear ADC12 prescaler bits
 80014fe:	4b33      	ldr	r3, [pc, #204]	; (80015cc <ADCsetup+0x158>)
 8001500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001502:	4a32      	ldr	r2, [pc, #200]	; (80015cc <ADCsetup+0x158>)
 8001504:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8001508:	62d3      	str	r3, [r2, #44]	; 0x2c
RCC->CFGR2 |= RCC_CFGR2_ADCPRE12_DIV6; // Set ADC12 prescaler to 6
 800150a:	4b30      	ldr	r3, [pc, #192]	; (80015cc <ADCsetup+0x158>)
 800150c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150e:	4a2f      	ldr	r2, [pc, #188]	; (80015cc <ADCsetup+0x158>)
 8001510:	f443 7398 	orr.w	r3, r3, #304	; 0x130
 8001514:	62d3      	str	r3, [r2, #44]	; 0x2c
RCC->AHBENR |= RCC_AHBPeriph_ADC12; // Enable clock for ADC12
 8001516:	4b2d      	ldr	r3, [pc, #180]	; (80015cc <ADCsetup+0x158>)
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	4a2c      	ldr	r2, [pc, #176]	; (80015cc <ADCsetup+0x158>)
 800151c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001520:	6153      	str	r3, [r2, #20]


//reset ADC
ADC1->CR = 0x00000000; // Clear CR register
 8001522:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
ADC1->CFGR &= 0xFDFFC007; // Clear ADC1 config register
 800152a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800152e:	68da      	ldr	r2, [r3, #12]
 8001530:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8001534:	4b26      	ldr	r3, [pc, #152]	; (80015d0 <ADCsetup+0x15c>)
 8001536:	4013      	ands	r3, r2
 8001538:	60cb      	str	r3, [r1, #12]
ADC1->SQR1 &= ~ADC_SQR1_L; // Clear regular sequence register 1
 800153a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800153e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001540:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001544:	f023 030f 	bic.w	r3, r3, #15
 8001548:	6313      	str	r3, [r2, #48]	; 0x30

ADC1->CR |= 0x10000000; // Enable internal ADC voltage regulator
 800154a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001558:	6093      	str	r3, [r2, #8]
for (int i = 0 ; i < 1000 ; i++) {} // Wait for about 16 microseconds
 800155a:	2300      	movs	r3, #0
 800155c:	607b      	str	r3, [r7, #4]
 800155e:	e002      	b.n	8001566 <ADCsetup+0xf2>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3301      	adds	r3, #1
 8001564:	607b      	str	r3, [r7, #4]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800156c:	dbf8      	blt.n	8001560 <ADCsetup+0xec>

ADC1->CR |= 0x80000000; // Start ADC1 calibration
 800156e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001578:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800157c:	6093      	str	r3, [r2, #8]
while (!(ADC1->CR & 0x80000000)); // Wait for calibration to finish
 800157e:	bf00      	nop
 8001580:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	2b00      	cmp	r3, #0
 8001588:	dafa      	bge.n	8001580 <ADCsetup+0x10c>
for (int i = 0 ; i < 100 ; i++) {} // Wait for a little while
 800158a:	2300      	movs	r3, #0
 800158c:	603b      	str	r3, [r7, #0]
 800158e:	e002      	b.n	8001596 <ADCsetup+0x122>
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	3301      	adds	r3, #1
 8001594:	603b      	str	r3, [r7, #0]
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	2b63      	cmp	r3, #99	; 0x63
 800159a:	ddf9      	ble.n	8001590 <ADCsetup+0x11c>

ADC1->CR |= 0x00000001; // Enable ADC1 (0x01 - Enable, 0x02 - Disable)
 800159c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80015a6:	f043 0301 	orr.w	r3, r3, #1
 80015aa:	6093      	str	r3, [r2, #8]
while (!(ADC1->ISR & 0x00000001)); // Wait until ready
 80015ac:	bf00      	nop
 80015ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0f8      	beq.n	80015ae <ADCsetup+0x13a>



ADC_StartConversion(ADC1); // Start ADC read
 80015bc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80015c0:	f7ff f9f0 	bl	80009a4 <ADC_StartConversion>

}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40021000 	.word	0x40021000
 80015d0:	fdffc007 	.word	0xfdffc007

080015d4 <speakerSetup>:

#define PRESCALE 0x0010
#define RELOAD 0x0010


void speakerSetup(){
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0

//configure timer2
RCC->APB1ENR |= RCC_APB1Periph_TIM2; // Enable clock line to timer 2;
 80015da:	4b59      	ldr	r3, [pc, #356]	; (8001740 <speakerSetup+0x16c>)
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	4a58      	ldr	r2, [pc, #352]	; (8001740 <speakerSetup+0x16c>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	61d3      	str	r3, [r2, #28]
TIM2->CR1 = TIM2->CR1 & ~(0x0003 << 5 ); // edge aligned mode
 80015e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015ea:	881b      	ldrh	r3, [r3, #0]
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015f2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	8013      	strh	r3, [r2, #0]

TIM2->ARR = RELOAD; // Set reload value to 16
 80015fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015fe:	2210      	movs	r2, #16
 8001600:	62da      	str	r2, [r3, #44]	; 0x2c
TIM2->PSC = PRESCALE; // Set prescale value
 8001602:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001606:	2210      	movs	r2, #16
 8001608:	851a      	strh	r2, [r3, #40]	; 0x28

TIM2->CCER &= ~TIM_CCER_CC3P; // Clear CCER register
 800160a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800160e:	6a1b      	ldr	r3, [r3, #32]
 8001610:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001614:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001618:	6213      	str	r3, [r2, #32]
TIM2->CCER |= 0x00000001 << 8; // Enable OC3 output
 800161a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001628:	6213      	str	r3, [r2, #32]
TIM2->CCMR2 &= ~TIM_CCMR2_OC3M; // Clear CCMR2 register
 800162a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800162e:	69db      	ldr	r3, [r3, #28]
 8001630:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001638:	61d3      	str	r3, [r2, #28]
TIM2->CCMR2 &= ~TIM_CCMR2_CC3S;
 800163a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800163e:	69db      	ldr	r3, [r3, #28]
 8001640:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001644:	f023 0303 	bic.w	r3, r3, #3
 8001648:	61d3      	str	r3, [r2, #28]
TIM2->CCMR2 |= TIM_OCMode_PWM1; // Set output mode to PWM1
 800164a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800164e:	69db      	ldr	r3, [r3, #28]
 8001650:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001654:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001658:	61d3      	str	r3, [r2, #28]
TIM2->CCMR2 &= ~TIM_CCMR2_OC3PE;
 800165a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800165e:	69db      	ldr	r3, [r3, #28]
 8001660:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001664:	f023 0308 	bic.w	r3, r3, #8
 8001668:	61d3      	str	r3, [r2, #28]
TIM2->CCMR2 |= TIM_OCPreload_Enable;
 800166a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800166e:	69db      	ldr	r3, [r3, #28]
 8001670:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001674:	f043 0308 	orr.w	r3, r3, #8
 8001678:	61d3      	str	r3, [r2, #28]
TIM2->CCR3 = 0x0010 / 2; // Set duty cycle to 50 %
 800167a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800167e:	2208      	movs	r2, #8
 8001680:	63da      	str	r2, [r3, #60]	; 0x3c
TIM2->CR1 |= 0x0001; //enable timer
 8001682:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	b29b      	uxth	r3, r3
 800168a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	b29b      	uxth	r3, r3
 8001694:	8013      	strh	r3, [r2, #0]


RCC->AHBENR |= RCC_AHBPeriph_GPIOB; // Enable clock for GPIO Port B
 8001696:	4b2a      	ldr	r3, [pc, #168]	; (8001740 <speakerSetup+0x16c>)
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	4a29      	ldr	r2, [pc, #164]	; (8001740 <speakerSetup+0x16c>)
 800169c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016a0:	6153      	str	r3, [r2, #20]

// set PB10 to output
int pin = 10;
 80016a2:	230a      	movs	r3, #10
 80016a4:	607b      	str	r3, [r7, #4]
GPIOB->OSPEEDR &= ~(0x00000003 << (pin * 2)); // Clear speed register
 80016a6:	4b27      	ldr	r3, [pc, #156]	; (8001744 <speakerSetup+0x170>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	0052      	lsls	r2, r2, #1
 80016ae:	2103      	movs	r1, #3
 80016b0:	fa01 f202 	lsl.w	r2, r1, r2
 80016b4:	43d2      	mvns	r2, r2
 80016b6:	4611      	mov	r1, r2
 80016b8:	4a22      	ldr	r2, [pc, #136]	; (8001744 <speakerSetup+0x170>)
 80016ba:	400b      	ands	r3, r1
 80016bc:	6093      	str	r3, [r2, #8]
GPIOB->OSPEEDR |= (0x00000001 << (pin * 2)); // set speed register (0x01 - 10MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 80016be:	4b21      	ldr	r3, [pc, #132]	; (8001744 <speakerSetup+0x170>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	0052      	lsls	r2, r2, #1
 80016c6:	2101      	movs	r1, #1
 80016c8:	fa01 f202 	lsl.w	r2, r1, r2
 80016cc:	4611      	mov	r1, r2
 80016ce:	4a1d      	ldr	r2, [pc, #116]	; (8001744 <speakerSetup+0x170>)
 80016d0:	430b      	orrs	r3, r1
 80016d2:	6093      	str	r3, [r2, #8]
GPIOB->OTYPER &= ~(0x0001 << (pin * 1)); // Clear output type register
 80016d4:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <speakerSetup+0x170>)
 80016d6:	889b      	ldrh	r3, [r3, #4]
 80016d8:	b29b      	uxth	r3, r3
 80016da:	b21a      	sxth	r2, r3
 80016dc:	2101      	movs	r1, #1
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	fa01 f303 	lsl.w	r3, r1, r3
 80016e4:	b21b      	sxth	r3, r3
 80016e6:	43db      	mvns	r3, r3
 80016e8:	b21b      	sxth	r3, r3
 80016ea:	4013      	ands	r3, r2
 80016ec:	b21a      	sxth	r2, r3
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <speakerSetup+0x170>)
 80016f0:	b292      	uxth	r2, r2
 80016f2:	809a      	strh	r2, [r3, #4]
GPIOB->OTYPER |= (0x0000 << (pin)); // Set output type register (0x00 -Push pull, 0x01 - Open drain)
 80016f4:	4a13      	ldr	r2, [pc, #76]	; (8001744 <speakerSetup+0x170>)
 80016f6:	4b13      	ldr	r3, [pc, #76]	; (8001744 <speakerSetup+0x170>)
 80016f8:	8892      	ldrh	r2, [r2, #4]
 80016fa:	b292      	uxth	r2, r2
 80016fc:	809a      	strh	r2, [r3, #4]
GPIOB->MODER &= ~(0x00000003 << (pin * 2)); // Clear mode register
 80016fe:	4b11      	ldr	r3, [pc, #68]	; (8001744 <speakerSetup+0x170>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	0052      	lsls	r2, r2, #1
 8001706:	2103      	movs	r1, #3
 8001708:	fa01 f202 	lsl.w	r2, r1, r2
 800170c:	43d2      	mvns	r2, r2
 800170e:	4611      	mov	r1, r2
 8001710:	4a0c      	ldr	r2, [pc, #48]	; (8001744 <speakerSetup+0x170>)
 8001712:	400b      	ands	r3, r1
 8001714:	6013      	str	r3, [r2, #0]
GPIOB->MODER |= (0x00000002 << (pin * 2)); // Set mode register (0x00 –Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8001716:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <speakerSetup+0x170>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	0052      	lsls	r2, r2, #1
 800171e:	2102      	movs	r1, #2
 8001720:	fa01 f202 	lsl.w	r2, r1, r2
 8001724:	4611      	mov	r1, r2
 8001726:	4a07      	ldr	r2, [pc, #28]	; (8001744 <speakerSetup+0x170>)
 8001728:	430b      	orrs	r3, r1
 800172a:	6013      	str	r3, [r2, #0]


GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_1);
 800172c:	2201      	movs	r2, #1
 800172e:	210a      	movs	r1, #10
 8001730:	4804      	ldr	r0, [pc, #16]	; (8001744 <speakerSetup+0x170>)
 8001732:	f7ff f947 	bl	80009c4 <GPIO_PinAFConfig>

}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40021000 	.word	0x40021000
 8001744:	48000400 	.word	0x48000400

08001748 <setFreq>:


void setFreq(uint16_t freq) {
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	80fb      	strh	r3, [r7, #6]

uint32_t reload = 64e6 / freq / (PRESCALE + 1) - 1;
 8001752:	88fb      	ldrh	r3, [r7, #6]
 8001754:	4618      	mov	r0, r3
 8001756:	f7fe fe89 	bl	800046c <__aeabi_i2d>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	a11c      	add	r1, pc, #112	; (adr r1, 80017d0 <setFreq+0x88>)
 8001760:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001764:	f7ff f816 	bl	8000794 <__aeabi_ddiv>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4610      	mov	r0, r2
 800176e:	4619      	mov	r1, r3
 8001770:	f04f 0200 	mov.w	r2, #0
 8001774:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <setFreq+0x80>)
 8001776:	f7ff f80d 	bl	8000794 <__aeabi_ddiv>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4610      	mov	r0, r2
 8001780:	4619      	mov	r1, r3
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	4b11      	ldr	r3, [pc, #68]	; (80017cc <setFreq+0x84>)
 8001788:	f7fe fd22 	bl	80001d0 <__aeabi_dsub>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4610      	mov	r0, r2
 8001792:	4619      	mov	r1, r3
 8001794:	f7ff f8e6 	bl	8000964 <__aeabi_d2uiz>
 8001798:	4603      	mov	r3, r0
 800179a:	60fb      	str	r3, [r7, #12]
TIM2->ARR = reload; // Set auto reload value
 800179c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	62d3      	str	r3, [r2, #44]	; 0x2c
TIM2->CCR3 = reload/2; // Set compare register
 80017a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	085b      	lsrs	r3, r3, #1
 80017ac:	63d3      	str	r3, [r2, #60]	; 0x3c
TIM2->EGR |= 0x01;
 80017ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6153      	str	r3, [r2, #20]

}
 80017be:	bf00      	nop
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40310000 	.word	0x40310000
 80017cc:	3ff00000 	.word	0x3ff00000
 80017d0:	00000000 	.word	0x00000000
 80017d4:	418e8480 	.word	0x418e8480

080017d8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]
 80017e8:	e00a      	b.n	8001800 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017ea:	f3af 8000 	nop.w
 80017ee:	4601      	mov	r1, r0
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	1c5a      	adds	r2, r3, #1
 80017f4:	60ba      	str	r2, [r7, #8]
 80017f6:	b2ca      	uxtb	r2, r1
 80017f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	3301      	adds	r3, #1
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	429a      	cmp	r2, r3
 8001806:	dbf0      	blt.n	80017ea <_read+0x12>
	}

return len;
 8001808:	687b      	ldr	r3, [r7, #4]
}
 800180a:	4618      	mov	r0, r3
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001812:	b480      	push	{r7}
 8001814:	b083      	sub	sp, #12
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
	return -1;
 800181a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800181e:	4618      	mov	r0, r3
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
 8001832:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800183a:	605a      	str	r2, [r3, #4]
	return 0;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <_lseek>:
{
	return 1;
}

int _lseek(int file, int ptr, int dir)
{
 800184a:	b480      	push	{r7}
 800184c:	b085      	sub	sp, #20
 800184e:	af00      	add	r7, sp, #0
 8001850:	60f8      	str	r0, [r7, #12]
 8001852:	60b9      	str	r1, [r7, #8]
 8001854:	607a      	str	r2, [r7, #4]
	return 0;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <_sbrk+0x50>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d102      	bne.n	800187a <_sbrk+0x16>
		heap_end = &end;
 8001874:	4b0f      	ldr	r3, [pc, #60]	; (80018b4 <_sbrk+0x50>)
 8001876:	4a10      	ldr	r2, [pc, #64]	; (80018b8 <_sbrk+0x54>)
 8001878:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800187a:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <_sbrk+0x50>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001880:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <_sbrk+0x50>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4413      	add	r3, r2
 8001888:	466a      	mov	r2, sp
 800188a:	4293      	cmp	r3, r2
 800188c:	d907      	bls.n	800189e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800188e:	f000 fb5b 	bl	8001f48 <__errno>
 8001892:	4603      	mov	r3, r0
 8001894:	220c      	movs	r2, #12
 8001896:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001898:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800189c:	e006      	b.n	80018ac <_sbrk+0x48>
	}

	heap_end += incr;
 800189e:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <_sbrk+0x50>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4413      	add	r3, r2
 80018a6:	4a03      	ldr	r2, [pc, #12]	; (80018b4 <_sbrk+0x50>)
 80018a8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80018aa:	68fb      	ldr	r3, [r7, #12]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	200001ac 	.word	0x200001ac
 80018b8:	20000300 	.word	0x20000300

080018bc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018c0:	4b1f      	ldr	r3, [pc, #124]	; (8001940 <SystemInit+0x84>)
 80018c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018c6:	4a1e      	ldr	r2, [pc, #120]	; (8001940 <SystemInit+0x84>)
 80018c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80018d0:	4b1c      	ldr	r3, [pc, #112]	; (8001944 <SystemInit+0x88>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a1b      	ldr	r2, [pc, #108]	; (8001944 <SystemInit+0x88>)
 80018d6:	f043 0301 	orr.w	r3, r3, #1
 80018da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 80018dc:	4b19      	ldr	r3, [pc, #100]	; (8001944 <SystemInit+0x88>)
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	4918      	ldr	r1, [pc, #96]	; (8001944 <SystemInit+0x88>)
 80018e2:	4b19      	ldr	r3, [pc, #100]	; (8001948 <SystemInit+0x8c>)
 80018e4:	4013      	ands	r3, r2
 80018e6:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80018e8:	4b16      	ldr	r3, [pc, #88]	; (8001944 <SystemInit+0x88>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a15      	ldr	r2, [pc, #84]	; (8001944 <SystemInit+0x88>)
 80018ee:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80018f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018f6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80018f8:	4b12      	ldr	r3, [pc, #72]	; (8001944 <SystemInit+0x88>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a11      	ldr	r2, [pc, #68]	; (8001944 <SystemInit+0x88>)
 80018fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001902:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001904:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <SystemInit+0x88>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	4a0e      	ldr	r2, [pc, #56]	; (8001944 <SystemInit+0x88>)
 800190a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800190e:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8001910:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <SystemInit+0x88>)
 8001912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001914:	4a0b      	ldr	r2, [pc, #44]	; (8001944 <SystemInit+0x88>)
 8001916:	f023 030f 	bic.w	r3, r3, #15
 800191a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 800191c:	4b09      	ldr	r3, [pc, #36]	; (8001944 <SystemInit+0x88>)
 800191e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001920:	4908      	ldr	r1, [pc, #32]	; (8001944 <SystemInit+0x88>)
 8001922:	4b0a      	ldr	r3, [pc, #40]	; (800194c <SystemInit+0x90>)
 8001924:	4013      	ands	r3, r2
 8001926:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001928:	4b06      	ldr	r3, [pc, #24]	; (8001944 <SystemInit+0x88>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800192e:	f000 f80f 	bl	8001950 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001932:	4b03      	ldr	r3, [pc, #12]	; (8001940 <SystemInit+0x84>)
 8001934:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001938:	609a      	str	r2, [r3, #8]
#endif  
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	e000ed00 	.word	0xe000ed00
 8001944:	40021000 	.word	0x40021000
 8001948:	f87fc00c 	.word	0xf87fc00c
 800194c:	ff00fccc 	.word	0xff00fccc

08001950 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 8001954:	4b21      	ldr	r3, [pc, #132]	; (80019dc <SetSysClock+0x8c>)
 8001956:	2212      	movs	r2, #18
 8001958:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800195a:	4b21      	ldr	r3, [pc, #132]	; (80019e0 <SetSysClock+0x90>)
 800195c:	4a20      	ldr	r2, [pc, #128]	; (80019e0 <SetSysClock+0x90>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001962:	4b1f      	ldr	r3, [pc, #124]	; (80019e0 <SetSysClock+0x90>)
 8001964:	4a1e      	ldr	r2, [pc, #120]	; (80019e0 <SetSysClock+0x90>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800196a:	4b1d      	ldr	r3, [pc, #116]	; (80019e0 <SetSysClock+0x90>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	4a1c      	ldr	r2, [pc, #112]	; (80019e0 <SetSysClock+0x90>)
 8001970:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001974:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8001976:	4b1a      	ldr	r3, [pc, #104]	; (80019e0 <SetSysClock+0x90>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	4a19      	ldr	r2, [pc, #100]	; (80019e0 <SetSysClock+0x90>)
 800197c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001980:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 8001982:	4b17      	ldr	r3, [pc, #92]	; (80019e0 <SetSysClock+0x90>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	4a16      	ldr	r2, [pc, #88]	; (80019e0 <SetSysClock+0x90>)
 8001988:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 800198c:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 800198e:	4b14      	ldr	r3, [pc, #80]	; (80019e0 <SetSysClock+0x90>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a13      	ldr	r2, [pc, #76]	; (80019e0 <SetSysClock+0x90>)
 8001994:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001998:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800199a:	bf00      	nop
 800199c:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <SetSysClock+0x90>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d0f9      	beq.n	800199c <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80019a8:	4b0d      	ldr	r3, [pc, #52]	; (80019e0 <SetSysClock+0x90>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	4a0c      	ldr	r2, [pc, #48]	; (80019e0 <SetSysClock+0x90>)
 80019ae:	f023 0303 	bic.w	r3, r3, #3
 80019b2:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 80019b4:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <SetSysClock+0x90>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	4a09      	ldr	r2, [pc, #36]	; (80019e0 <SetSysClock+0x90>)
 80019ba:	f043 0302 	orr.w	r3, r3, #2
 80019be:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80019c0:	bf00      	nop
 80019c2:	4b07      	ldr	r3, [pc, #28]	; (80019e0 <SetSysClock+0x90>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f003 030c 	and.w	r3, r3, #12
 80019ca:	2b08      	cmp	r3, #8
 80019cc:	d1f9      	bne.n	80019c2 <SetSysClock+0x72>
  {
  }
}
 80019ce:	bf00      	nop
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	40022000 	.word	0x40022000
 80019e0:	40021000 	.word	0x40021000

080019e4 <NVIC_EnableIRQ>:
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	f003 031f 	and.w	r3, r3, #31
 80019f4:	2201      	movs	r2, #1
 80019f6:	fa02 f103 	lsl.w	r1, r2, r3
 80019fa:	4a06      	ldr	r2, [pc, #24]	; (8001a14 <NVIC_EnableIRQ+0x30>)
 80019fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a00:	095b      	lsrs	r3, r3, #5
 8001a02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	e000e100 	.word	0xe000e100

08001a18 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	6039      	str	r1, [r7, #0]
 8001a22:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8001a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	da0b      	bge.n	8001a44 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	490c      	ldr	r1, [pc, #48]	; (8001a64 <NVIC_SetPriority+0x4c>)
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	f003 030f 	and.w	r3, r3, #15
 8001a38:	3b04      	subs	r3, #4
 8001a3a:	0112      	lsls	r2, r2, #4
 8001a3c:	b2d2      	uxtb	r2, r2
 8001a3e:	440b      	add	r3, r1
 8001a40:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8001a42:	e009      	b.n	8001a58 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	4907      	ldr	r1, [pc, #28]	; (8001a68 <NVIC_SetPriority+0x50>)
 8001a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4e:	0112      	lsls	r2, r2, #4
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	440b      	add	r3, r1
 8001a54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	e000ed00 	.word	0xe000ed00
 8001a68:	e000e100 	.word	0xe000e100

08001a6c <timesetup>:

extern int counter;



void timesetup(){
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0

	RCC->APB2ENR |= RCC_APB2Periph_TIM15;
 8001a70:	4b16      	ldr	r3, [pc, #88]	; (8001acc <timesetup+0x60>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	4a15      	ldr	r2, [pc, #84]	; (8001acc <timesetup+0x60>)
 8001a76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a7a:	6193      	str	r3, [r2, #24]
	TIM15->CR1 = TIM15->CR1 & ~(0x001); 	// turn off timer
 8001a7c:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <timesetup+0x64>)
 8001a7e:	881b      	ldrh	r3, [r3, #0]
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	4a13      	ldr	r2, [pc, #76]	; (8001ad0 <timesetup+0x64>)
 8001a84:	f023 0301 	bic.w	r3, r3, #1
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	8013      	strh	r3, [r2, #0]

	TIM15->ARR = 999; 	// Set reload value
 8001a8c:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <timesetup+0x64>)
 8001a8e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a92:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM15->PSC = 639; 	// Set prescale value
 8001a94:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <timesetup+0x64>)
 8001a96:	f240 227f 	movw	r2, #639	; 0x27f
 8001a9a:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM15->DIER |= 0x0001; // enable timer 15's interrutps
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <timesetup+0x64>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	4a0b      	ldr	r2, [pc, #44]	; (8001ad0 <timesetup+0x64>)
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	60d3      	str	r3, [r2, #12]


	TIM15->CR1 = TIM15->CR1 | (0x001); 	// turn on timer
 8001aa8:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <timesetup+0x64>)
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	4a08      	ldr	r2, [pc, #32]	; (8001ad0 <timesetup+0x64>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	8013      	strh	r3, [r2, #0]

	NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5);
 8001ab8:	2105      	movs	r1, #5
 8001aba:	2018      	movs	r0, #24
 8001abc:	f7ff ffac 	bl	8001a18 <NVIC_SetPriority>
	NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001ac0:	2018      	movs	r0, #24
 8001ac2:	f7ff ff8f 	bl	80019e4 <NVIC_EnableIRQ>

}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40014000 	.word	0x40014000

08001ad4 <wait>:


void wait(int milisec){
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
	int current = counter;
 8001adc:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <wait+0x2c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	60fb      	str	r3, [r7, #12]
	while(current + milisec > counter){
 8001ae2:	bf00      	nop
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	441a      	add	r2, r3
 8001aea:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <wait+0x2c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	dcf8      	bgt.n	8001ae4 <wait+0x10>

	}

}
 8001af2:	bf00      	nop
 8001af4:	bf00      	nop
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	200001a8 	.word	0x200001a8

08001b04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b04:	480d      	ldr	r0, [pc, #52]	; (8001b3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b06:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b08:	480d      	ldr	r0, [pc, #52]	; (8001b40 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b0a:	490e      	ldr	r1, [pc, #56]	; (8001b44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b0c:	4a0e      	ldr	r2, [pc, #56]	; (8001b48 <LoopForever+0xe>)
  movs r3, #0
 8001b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b10:	e002      	b.n	8001b18 <LoopCopyDataInit>

08001b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b16:	3304      	adds	r3, #4

08001b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b1c:	d3f9      	bcc.n	8001b12 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b1e:	4a0b      	ldr	r2, [pc, #44]	; (8001b4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b20:	4c0b      	ldr	r4, [pc, #44]	; (8001b50 <LoopForever+0x16>)
  movs r3, #0
 8001b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b24:	e001      	b.n	8001b2a <LoopFillZerobss>

08001b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b28:	3204      	adds	r2, #4

08001b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b2c:	d3fb      	bcc.n	8001b26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001b2e:	f7ff fec5 	bl	80018bc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001b32:	f000 fa0f 	bl	8001f54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b36:	f7ff fc25 	bl	8001384 <main>

08001b3a <LoopForever>:

LoopForever:
    b LoopForever
 8001b3a:	e7fe      	b.n	8001b3a <LoopForever>
  ldr   r0, =_estack
 8001b3c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b44:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001b48:	080023b0 	.word	0x080023b0
  ldr r2, =_sbss
 8001b4c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001b50:	200002fc 	.word	0x200002fc

08001b54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b54:	e7fe      	b.n	8001b54 <ADC1_2_IRQHandler>
	...

08001b58 <std>:
 8001b58:	2300      	movs	r3, #0
 8001b5a:	b510      	push	{r4, lr}
 8001b5c:	4604      	mov	r4, r0
 8001b5e:	e9c0 3300 	strd	r3, r3, [r0]
 8001b62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001b66:	6083      	str	r3, [r0, #8]
 8001b68:	8181      	strh	r1, [r0, #12]
 8001b6a:	6643      	str	r3, [r0, #100]	; 0x64
 8001b6c:	81c2      	strh	r2, [r0, #14]
 8001b6e:	6183      	str	r3, [r0, #24]
 8001b70:	4619      	mov	r1, r3
 8001b72:	2208      	movs	r2, #8
 8001b74:	305c      	adds	r0, #92	; 0x5c
 8001b76:	f000 f9aa 	bl	8001ece <memset>
 8001b7a:	4b0d      	ldr	r3, [pc, #52]	; (8001bb0 <std+0x58>)
 8001b7c:	6263      	str	r3, [r4, #36]	; 0x24
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <std+0x5c>)
 8001b80:	62a3      	str	r3, [r4, #40]	; 0x28
 8001b82:	4b0d      	ldr	r3, [pc, #52]	; (8001bb8 <std+0x60>)
 8001b84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001b86:	4b0d      	ldr	r3, [pc, #52]	; (8001bbc <std+0x64>)
 8001b88:	6323      	str	r3, [r4, #48]	; 0x30
 8001b8a:	4b0d      	ldr	r3, [pc, #52]	; (8001bc0 <std+0x68>)
 8001b8c:	6224      	str	r4, [r4, #32]
 8001b8e:	429c      	cmp	r4, r3
 8001b90:	d006      	beq.n	8001ba0 <std+0x48>
 8001b92:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8001b96:	4294      	cmp	r4, r2
 8001b98:	d002      	beq.n	8001ba0 <std+0x48>
 8001b9a:	33d0      	adds	r3, #208	; 0xd0
 8001b9c:	429c      	cmp	r4, r3
 8001b9e:	d105      	bne.n	8001bac <std+0x54>
 8001ba0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ba8:	f000 b9f8 	b.w	8001f9c <__retarget_lock_init_recursive>
 8001bac:	bd10      	pop	{r4, pc}
 8001bae:	bf00      	nop
 8001bb0:	08001e49 	.word	0x08001e49
 8001bb4:	08001e6b 	.word	0x08001e6b
 8001bb8:	08001ea3 	.word	0x08001ea3
 8001bbc:	08001ec7 	.word	0x08001ec7
 8001bc0:	200001b0 	.word	0x200001b0

08001bc4 <stdio_exit_handler>:
 8001bc4:	4a02      	ldr	r2, [pc, #8]	; (8001bd0 <stdio_exit_handler+0xc>)
 8001bc6:	4903      	ldr	r1, [pc, #12]	; (8001bd4 <stdio_exit_handler+0x10>)
 8001bc8:	4803      	ldr	r0, [pc, #12]	; (8001bd8 <stdio_exit_handler+0x14>)
 8001bca:	f000 b869 	b.w	8001ca0 <_fwalk_sglue>
 8001bce:	bf00      	nop
 8001bd0:	2000002c 	.word	0x2000002c
 8001bd4:	080022b1 	.word	0x080022b1
 8001bd8:	20000038 	.word	0x20000038

08001bdc <cleanup_stdio>:
 8001bdc:	6841      	ldr	r1, [r0, #4]
 8001bde:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <cleanup_stdio+0x34>)
 8001be0:	4299      	cmp	r1, r3
 8001be2:	b510      	push	{r4, lr}
 8001be4:	4604      	mov	r4, r0
 8001be6:	d001      	beq.n	8001bec <cleanup_stdio+0x10>
 8001be8:	f000 fb62 	bl	80022b0 <_fflush_r>
 8001bec:	68a1      	ldr	r1, [r4, #8]
 8001bee:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <cleanup_stdio+0x38>)
 8001bf0:	4299      	cmp	r1, r3
 8001bf2:	d002      	beq.n	8001bfa <cleanup_stdio+0x1e>
 8001bf4:	4620      	mov	r0, r4
 8001bf6:	f000 fb5b 	bl	80022b0 <_fflush_r>
 8001bfa:	68e1      	ldr	r1, [r4, #12]
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <cleanup_stdio+0x3c>)
 8001bfe:	4299      	cmp	r1, r3
 8001c00:	d004      	beq.n	8001c0c <cleanup_stdio+0x30>
 8001c02:	4620      	mov	r0, r4
 8001c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c08:	f000 bb52 	b.w	80022b0 <_fflush_r>
 8001c0c:	bd10      	pop	{r4, pc}
 8001c0e:	bf00      	nop
 8001c10:	200001b0 	.word	0x200001b0
 8001c14:	20000218 	.word	0x20000218
 8001c18:	20000280 	.word	0x20000280

08001c1c <global_stdio_init.part.0>:
 8001c1c:	b510      	push	{r4, lr}
 8001c1e:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <global_stdio_init.part.0+0x30>)
 8001c20:	4c0b      	ldr	r4, [pc, #44]	; (8001c50 <global_stdio_init.part.0+0x34>)
 8001c22:	4a0c      	ldr	r2, [pc, #48]	; (8001c54 <global_stdio_init.part.0+0x38>)
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	4620      	mov	r0, r4
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2104      	movs	r1, #4
 8001c2c:	f7ff ff94 	bl	8001b58 <std>
 8001c30:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001c34:	2201      	movs	r2, #1
 8001c36:	2109      	movs	r1, #9
 8001c38:	f7ff ff8e 	bl	8001b58 <std>
 8001c3c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001c40:	2202      	movs	r2, #2
 8001c42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c46:	2112      	movs	r1, #18
 8001c48:	f7ff bf86 	b.w	8001b58 <std>
 8001c4c:	200002e8 	.word	0x200002e8
 8001c50:	200001b0 	.word	0x200001b0
 8001c54:	08001bc5 	.word	0x08001bc5

08001c58 <__sfp_lock_acquire>:
 8001c58:	4801      	ldr	r0, [pc, #4]	; (8001c60 <__sfp_lock_acquire+0x8>)
 8001c5a:	f000 b9a0 	b.w	8001f9e <__retarget_lock_acquire_recursive>
 8001c5e:	bf00      	nop
 8001c60:	200002f1 	.word	0x200002f1

08001c64 <__sfp_lock_release>:
 8001c64:	4801      	ldr	r0, [pc, #4]	; (8001c6c <__sfp_lock_release+0x8>)
 8001c66:	f000 b99b 	b.w	8001fa0 <__retarget_lock_release_recursive>
 8001c6a:	bf00      	nop
 8001c6c:	200002f1 	.word	0x200002f1

08001c70 <__sinit>:
 8001c70:	b510      	push	{r4, lr}
 8001c72:	4604      	mov	r4, r0
 8001c74:	f7ff fff0 	bl	8001c58 <__sfp_lock_acquire>
 8001c78:	6a23      	ldr	r3, [r4, #32]
 8001c7a:	b11b      	cbz	r3, 8001c84 <__sinit+0x14>
 8001c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c80:	f7ff bff0 	b.w	8001c64 <__sfp_lock_release>
 8001c84:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <__sinit+0x28>)
 8001c86:	6223      	str	r3, [r4, #32]
 8001c88:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <__sinit+0x2c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1f5      	bne.n	8001c7c <__sinit+0xc>
 8001c90:	f7ff ffc4 	bl	8001c1c <global_stdio_init.part.0>
 8001c94:	e7f2      	b.n	8001c7c <__sinit+0xc>
 8001c96:	bf00      	nop
 8001c98:	08001bdd 	.word	0x08001bdd
 8001c9c:	200002e8 	.word	0x200002e8

08001ca0 <_fwalk_sglue>:
 8001ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ca4:	4607      	mov	r7, r0
 8001ca6:	4688      	mov	r8, r1
 8001ca8:	4614      	mov	r4, r2
 8001caa:	2600      	movs	r6, #0
 8001cac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001cb0:	f1b9 0901 	subs.w	r9, r9, #1
 8001cb4:	d505      	bpl.n	8001cc2 <_fwalk_sglue+0x22>
 8001cb6:	6824      	ldr	r4, [r4, #0]
 8001cb8:	2c00      	cmp	r4, #0
 8001cba:	d1f7      	bne.n	8001cac <_fwalk_sglue+0xc>
 8001cbc:	4630      	mov	r0, r6
 8001cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001cc2:	89ab      	ldrh	r3, [r5, #12]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d907      	bls.n	8001cd8 <_fwalk_sglue+0x38>
 8001cc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	d003      	beq.n	8001cd8 <_fwalk_sglue+0x38>
 8001cd0:	4629      	mov	r1, r5
 8001cd2:	4638      	mov	r0, r7
 8001cd4:	47c0      	blx	r8
 8001cd6:	4306      	orrs	r6, r0
 8001cd8:	3568      	adds	r5, #104	; 0x68
 8001cda:	e7e9      	b.n	8001cb0 <_fwalk_sglue+0x10>

08001cdc <setbuf>:
 8001cdc:	fab1 f281 	clz	r2, r1
 8001ce0:	0952      	lsrs	r2, r2, #5
 8001ce2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ce6:	0052      	lsls	r2, r2, #1
 8001ce8:	f000 b800 	b.w	8001cec <setvbuf>

08001cec <setvbuf>:
 8001cec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001cf0:	461d      	mov	r5, r3
 8001cf2:	4b54      	ldr	r3, [pc, #336]	; (8001e44 <setvbuf+0x158>)
 8001cf4:	681f      	ldr	r7, [r3, #0]
 8001cf6:	4604      	mov	r4, r0
 8001cf8:	460e      	mov	r6, r1
 8001cfa:	4690      	mov	r8, r2
 8001cfc:	b127      	cbz	r7, 8001d08 <setvbuf+0x1c>
 8001cfe:	6a3b      	ldr	r3, [r7, #32]
 8001d00:	b913      	cbnz	r3, 8001d08 <setvbuf+0x1c>
 8001d02:	4638      	mov	r0, r7
 8001d04:	f7ff ffb4 	bl	8001c70 <__sinit>
 8001d08:	f1b8 0f02 	cmp.w	r8, #2
 8001d0c:	d006      	beq.n	8001d1c <setvbuf+0x30>
 8001d0e:	f1b8 0f01 	cmp.w	r8, #1
 8001d12:	f200 8094 	bhi.w	8001e3e <setvbuf+0x152>
 8001d16:	2d00      	cmp	r5, #0
 8001d18:	f2c0 8091 	blt.w	8001e3e <setvbuf+0x152>
 8001d1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001d1e:	07da      	lsls	r2, r3, #31
 8001d20:	d405      	bmi.n	8001d2e <setvbuf+0x42>
 8001d22:	89a3      	ldrh	r3, [r4, #12]
 8001d24:	059b      	lsls	r3, r3, #22
 8001d26:	d402      	bmi.n	8001d2e <setvbuf+0x42>
 8001d28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d2a:	f000 f938 	bl	8001f9e <__retarget_lock_acquire_recursive>
 8001d2e:	4621      	mov	r1, r4
 8001d30:	4638      	mov	r0, r7
 8001d32:	f000 fabd 	bl	80022b0 <_fflush_r>
 8001d36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d38:	b141      	cbz	r1, 8001d4c <setvbuf+0x60>
 8001d3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d3e:	4299      	cmp	r1, r3
 8001d40:	d002      	beq.n	8001d48 <setvbuf+0x5c>
 8001d42:	4638      	mov	r0, r7
 8001d44:	f000 f92e 	bl	8001fa4 <_free_r>
 8001d48:	2300      	movs	r3, #0
 8001d4a:	6363      	str	r3, [r4, #52]	; 0x34
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	61a3      	str	r3, [r4, #24]
 8001d50:	6063      	str	r3, [r4, #4]
 8001d52:	89a3      	ldrh	r3, [r4, #12]
 8001d54:	0618      	lsls	r0, r3, #24
 8001d56:	d503      	bpl.n	8001d60 <setvbuf+0x74>
 8001d58:	6921      	ldr	r1, [r4, #16]
 8001d5a:	4638      	mov	r0, r7
 8001d5c:	f000 f922 	bl	8001fa4 <_free_r>
 8001d60:	89a3      	ldrh	r3, [r4, #12]
 8001d62:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8001d66:	f023 0303 	bic.w	r3, r3, #3
 8001d6a:	f1b8 0f02 	cmp.w	r8, #2
 8001d6e:	81a3      	strh	r3, [r4, #12]
 8001d70:	d05f      	beq.n	8001e32 <setvbuf+0x146>
 8001d72:	ab01      	add	r3, sp, #4
 8001d74:	466a      	mov	r2, sp
 8001d76:	4621      	mov	r1, r4
 8001d78:	4638      	mov	r0, r7
 8001d7a:	f000 fac1 	bl	8002300 <__swhatbuf_r>
 8001d7e:	89a3      	ldrh	r3, [r4, #12]
 8001d80:	4318      	orrs	r0, r3
 8001d82:	81a0      	strh	r0, [r4, #12]
 8001d84:	bb2d      	cbnz	r5, 8001dd2 <setvbuf+0xe6>
 8001d86:	9d00      	ldr	r5, [sp, #0]
 8001d88:	4628      	mov	r0, r5
 8001d8a:	f000 f957 	bl	800203c <malloc>
 8001d8e:	4606      	mov	r6, r0
 8001d90:	2800      	cmp	r0, #0
 8001d92:	d150      	bne.n	8001e36 <setvbuf+0x14a>
 8001d94:	f8dd 9000 	ldr.w	r9, [sp]
 8001d98:	45a9      	cmp	r9, r5
 8001d9a:	d13e      	bne.n	8001e1a <setvbuf+0x12e>
 8001d9c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001da0:	2200      	movs	r2, #0
 8001da2:	60a2      	str	r2, [r4, #8]
 8001da4:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8001da8:	6022      	str	r2, [r4, #0]
 8001daa:	6122      	str	r2, [r4, #16]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001db2:	6162      	str	r2, [r4, #20]
 8001db4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001db6:	f043 0302 	orr.w	r3, r3, #2
 8001dba:	07d1      	lsls	r1, r2, #31
 8001dbc:	81a3      	strh	r3, [r4, #12]
 8001dbe:	d404      	bmi.n	8001dca <setvbuf+0xde>
 8001dc0:	059b      	lsls	r3, r3, #22
 8001dc2:	d402      	bmi.n	8001dca <setvbuf+0xde>
 8001dc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001dc6:	f000 f8eb 	bl	8001fa0 <__retarget_lock_release_recursive>
 8001dca:	4628      	mov	r0, r5
 8001dcc:	b003      	add	sp, #12
 8001dce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001dd2:	2e00      	cmp	r6, #0
 8001dd4:	d0d8      	beq.n	8001d88 <setvbuf+0x9c>
 8001dd6:	6a3b      	ldr	r3, [r7, #32]
 8001dd8:	b913      	cbnz	r3, 8001de0 <setvbuf+0xf4>
 8001dda:	4638      	mov	r0, r7
 8001ddc:	f7ff ff48 	bl	8001c70 <__sinit>
 8001de0:	f1b8 0f01 	cmp.w	r8, #1
 8001de4:	bf08      	it	eq
 8001de6:	89a3      	ldrheq	r3, [r4, #12]
 8001de8:	6026      	str	r6, [r4, #0]
 8001dea:	bf04      	itt	eq
 8001dec:	f043 0301 	orreq.w	r3, r3, #1
 8001df0:	81a3      	strheq	r3, [r4, #12]
 8001df2:	89a3      	ldrh	r3, [r4, #12]
 8001df4:	f013 0208 	ands.w	r2, r3, #8
 8001df8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8001dfc:	d01d      	beq.n	8001e3a <setvbuf+0x14e>
 8001dfe:	07da      	lsls	r2, r3, #31
 8001e00:	bf41      	itttt	mi
 8001e02:	2200      	movmi	r2, #0
 8001e04:	426d      	negmi	r5, r5
 8001e06:	60a2      	strmi	r2, [r4, #8]
 8001e08:	61a5      	strmi	r5, [r4, #24]
 8001e0a:	bf58      	it	pl
 8001e0c:	60a5      	strpl	r5, [r4, #8]
 8001e0e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8001e10:	f015 0501 	ands.w	r5, r5, #1
 8001e14:	d0d4      	beq.n	8001dc0 <setvbuf+0xd4>
 8001e16:	2500      	movs	r5, #0
 8001e18:	e7d7      	b.n	8001dca <setvbuf+0xde>
 8001e1a:	4648      	mov	r0, r9
 8001e1c:	f000 f90e 	bl	800203c <malloc>
 8001e20:	4606      	mov	r6, r0
 8001e22:	2800      	cmp	r0, #0
 8001e24:	d0ba      	beq.n	8001d9c <setvbuf+0xb0>
 8001e26:	89a3      	ldrh	r3, [r4, #12]
 8001e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e2c:	81a3      	strh	r3, [r4, #12]
 8001e2e:	464d      	mov	r5, r9
 8001e30:	e7d1      	b.n	8001dd6 <setvbuf+0xea>
 8001e32:	2500      	movs	r5, #0
 8001e34:	e7b4      	b.n	8001da0 <setvbuf+0xb4>
 8001e36:	46a9      	mov	r9, r5
 8001e38:	e7f5      	b.n	8001e26 <setvbuf+0x13a>
 8001e3a:	60a2      	str	r2, [r4, #8]
 8001e3c:	e7e7      	b.n	8001e0e <setvbuf+0x122>
 8001e3e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001e42:	e7c2      	b.n	8001dca <setvbuf+0xde>
 8001e44:	20000084 	.word	0x20000084

08001e48 <__sread>:
 8001e48:	b510      	push	{r4, lr}
 8001e4a:	460c      	mov	r4, r1
 8001e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e50:	f000 f868 	bl	8001f24 <_read_r>
 8001e54:	2800      	cmp	r0, #0
 8001e56:	bfab      	itete	ge
 8001e58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001e5a:	89a3      	ldrhlt	r3, [r4, #12]
 8001e5c:	181b      	addge	r3, r3, r0
 8001e5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001e62:	bfac      	ite	ge
 8001e64:	6563      	strge	r3, [r4, #84]	; 0x54
 8001e66:	81a3      	strhlt	r3, [r4, #12]
 8001e68:	bd10      	pop	{r4, pc}

08001e6a <__swrite>:
 8001e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e6e:	461f      	mov	r7, r3
 8001e70:	898b      	ldrh	r3, [r1, #12]
 8001e72:	05db      	lsls	r3, r3, #23
 8001e74:	4605      	mov	r5, r0
 8001e76:	460c      	mov	r4, r1
 8001e78:	4616      	mov	r6, r2
 8001e7a:	d505      	bpl.n	8001e88 <__swrite+0x1e>
 8001e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e80:	2302      	movs	r3, #2
 8001e82:	2200      	movs	r2, #0
 8001e84:	f000 f83c 	bl	8001f00 <_lseek_r>
 8001e88:	89a3      	ldrh	r3, [r4, #12]
 8001e8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e92:	81a3      	strh	r3, [r4, #12]
 8001e94:	4632      	mov	r2, r6
 8001e96:	463b      	mov	r3, r7
 8001e98:	4628      	mov	r0, r5
 8001e9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001e9e:	f7ff b8e1 	b.w	8001064 <_write_r>

08001ea2 <__sseek>:
 8001ea2:	b510      	push	{r4, lr}
 8001ea4:	460c      	mov	r4, r1
 8001ea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001eaa:	f000 f829 	bl	8001f00 <_lseek_r>
 8001eae:	1c43      	adds	r3, r0, #1
 8001eb0:	89a3      	ldrh	r3, [r4, #12]
 8001eb2:	bf15      	itete	ne
 8001eb4:	6560      	strne	r0, [r4, #84]	; 0x54
 8001eb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001eba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001ebe:	81a3      	strheq	r3, [r4, #12]
 8001ec0:	bf18      	it	ne
 8001ec2:	81a3      	strhne	r3, [r4, #12]
 8001ec4:	bd10      	pop	{r4, pc}

08001ec6 <__sclose>:
 8001ec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001eca:	f000 b809 	b.w	8001ee0 <_close_r>

08001ece <memset>:
 8001ece:	4402      	add	r2, r0
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d100      	bne.n	8001ed8 <memset+0xa>
 8001ed6:	4770      	bx	lr
 8001ed8:	f803 1b01 	strb.w	r1, [r3], #1
 8001edc:	e7f9      	b.n	8001ed2 <memset+0x4>
	...

08001ee0 <_close_r>:
 8001ee0:	b538      	push	{r3, r4, r5, lr}
 8001ee2:	4d06      	ldr	r5, [pc, #24]	; (8001efc <_close_r+0x1c>)
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	4604      	mov	r4, r0
 8001ee8:	4608      	mov	r0, r1
 8001eea:	602b      	str	r3, [r5, #0]
 8001eec:	f7ff fc91 	bl	8001812 <_close>
 8001ef0:	1c43      	adds	r3, r0, #1
 8001ef2:	d102      	bne.n	8001efa <_close_r+0x1a>
 8001ef4:	682b      	ldr	r3, [r5, #0]
 8001ef6:	b103      	cbz	r3, 8001efa <_close_r+0x1a>
 8001ef8:	6023      	str	r3, [r4, #0]
 8001efa:	bd38      	pop	{r3, r4, r5, pc}
 8001efc:	200002ec 	.word	0x200002ec

08001f00 <_lseek_r>:
 8001f00:	b538      	push	{r3, r4, r5, lr}
 8001f02:	4d07      	ldr	r5, [pc, #28]	; (8001f20 <_lseek_r+0x20>)
 8001f04:	4604      	mov	r4, r0
 8001f06:	4608      	mov	r0, r1
 8001f08:	4611      	mov	r1, r2
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	602a      	str	r2, [r5, #0]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	f7ff fc9b 	bl	800184a <_lseek>
 8001f14:	1c43      	adds	r3, r0, #1
 8001f16:	d102      	bne.n	8001f1e <_lseek_r+0x1e>
 8001f18:	682b      	ldr	r3, [r5, #0]
 8001f1a:	b103      	cbz	r3, 8001f1e <_lseek_r+0x1e>
 8001f1c:	6023      	str	r3, [r4, #0]
 8001f1e:	bd38      	pop	{r3, r4, r5, pc}
 8001f20:	200002ec 	.word	0x200002ec

08001f24 <_read_r>:
 8001f24:	b538      	push	{r3, r4, r5, lr}
 8001f26:	4d07      	ldr	r5, [pc, #28]	; (8001f44 <_read_r+0x20>)
 8001f28:	4604      	mov	r4, r0
 8001f2a:	4608      	mov	r0, r1
 8001f2c:	4611      	mov	r1, r2
 8001f2e:	2200      	movs	r2, #0
 8001f30:	602a      	str	r2, [r5, #0]
 8001f32:	461a      	mov	r2, r3
 8001f34:	f7ff fc50 	bl	80017d8 <_read>
 8001f38:	1c43      	adds	r3, r0, #1
 8001f3a:	d102      	bne.n	8001f42 <_read_r+0x1e>
 8001f3c:	682b      	ldr	r3, [r5, #0]
 8001f3e:	b103      	cbz	r3, 8001f42 <_read_r+0x1e>
 8001f40:	6023      	str	r3, [r4, #0]
 8001f42:	bd38      	pop	{r3, r4, r5, pc}
 8001f44:	200002ec 	.word	0x200002ec

08001f48 <__errno>:
 8001f48:	4b01      	ldr	r3, [pc, #4]	; (8001f50 <__errno+0x8>)
 8001f4a:	6818      	ldr	r0, [r3, #0]
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	20000084 	.word	0x20000084

08001f54 <__libc_init_array>:
 8001f54:	b570      	push	{r4, r5, r6, lr}
 8001f56:	4d0d      	ldr	r5, [pc, #52]	; (8001f8c <__libc_init_array+0x38>)
 8001f58:	4c0d      	ldr	r4, [pc, #52]	; (8001f90 <__libc_init_array+0x3c>)
 8001f5a:	1b64      	subs	r4, r4, r5
 8001f5c:	10a4      	asrs	r4, r4, #2
 8001f5e:	2600      	movs	r6, #0
 8001f60:	42a6      	cmp	r6, r4
 8001f62:	d109      	bne.n	8001f78 <__libc_init_array+0x24>
 8001f64:	4d0b      	ldr	r5, [pc, #44]	; (8001f94 <__libc_init_array+0x40>)
 8001f66:	4c0c      	ldr	r4, [pc, #48]	; (8001f98 <__libc_init_array+0x44>)
 8001f68:	f000 fa12 	bl	8002390 <_init>
 8001f6c:	1b64      	subs	r4, r4, r5
 8001f6e:	10a4      	asrs	r4, r4, #2
 8001f70:	2600      	movs	r6, #0
 8001f72:	42a6      	cmp	r6, r4
 8001f74:	d105      	bne.n	8001f82 <__libc_init_array+0x2e>
 8001f76:	bd70      	pop	{r4, r5, r6, pc}
 8001f78:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f7c:	4798      	blx	r3
 8001f7e:	3601      	adds	r6, #1
 8001f80:	e7ee      	b.n	8001f60 <__libc_init_array+0xc>
 8001f82:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f86:	4798      	blx	r3
 8001f88:	3601      	adds	r6, #1
 8001f8a:	e7f2      	b.n	8001f72 <__libc_init_array+0x1e>
 8001f8c:	080023a8 	.word	0x080023a8
 8001f90:	080023a8 	.word	0x080023a8
 8001f94:	080023a8 	.word	0x080023a8
 8001f98:	080023ac 	.word	0x080023ac

08001f9c <__retarget_lock_init_recursive>:
 8001f9c:	4770      	bx	lr

08001f9e <__retarget_lock_acquire_recursive>:
 8001f9e:	4770      	bx	lr

08001fa0 <__retarget_lock_release_recursive>:
 8001fa0:	4770      	bx	lr
	...

08001fa4 <_free_r>:
 8001fa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001fa6:	2900      	cmp	r1, #0
 8001fa8:	d044      	beq.n	8002034 <_free_r+0x90>
 8001faa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001fae:	9001      	str	r0, [sp, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f1a1 0404 	sub.w	r4, r1, #4
 8001fb6:	bfb8      	it	lt
 8001fb8:	18e4      	addlt	r4, r4, r3
 8001fba:	f000 f8e7 	bl	800218c <__malloc_lock>
 8001fbe:	4a1e      	ldr	r2, [pc, #120]	; (8002038 <_free_r+0x94>)
 8001fc0:	9801      	ldr	r0, [sp, #4]
 8001fc2:	6813      	ldr	r3, [r2, #0]
 8001fc4:	b933      	cbnz	r3, 8001fd4 <_free_r+0x30>
 8001fc6:	6063      	str	r3, [r4, #4]
 8001fc8:	6014      	str	r4, [r2, #0]
 8001fca:	b003      	add	sp, #12
 8001fcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001fd0:	f000 b8e2 	b.w	8002198 <__malloc_unlock>
 8001fd4:	42a3      	cmp	r3, r4
 8001fd6:	d908      	bls.n	8001fea <_free_r+0x46>
 8001fd8:	6825      	ldr	r5, [r4, #0]
 8001fda:	1961      	adds	r1, r4, r5
 8001fdc:	428b      	cmp	r3, r1
 8001fde:	bf01      	itttt	eq
 8001fe0:	6819      	ldreq	r1, [r3, #0]
 8001fe2:	685b      	ldreq	r3, [r3, #4]
 8001fe4:	1949      	addeq	r1, r1, r5
 8001fe6:	6021      	streq	r1, [r4, #0]
 8001fe8:	e7ed      	b.n	8001fc6 <_free_r+0x22>
 8001fea:	461a      	mov	r2, r3
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	b10b      	cbz	r3, 8001ff4 <_free_r+0x50>
 8001ff0:	42a3      	cmp	r3, r4
 8001ff2:	d9fa      	bls.n	8001fea <_free_r+0x46>
 8001ff4:	6811      	ldr	r1, [r2, #0]
 8001ff6:	1855      	adds	r5, r2, r1
 8001ff8:	42a5      	cmp	r5, r4
 8001ffa:	d10b      	bne.n	8002014 <_free_r+0x70>
 8001ffc:	6824      	ldr	r4, [r4, #0]
 8001ffe:	4421      	add	r1, r4
 8002000:	1854      	adds	r4, r2, r1
 8002002:	42a3      	cmp	r3, r4
 8002004:	6011      	str	r1, [r2, #0]
 8002006:	d1e0      	bne.n	8001fca <_free_r+0x26>
 8002008:	681c      	ldr	r4, [r3, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	6053      	str	r3, [r2, #4]
 800200e:	440c      	add	r4, r1
 8002010:	6014      	str	r4, [r2, #0]
 8002012:	e7da      	b.n	8001fca <_free_r+0x26>
 8002014:	d902      	bls.n	800201c <_free_r+0x78>
 8002016:	230c      	movs	r3, #12
 8002018:	6003      	str	r3, [r0, #0]
 800201a:	e7d6      	b.n	8001fca <_free_r+0x26>
 800201c:	6825      	ldr	r5, [r4, #0]
 800201e:	1961      	adds	r1, r4, r5
 8002020:	428b      	cmp	r3, r1
 8002022:	bf04      	itt	eq
 8002024:	6819      	ldreq	r1, [r3, #0]
 8002026:	685b      	ldreq	r3, [r3, #4]
 8002028:	6063      	str	r3, [r4, #4]
 800202a:	bf04      	itt	eq
 800202c:	1949      	addeq	r1, r1, r5
 800202e:	6021      	streq	r1, [r4, #0]
 8002030:	6054      	str	r4, [r2, #4]
 8002032:	e7ca      	b.n	8001fca <_free_r+0x26>
 8002034:	b003      	add	sp, #12
 8002036:	bd30      	pop	{r4, r5, pc}
 8002038:	200002f4 	.word	0x200002f4

0800203c <malloc>:
 800203c:	4b02      	ldr	r3, [pc, #8]	; (8002048 <malloc+0xc>)
 800203e:	4601      	mov	r1, r0
 8002040:	6818      	ldr	r0, [r3, #0]
 8002042:	f000 b823 	b.w	800208c <_malloc_r>
 8002046:	bf00      	nop
 8002048:	20000084 	.word	0x20000084

0800204c <sbrk_aligned>:
 800204c:	b570      	push	{r4, r5, r6, lr}
 800204e:	4e0e      	ldr	r6, [pc, #56]	; (8002088 <sbrk_aligned+0x3c>)
 8002050:	460c      	mov	r4, r1
 8002052:	6831      	ldr	r1, [r6, #0]
 8002054:	4605      	mov	r5, r0
 8002056:	b911      	cbnz	r1, 800205e <sbrk_aligned+0x12>
 8002058:	f000 f98a 	bl	8002370 <_sbrk_r>
 800205c:	6030      	str	r0, [r6, #0]
 800205e:	4621      	mov	r1, r4
 8002060:	4628      	mov	r0, r5
 8002062:	f000 f985 	bl	8002370 <_sbrk_r>
 8002066:	1c43      	adds	r3, r0, #1
 8002068:	d00a      	beq.n	8002080 <sbrk_aligned+0x34>
 800206a:	1cc4      	adds	r4, r0, #3
 800206c:	f024 0403 	bic.w	r4, r4, #3
 8002070:	42a0      	cmp	r0, r4
 8002072:	d007      	beq.n	8002084 <sbrk_aligned+0x38>
 8002074:	1a21      	subs	r1, r4, r0
 8002076:	4628      	mov	r0, r5
 8002078:	f000 f97a 	bl	8002370 <_sbrk_r>
 800207c:	3001      	adds	r0, #1
 800207e:	d101      	bne.n	8002084 <sbrk_aligned+0x38>
 8002080:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002084:	4620      	mov	r0, r4
 8002086:	bd70      	pop	{r4, r5, r6, pc}
 8002088:	200002f8 	.word	0x200002f8

0800208c <_malloc_r>:
 800208c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002090:	1ccd      	adds	r5, r1, #3
 8002092:	f025 0503 	bic.w	r5, r5, #3
 8002096:	3508      	adds	r5, #8
 8002098:	2d0c      	cmp	r5, #12
 800209a:	bf38      	it	cc
 800209c:	250c      	movcc	r5, #12
 800209e:	2d00      	cmp	r5, #0
 80020a0:	4607      	mov	r7, r0
 80020a2:	db01      	blt.n	80020a8 <_malloc_r+0x1c>
 80020a4:	42a9      	cmp	r1, r5
 80020a6:	d905      	bls.n	80020b4 <_malloc_r+0x28>
 80020a8:	230c      	movs	r3, #12
 80020aa:	603b      	str	r3, [r7, #0]
 80020ac:	2600      	movs	r6, #0
 80020ae:	4630      	mov	r0, r6
 80020b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80020b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002188 <_malloc_r+0xfc>
 80020b8:	f000 f868 	bl	800218c <__malloc_lock>
 80020bc:	f8d8 3000 	ldr.w	r3, [r8]
 80020c0:	461c      	mov	r4, r3
 80020c2:	bb5c      	cbnz	r4, 800211c <_malloc_r+0x90>
 80020c4:	4629      	mov	r1, r5
 80020c6:	4638      	mov	r0, r7
 80020c8:	f7ff ffc0 	bl	800204c <sbrk_aligned>
 80020cc:	1c43      	adds	r3, r0, #1
 80020ce:	4604      	mov	r4, r0
 80020d0:	d155      	bne.n	800217e <_malloc_r+0xf2>
 80020d2:	f8d8 4000 	ldr.w	r4, [r8]
 80020d6:	4626      	mov	r6, r4
 80020d8:	2e00      	cmp	r6, #0
 80020da:	d145      	bne.n	8002168 <_malloc_r+0xdc>
 80020dc:	2c00      	cmp	r4, #0
 80020de:	d048      	beq.n	8002172 <_malloc_r+0xe6>
 80020e0:	6823      	ldr	r3, [r4, #0]
 80020e2:	4631      	mov	r1, r6
 80020e4:	4638      	mov	r0, r7
 80020e6:	eb04 0903 	add.w	r9, r4, r3
 80020ea:	f000 f941 	bl	8002370 <_sbrk_r>
 80020ee:	4581      	cmp	r9, r0
 80020f0:	d13f      	bne.n	8002172 <_malloc_r+0xe6>
 80020f2:	6821      	ldr	r1, [r4, #0]
 80020f4:	1a6d      	subs	r5, r5, r1
 80020f6:	4629      	mov	r1, r5
 80020f8:	4638      	mov	r0, r7
 80020fa:	f7ff ffa7 	bl	800204c <sbrk_aligned>
 80020fe:	3001      	adds	r0, #1
 8002100:	d037      	beq.n	8002172 <_malloc_r+0xe6>
 8002102:	6823      	ldr	r3, [r4, #0]
 8002104:	442b      	add	r3, r5
 8002106:	6023      	str	r3, [r4, #0]
 8002108:	f8d8 3000 	ldr.w	r3, [r8]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d038      	beq.n	8002182 <_malloc_r+0xf6>
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	42a2      	cmp	r2, r4
 8002114:	d12b      	bne.n	800216e <_malloc_r+0xe2>
 8002116:	2200      	movs	r2, #0
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	e00f      	b.n	800213c <_malloc_r+0xb0>
 800211c:	6822      	ldr	r2, [r4, #0]
 800211e:	1b52      	subs	r2, r2, r5
 8002120:	d41f      	bmi.n	8002162 <_malloc_r+0xd6>
 8002122:	2a0b      	cmp	r2, #11
 8002124:	d917      	bls.n	8002156 <_malloc_r+0xca>
 8002126:	1961      	adds	r1, r4, r5
 8002128:	42a3      	cmp	r3, r4
 800212a:	6025      	str	r5, [r4, #0]
 800212c:	bf18      	it	ne
 800212e:	6059      	strne	r1, [r3, #4]
 8002130:	6863      	ldr	r3, [r4, #4]
 8002132:	bf08      	it	eq
 8002134:	f8c8 1000 	streq.w	r1, [r8]
 8002138:	5162      	str	r2, [r4, r5]
 800213a:	604b      	str	r3, [r1, #4]
 800213c:	4638      	mov	r0, r7
 800213e:	f104 060b 	add.w	r6, r4, #11
 8002142:	f000 f829 	bl	8002198 <__malloc_unlock>
 8002146:	f026 0607 	bic.w	r6, r6, #7
 800214a:	1d23      	adds	r3, r4, #4
 800214c:	1af2      	subs	r2, r6, r3
 800214e:	d0ae      	beq.n	80020ae <_malloc_r+0x22>
 8002150:	1b9b      	subs	r3, r3, r6
 8002152:	50a3      	str	r3, [r4, r2]
 8002154:	e7ab      	b.n	80020ae <_malloc_r+0x22>
 8002156:	42a3      	cmp	r3, r4
 8002158:	6862      	ldr	r2, [r4, #4]
 800215a:	d1dd      	bne.n	8002118 <_malloc_r+0x8c>
 800215c:	f8c8 2000 	str.w	r2, [r8]
 8002160:	e7ec      	b.n	800213c <_malloc_r+0xb0>
 8002162:	4623      	mov	r3, r4
 8002164:	6864      	ldr	r4, [r4, #4]
 8002166:	e7ac      	b.n	80020c2 <_malloc_r+0x36>
 8002168:	4634      	mov	r4, r6
 800216a:	6876      	ldr	r6, [r6, #4]
 800216c:	e7b4      	b.n	80020d8 <_malloc_r+0x4c>
 800216e:	4613      	mov	r3, r2
 8002170:	e7cc      	b.n	800210c <_malloc_r+0x80>
 8002172:	230c      	movs	r3, #12
 8002174:	603b      	str	r3, [r7, #0]
 8002176:	4638      	mov	r0, r7
 8002178:	f000 f80e 	bl	8002198 <__malloc_unlock>
 800217c:	e797      	b.n	80020ae <_malloc_r+0x22>
 800217e:	6025      	str	r5, [r4, #0]
 8002180:	e7dc      	b.n	800213c <_malloc_r+0xb0>
 8002182:	605b      	str	r3, [r3, #4]
 8002184:	deff      	udf	#255	; 0xff
 8002186:	bf00      	nop
 8002188:	200002f4 	.word	0x200002f4

0800218c <__malloc_lock>:
 800218c:	4801      	ldr	r0, [pc, #4]	; (8002194 <__malloc_lock+0x8>)
 800218e:	f7ff bf06 	b.w	8001f9e <__retarget_lock_acquire_recursive>
 8002192:	bf00      	nop
 8002194:	200002f0 	.word	0x200002f0

08002198 <__malloc_unlock>:
 8002198:	4801      	ldr	r0, [pc, #4]	; (80021a0 <__malloc_unlock+0x8>)
 800219a:	f7ff bf01 	b.w	8001fa0 <__retarget_lock_release_recursive>
 800219e:	bf00      	nop
 80021a0:	200002f0 	.word	0x200002f0

080021a4 <__sflush_r>:
 80021a4:	898a      	ldrh	r2, [r1, #12]
 80021a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021aa:	4605      	mov	r5, r0
 80021ac:	0710      	lsls	r0, r2, #28
 80021ae:	460c      	mov	r4, r1
 80021b0:	d458      	bmi.n	8002264 <__sflush_r+0xc0>
 80021b2:	684b      	ldr	r3, [r1, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	dc05      	bgt.n	80021c4 <__sflush_r+0x20>
 80021b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	dc02      	bgt.n	80021c4 <__sflush_r+0x20>
 80021be:	2000      	movs	r0, #0
 80021c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80021c6:	2e00      	cmp	r6, #0
 80021c8:	d0f9      	beq.n	80021be <__sflush_r+0x1a>
 80021ca:	2300      	movs	r3, #0
 80021cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80021d0:	682f      	ldr	r7, [r5, #0]
 80021d2:	6a21      	ldr	r1, [r4, #32]
 80021d4:	602b      	str	r3, [r5, #0]
 80021d6:	d032      	beq.n	800223e <__sflush_r+0x9a>
 80021d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80021da:	89a3      	ldrh	r3, [r4, #12]
 80021dc:	075a      	lsls	r2, r3, #29
 80021de:	d505      	bpl.n	80021ec <__sflush_r+0x48>
 80021e0:	6863      	ldr	r3, [r4, #4]
 80021e2:	1ac0      	subs	r0, r0, r3
 80021e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80021e6:	b10b      	cbz	r3, 80021ec <__sflush_r+0x48>
 80021e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021ea:	1ac0      	subs	r0, r0, r3
 80021ec:	2300      	movs	r3, #0
 80021ee:	4602      	mov	r2, r0
 80021f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80021f2:	6a21      	ldr	r1, [r4, #32]
 80021f4:	4628      	mov	r0, r5
 80021f6:	47b0      	blx	r6
 80021f8:	1c43      	adds	r3, r0, #1
 80021fa:	89a3      	ldrh	r3, [r4, #12]
 80021fc:	d106      	bne.n	800220c <__sflush_r+0x68>
 80021fe:	6829      	ldr	r1, [r5, #0]
 8002200:	291d      	cmp	r1, #29
 8002202:	d82b      	bhi.n	800225c <__sflush_r+0xb8>
 8002204:	4a29      	ldr	r2, [pc, #164]	; (80022ac <__sflush_r+0x108>)
 8002206:	410a      	asrs	r2, r1
 8002208:	07d6      	lsls	r6, r2, #31
 800220a:	d427      	bmi.n	800225c <__sflush_r+0xb8>
 800220c:	2200      	movs	r2, #0
 800220e:	6062      	str	r2, [r4, #4]
 8002210:	04d9      	lsls	r1, r3, #19
 8002212:	6922      	ldr	r2, [r4, #16]
 8002214:	6022      	str	r2, [r4, #0]
 8002216:	d504      	bpl.n	8002222 <__sflush_r+0x7e>
 8002218:	1c42      	adds	r2, r0, #1
 800221a:	d101      	bne.n	8002220 <__sflush_r+0x7c>
 800221c:	682b      	ldr	r3, [r5, #0]
 800221e:	b903      	cbnz	r3, 8002222 <__sflush_r+0x7e>
 8002220:	6560      	str	r0, [r4, #84]	; 0x54
 8002222:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002224:	602f      	str	r7, [r5, #0]
 8002226:	2900      	cmp	r1, #0
 8002228:	d0c9      	beq.n	80021be <__sflush_r+0x1a>
 800222a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800222e:	4299      	cmp	r1, r3
 8002230:	d002      	beq.n	8002238 <__sflush_r+0x94>
 8002232:	4628      	mov	r0, r5
 8002234:	f7ff feb6 	bl	8001fa4 <_free_r>
 8002238:	2000      	movs	r0, #0
 800223a:	6360      	str	r0, [r4, #52]	; 0x34
 800223c:	e7c0      	b.n	80021c0 <__sflush_r+0x1c>
 800223e:	2301      	movs	r3, #1
 8002240:	4628      	mov	r0, r5
 8002242:	47b0      	blx	r6
 8002244:	1c41      	adds	r1, r0, #1
 8002246:	d1c8      	bne.n	80021da <__sflush_r+0x36>
 8002248:	682b      	ldr	r3, [r5, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0c5      	beq.n	80021da <__sflush_r+0x36>
 800224e:	2b1d      	cmp	r3, #29
 8002250:	d001      	beq.n	8002256 <__sflush_r+0xb2>
 8002252:	2b16      	cmp	r3, #22
 8002254:	d101      	bne.n	800225a <__sflush_r+0xb6>
 8002256:	602f      	str	r7, [r5, #0]
 8002258:	e7b1      	b.n	80021be <__sflush_r+0x1a>
 800225a:	89a3      	ldrh	r3, [r4, #12]
 800225c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002260:	81a3      	strh	r3, [r4, #12]
 8002262:	e7ad      	b.n	80021c0 <__sflush_r+0x1c>
 8002264:	690f      	ldr	r7, [r1, #16]
 8002266:	2f00      	cmp	r7, #0
 8002268:	d0a9      	beq.n	80021be <__sflush_r+0x1a>
 800226a:	0793      	lsls	r3, r2, #30
 800226c:	680e      	ldr	r6, [r1, #0]
 800226e:	bf08      	it	eq
 8002270:	694b      	ldreq	r3, [r1, #20]
 8002272:	600f      	str	r7, [r1, #0]
 8002274:	bf18      	it	ne
 8002276:	2300      	movne	r3, #0
 8002278:	eba6 0807 	sub.w	r8, r6, r7
 800227c:	608b      	str	r3, [r1, #8]
 800227e:	f1b8 0f00 	cmp.w	r8, #0
 8002282:	dd9c      	ble.n	80021be <__sflush_r+0x1a>
 8002284:	6a21      	ldr	r1, [r4, #32]
 8002286:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002288:	4643      	mov	r3, r8
 800228a:	463a      	mov	r2, r7
 800228c:	4628      	mov	r0, r5
 800228e:	47b0      	blx	r6
 8002290:	2800      	cmp	r0, #0
 8002292:	dc06      	bgt.n	80022a2 <__sflush_r+0xfe>
 8002294:	89a3      	ldrh	r3, [r4, #12]
 8002296:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800229a:	81a3      	strh	r3, [r4, #12]
 800229c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022a0:	e78e      	b.n	80021c0 <__sflush_r+0x1c>
 80022a2:	4407      	add	r7, r0
 80022a4:	eba8 0800 	sub.w	r8, r8, r0
 80022a8:	e7e9      	b.n	800227e <__sflush_r+0xda>
 80022aa:	bf00      	nop
 80022ac:	dfbffffe 	.word	0xdfbffffe

080022b0 <_fflush_r>:
 80022b0:	b538      	push	{r3, r4, r5, lr}
 80022b2:	690b      	ldr	r3, [r1, #16]
 80022b4:	4605      	mov	r5, r0
 80022b6:	460c      	mov	r4, r1
 80022b8:	b913      	cbnz	r3, 80022c0 <_fflush_r+0x10>
 80022ba:	2500      	movs	r5, #0
 80022bc:	4628      	mov	r0, r5
 80022be:	bd38      	pop	{r3, r4, r5, pc}
 80022c0:	b118      	cbz	r0, 80022ca <_fflush_r+0x1a>
 80022c2:	6a03      	ldr	r3, [r0, #32]
 80022c4:	b90b      	cbnz	r3, 80022ca <_fflush_r+0x1a>
 80022c6:	f7ff fcd3 	bl	8001c70 <__sinit>
 80022ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d0f3      	beq.n	80022ba <_fflush_r+0xa>
 80022d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80022d4:	07d0      	lsls	r0, r2, #31
 80022d6:	d404      	bmi.n	80022e2 <_fflush_r+0x32>
 80022d8:	0599      	lsls	r1, r3, #22
 80022da:	d402      	bmi.n	80022e2 <_fflush_r+0x32>
 80022dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80022de:	f7ff fe5e 	bl	8001f9e <__retarget_lock_acquire_recursive>
 80022e2:	4628      	mov	r0, r5
 80022e4:	4621      	mov	r1, r4
 80022e6:	f7ff ff5d 	bl	80021a4 <__sflush_r>
 80022ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80022ec:	07da      	lsls	r2, r3, #31
 80022ee:	4605      	mov	r5, r0
 80022f0:	d4e4      	bmi.n	80022bc <_fflush_r+0xc>
 80022f2:	89a3      	ldrh	r3, [r4, #12]
 80022f4:	059b      	lsls	r3, r3, #22
 80022f6:	d4e1      	bmi.n	80022bc <_fflush_r+0xc>
 80022f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80022fa:	f7ff fe51 	bl	8001fa0 <__retarget_lock_release_recursive>
 80022fe:	e7dd      	b.n	80022bc <_fflush_r+0xc>

08002300 <__swhatbuf_r>:
 8002300:	b570      	push	{r4, r5, r6, lr}
 8002302:	460c      	mov	r4, r1
 8002304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002308:	2900      	cmp	r1, #0
 800230a:	b096      	sub	sp, #88	; 0x58
 800230c:	4615      	mov	r5, r2
 800230e:	461e      	mov	r6, r3
 8002310:	da0d      	bge.n	800232e <__swhatbuf_r+0x2e>
 8002312:	89a3      	ldrh	r3, [r4, #12]
 8002314:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002318:	f04f 0100 	mov.w	r1, #0
 800231c:	bf0c      	ite	eq
 800231e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002322:	2340      	movne	r3, #64	; 0x40
 8002324:	2000      	movs	r0, #0
 8002326:	6031      	str	r1, [r6, #0]
 8002328:	602b      	str	r3, [r5, #0]
 800232a:	b016      	add	sp, #88	; 0x58
 800232c:	bd70      	pop	{r4, r5, r6, pc}
 800232e:	466a      	mov	r2, sp
 8002330:	f000 f80c 	bl	800234c <_fstat_r>
 8002334:	2800      	cmp	r0, #0
 8002336:	dbec      	blt.n	8002312 <__swhatbuf_r+0x12>
 8002338:	9901      	ldr	r1, [sp, #4]
 800233a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800233e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002342:	4259      	negs	r1, r3
 8002344:	4159      	adcs	r1, r3
 8002346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800234a:	e7eb      	b.n	8002324 <__swhatbuf_r+0x24>

0800234c <_fstat_r>:
 800234c:	b538      	push	{r3, r4, r5, lr}
 800234e:	4d07      	ldr	r5, [pc, #28]	; (800236c <_fstat_r+0x20>)
 8002350:	2300      	movs	r3, #0
 8002352:	4604      	mov	r4, r0
 8002354:	4608      	mov	r0, r1
 8002356:	4611      	mov	r1, r2
 8002358:	602b      	str	r3, [r5, #0]
 800235a:	f7ff fa66 	bl	800182a <_fstat>
 800235e:	1c43      	adds	r3, r0, #1
 8002360:	d102      	bne.n	8002368 <_fstat_r+0x1c>
 8002362:	682b      	ldr	r3, [r5, #0]
 8002364:	b103      	cbz	r3, 8002368 <_fstat_r+0x1c>
 8002366:	6023      	str	r3, [r4, #0]
 8002368:	bd38      	pop	{r3, r4, r5, pc}
 800236a:	bf00      	nop
 800236c:	200002ec 	.word	0x200002ec

08002370 <_sbrk_r>:
 8002370:	b538      	push	{r3, r4, r5, lr}
 8002372:	4d06      	ldr	r5, [pc, #24]	; (800238c <_sbrk_r+0x1c>)
 8002374:	2300      	movs	r3, #0
 8002376:	4604      	mov	r4, r0
 8002378:	4608      	mov	r0, r1
 800237a:	602b      	str	r3, [r5, #0]
 800237c:	f7ff fa72 	bl	8001864 <_sbrk>
 8002380:	1c43      	adds	r3, r0, #1
 8002382:	d102      	bne.n	800238a <_sbrk_r+0x1a>
 8002384:	682b      	ldr	r3, [r5, #0]
 8002386:	b103      	cbz	r3, 800238a <_sbrk_r+0x1a>
 8002388:	6023      	str	r3, [r4, #0]
 800238a:	bd38      	pop	{r3, r4, r5, pc}
 800238c:	200002ec 	.word	0x200002ec

08002390 <_init>:
 8002390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002392:	bf00      	nop
 8002394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002396:	bc08      	pop	{r3}
 8002398:	469e      	mov	lr, r3
 800239a:	4770      	bx	lr

0800239c <_fini>:
 800239c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800239e:	bf00      	nop
 80023a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023a2:	bc08      	pop	{r3}
 80023a4:	469e      	mov	lr, r3
 80023a6:	4770      	bx	lr
